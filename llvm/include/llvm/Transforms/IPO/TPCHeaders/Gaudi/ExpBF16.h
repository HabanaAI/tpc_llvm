#ifdef WIN32
const llvm::StringRef GaudiExpBF16LL = "";
#else
const llvm::StringRef GaudiExpBF16LL = R"(
; Function Attrs: alwaysinline nounwind
define  dso_local <128 x bfloat16> @exp_bf16(<128 x bfloat16> %input) local_unnamed_addr #2 {
entry:
  %0 = call <128 x bfloat16> @llvm.tpc.mac.v128bf16.v128bf16.i1(<128 x bfloat16> %input, <128 x bfloat16> <bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9, bfloat16 0xR3FB9>, i8 1, i32 0, <128 x bfloat16> <bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00, bfloat16 0xR3F00>, i1 true, i1 false)
  %1 = call <128 x bfloat16> @llvm.tpc.nearbyint.v128bf16.v128bf16.i1(<128 x bfloat16> %0, i8 1, i32 196608, <128 x bfloat16> undef, i1 true, i1 false)
  %2 = call <128 x i16> @llvm.tpc.convert.v128i16.v128bf16.i1(<128 x bfloat16> %1, i8 1, i32 198400, <128 x i16> undef, i1 true, i1 false)
  %3 = call <128 x bfloat16> @llvm.tpc.mac.v128bf16.v128bf16.i1(<128 x bfloat16> %1, <128 x bfloat16> <bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30, bfloat16 0xRBF30>, i8 1, i32 0, <128 x bfloat16> %input, i1 true, i1 false)
  %4 = call <128 x bfloat16> @llvm.tpc.mac.v128bf16.v128bf16.i1(<128 x bfloat16> %1, <128 x bfloat16> <bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9, bfloat16 0xRBBB9>, i8 1, i32 0, <128 x bfloat16> %3, i1 true, i1 false)
  %5 = call <128 x bfloat16> @llvm.tpc.sel.leq.v128bf16.v128bf16.bf16.v128bf16.v128bf16.i1(<128 x bfloat16> %input, bfloat16 0xRC2AF, <128 x bfloat16> <bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80, bfloat16 0xRFF80>, <128 x bfloat16> %input, i8 1, i32 0, <128 x bfloat16> undef, i1 true, i1 false)
  %6 = call <128 x bfloat16> @llvm.tpc.sel.grt.v128bf16.v128bf16.bf16.v128bf16.v128bf16.i1(<128 x bfloat16> %5, bfloat16 0xR42B1, <128 x bfloat16> <bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80, bfloat16 0xR7F80>, <128 x bfloat16> %5, i8 1, i32 0, <128 x bfloat16> undef, i1 true, i1 false)
  %7 = fadd <128 x bfloat16> %4, <bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0, bfloat16 0xR3FC0>
  %8 = bitcast <128 x bfloat16> %7 to <128 x i16>
  %9 = call <128 x i16> @llvm.tpc.sub.v128i16.v128i16.v128i16.i1(<128 x i16> %8, <128 x i16> <i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199, i16 16199>, i8 8, i32 1, <128 x i16> undef, i1 true, i1 false)
  %10 = call <128 x bfloat16> @llvm.tpc.lookup.1c.v128bf16.v128i16(<128 x i16> %9, i32 138, i32 1, <128 x bfloat16> zeroinitializer, i1 true, i1 false)
  %11 = shl <128 x i16> %2, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %12 = bitcast <128 x bfloat16> %10 to <128 x i16>
  %13 = add <128 x i16> %11, %12
  %14 = bitcast <128 x i16> %13 to <128 x bfloat16>
  %15 = call <128 x bfloat16> @llvm.tpc.fclass.v128bf16.i1(<128 x bfloat16> %6, i8 1, i32 0, <128 x bfloat16> undef, i1 true, i1 false)
  %16 = call <128 x bfloat16> @llvm.tpc.calc.fp.special.v128bf16.i1(<128 x bfloat16> %15, <128 x bfloat16> undef, i8 1, i32 4, <128 x bfloat16> %14, i1 true, i1 false)
  ret <128 x bfloat16> %16
}

declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

declare <5 x i32> @llvm.tpc.get.index.space.size() #1

declare <128 x bfloat16> @llvm.tpc.ld.tnsr.v128bf16.i1(<5 x i32>, i8, i32, <128 x bfloat16>, i1, i1) #1

declare void @llvm.tpc.st.tnsr.v128bf16(<5 x i32>, i8, <128 x bfloat16>, i32, i1, i1) #2

declare <128 x bfloat16> @llvm.tpc.mac.v128bf16.v128bf16.i1(<128 x bfloat16>, <128 x bfloat16>, i8, i32, <128 x bfloat16>, i1, i1) #1

declare <128 x bfloat16> @llvm.tpc.nearbyint.v128bf16.v128bf16.i1(<128 x bfloat16>, i8, i32, <128 x bfloat16>, i1, i1) #1

declare <128 x i16> @llvm.tpc.convert.v128i16.v128bf16.i1(<128 x bfloat16>, i8, i32, <128 x i16>, i1, i1) #1

declare <128 x bfloat16> @llvm.tpc.sel.leq.v128bf16.v128bf16.bf16.v128bf16.v128bf16.i1(<128 x bfloat16>, bfloat16, <128 x bfloat16>, <128 x bfloat16>, i8, i32, <128 x bfloat16>, i1, i1) #1

declare <128 x bfloat16> @llvm.tpc.sel.grt.v128bf16.v128bf16.bf16.v128bf16.v128bf16.i1(<128 x bfloat16>, bfloat16, <128 x bfloat16>, <128 x bfloat16>, i8, i32, <128 x bfloat16>, i1, i1) #1

declare <128 x i16> @llvm.tpc.sub.v128i16.v128i16.v128i16.i1(<128 x i16>, <128 x i16>, i8, i32, <128 x i16>, i1, i1) #1

declare <128 x bfloat16> @llvm.tpc.lookup.1c.v128bf16.v128i16(<128 x i16>, i32, i32, <128 x bfloat16>, i1, i1) #1

declare <128 x bfloat16> @llvm.tpc.fclass.v128bf16.i1(<128 x bfloat16>, i8, i32, <128 x bfloat16>, i1, i1) #1

declare <128 x bfloat16> @llvm.tpc.calc.fp.special.v128bf16.i1(<128 x bfloat16>, <128 x bfloat16>, i8, i32, <128 x bfloat16>, i1, i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind writeonly }
attributes #4 = { nounwind readnone   willreturn }
)";
#endif
