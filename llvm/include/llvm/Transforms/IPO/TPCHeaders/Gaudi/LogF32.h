//===--------LogF32.h-----------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
//===----------------------------------------------------------------------===//
#ifdef WIN32
const llvm::StringRef GaudiLogF32LL = "";
#else
const llvm::StringRef GaudiLogF32LL = R"(
; Function Attrs: alwaysinline nounwind
define  dso_local <64 x float> @log_f32(<64 x float> %input) local_unnamed_addr #3 {
entry:
  %0 = call <64 x i32> @llvm.tpc.extract.exp.v64i32.v64f32.i1(<64 x float> %input, i8 0, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %add.i = add <64 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> <i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126, i8 126>, <64 x float> %input, <64 x float> %input, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #5
  %sub.i = fadd <64 x float> %1, <float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000>
  %2 = bitcast <64 x float> %sub.i to <64 x i32>
  %3 = call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %2, i32 31, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %sub1.i = sub <64 x i32> %add.i, %3
  %4 = call <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32> %sub1.i, i8 2, i32 0, <64 x float> undef, i1 true, i1 false) #5
  %5 = call <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32> %3, i8 2, i32 0, <64 x float> undef, i1 true, i1 false) #5
  %mul.i = fmul <64 x float> %5, %1
  %sub2.i = fadd <64 x float> %mul.i, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %add3.i = fadd <64 x float> %1, %sub2.i
  %mul4.i = fmul <64 x float> %add3.i, %add3.i
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %entry
  %poly.0.i = phi <64 x float> [ <float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000, float 0x3FB2043760000000>, %entry ], [ %7, %for.body.i ]
  %i.0.i = phi i32 [ 1, %entry ], [ %inc.i, %for.body.i ]
  %cmp.i = icmp ult i32 %i.0.i, 9
  br i1 %cmp.i, label %for.body.i, label %log_fast_f32.exit

for.body.i:                                       ; preds = %for.cond.i
  %arrayidx5.i = getelementptr inbounds [9 x float], [9 x float]* @__const.log_fast_f32.coeffs, i32 0, i32 %i.0.i
  %6 = load float, float* %arrayidx5.i, align 4
  %splat.splatinsert6.i = insertelement <64 x float> undef, float %6, i32 0
  %splat.splat7.i = shufflevector <64 x float> %splat.splatinsert6.i, <64 x float> undef, <64 x i32> zeroinitializer
  %7 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %poly.0.i, <64 x float> %add3.i, i8 0, i32 0, <64 x float> %splat.splat7.i, i1 true, i1 false) #5
  %inc.i = add nuw nsw i32 %i.0.i, 1
  br label %for.cond.i

log_fast_f32.exit:                                ; preds = %for.cond.i
  %mul8.i = fmul <64 x float> %mul4.i, %poly.0.i
  %mul9.i = fmul <64 x float> %add3.i, %mul8.i
  %mul10.i = fmul <64 x float> %mul4.i, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %sub11.i = fsub <64 x float> %mul9.i, %mul10.i
  %mul12.i = fmul <64 x float> %sub11.i, <float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000>
  %mul13.i = fmul <64 x float> %add3.i, <float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000, float 0x3FDC551DA0000000>
  %add14.i = fadd <64 x float> %mul12.i, %mul13.i
  %add15.i = fadd <64 x float> %add14.i, %sub11.i
  %add16.i = fadd <64 x float> %add15.i, %add3.i
  %add17.i = fadd <64 x float> %add16.i, %4
  %mul18.i = fmul <64 x float> %add17.i, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %8 = call <64 x float> @llvm.tpc.fclass.v64f32.i1(<64 x float> %input, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %9 = call <64 x float> @llvm.tpc.calc.fp.special.v64f32.i1(<64 x float> %8, <64 x float> undef, i8 0, i32 3, <64 x float> %mul18.i, i1 true, i1 false)
  ret <64 x float> %9
}

@__const.log_fast_f32.coeffs = private unnamed_addr constant [9 x float] [float 0x3FB2043760000000, float 0xBFBD7A3700000000, float 0x3FBDE4A340000000, float 0xBFBFCBA9E0000000, float 0x3FC23D37E0000000, float 0xBFC555CA00000000, float 0x3FC999D580000000, float 0xBFCFFFFF80000000, float 0x3FD5555540000000], align 4

declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

declare <5 x i32> @llvm.tpc.get.index.space.size() #1

declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

declare <64 x float> @llvm.tpc.fclass.v64f32.i1(<64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x float> @llvm.tpc.calc.fp.special.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x i32> @llvm.tpc.extract.exp.v64i32.v64f32.i1(<64 x float>, i8, i32, <64 x i32>, i1, i1) #1

declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone }
attributes #3 = { alwaysinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind writeonly }
attributes #5 = { nounwind }
)";
#endif
