#ifndef _WIN32
constexpr llvm::StringRef GoyaReciprocalF32LL = R"(
; Function Attrs: alwaysinline nounwind
define  dso_local <64 x float> @reciprocal_cephes_f32(<64 x float> %input) local_unnamed_addr #2 {
entry:
  %0 = bitcast <64 x float> %input to <64 x i32>
  %1 = call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %0, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %2 = call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %1, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %3 = bitcast <64 x i32> %2 to <64 x float>
  %4 = call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %0, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %5 = call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %4, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %6 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #5
  %7 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> %6, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #5
  %fneg.i = fneg <64 x float> %3
  %8 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %7, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #5
  %mul.i = fmul <64 x float> %8, %7
  %9 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %mul.i, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #5
  %mul2.i = fmul <64 x float> %9, %mul.i
  %10 = bitcast <64 x float> %mul2.i to <64 x i32>
  %11 = call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %10, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %12 = call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %11, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %sub3.i = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %5
  %13 = add <64 x i32> %12, %sub3.i
  %14 = call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %13, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #5
  %15 = bitcast <64 x i32> %14 to <256 x i8>
  %16 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %15, <64 x float> %input, <64 x float> %mul2.i, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #5
  %17 = call <64 x float> @llvm.fabs.v64f32(<64 x float> %input)
  %18 = bitcast <64 x float> %17 to <64 x i32>
  %19 = call <64 x float> @llvm.fabs.v64f32(<64 x float> %16)
  %20 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %17, <64 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <64 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <64 x float> %19, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %21 = call <64 x float> @llvm.tpc.sel.geq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %17, <64 x float> <float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000>, <64 x float> zeroinitializer, <64 x float> %20, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %22 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %18, i32 2139095040, <64 x float> <float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000>, <64 x float> %21, i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
  %23 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v64f32.i1(<64 x float> %22, <64 x float> %input, <64 x float> %22, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  ret <64 x float> %23
}

declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

declare <5 x i32> @llvm.tpc.get.index.space.size() #1

declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

declare <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x float> @llvm.tpc.sel.geq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32>, i32, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

declare <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

declare <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

declare <64 x float> @llvm.fabs.v64f32(<64 x float>) #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="dali" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="dali" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind writeonly }
attributes #4 = { nounwind readnone   willreturn }
)";
#endif
