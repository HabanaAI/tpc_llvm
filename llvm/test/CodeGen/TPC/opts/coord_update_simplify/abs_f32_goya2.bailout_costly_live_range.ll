; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -march=tpc -mcpu=goya2 -coord-simplify -coord-update-simplify=true -S | FileCheck %s

target datalayout = "e-p0:32:32:32-p1:32:32:32-p2:32:32:32-p3:64:64:64-i32:32:32-n8:16:32-f16:16:16-f32:32:32-v160:32:32-v256:2048:2048-v2048:2048:2048-v4096:2048:2048-v8192:2048:2048"
target triple = "tpc"

; Function Attrs: nounwind writeonly
define dso_local void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 3
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[VECEXT]], 2
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 3
; CHECK-NEXT:    [[MUL2:%.*]] = shl i32 [[VECEXT1]], 2
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 0
; CHECK-NEXT:    [[VECEXT4:%.*]] = extractelement <5 x i32> [[ADD]], i32 0
; CHECK-NEXT:    [[CMP420:%.*]] = icmp slt i32 [[VECEXT3]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP420]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP65359:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[H_0451:%.*]] = phi i32 [ [[VECEXT3]], [[FOR_BODY_LR_PH]] ], [ [[ADD100:%.*]], [[FOR_COND_CLEANUP66:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS0_0450:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS0_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS1_0449:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS1_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS2_0448:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS2_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS3_0447:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS3_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS4_0446:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS4_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS5_0445:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS5_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS6_0444:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS6_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS7_0443:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS7_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS8_0442:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS8_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS9_0441:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS9_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS10_0440:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS10_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS11_0439:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS11_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS12_0438:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS12_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS13_0437:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS13_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS14_0436:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS14_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS15_0435:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS15_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS16_0434:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS16_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS17_0433:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS17_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS18_0432:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS18_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS19_0431:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS19_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS20_0430:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS20_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS21_0429:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS21_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS22_0428:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS22_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS23_0427:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS23_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS24_0426:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS24_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS25_0425:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS25_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS26_0424:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS26_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS27_0423:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS27_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS28_0422:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS28_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[IFMCOORDS29_0421:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS29_1_LCSSA:%.*]], [[FOR_COND_CLEANUP66]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[IFMCOORDS0_0450]], i32 [[H_0451]], i32 0
; CHECK-NEXT:    [[ADD6:%.*]] = add nsw i32 [[H_0451]], 1
; CHECK-NEXT:    [[VECINS7:%.*]] = insertelement <5 x i32> [[IFMCOORDS1_0449]], i32 [[ADD6]], i32 0
; CHECK-NEXT:    [[ADD8:%.*]] = add nsw i32 [[H_0451]], 2
; CHECK-NEXT:    [[VECINS9:%.*]] = insertelement <5 x i32> [[IFMCOORDS2_0448]], i32 [[ADD8]], i32 0
; CHECK-NEXT:    [[ADD10:%.*]] = add nsw i32 [[H_0451]], 3
; CHECK-NEXT:    [[VECINS11:%.*]] = insertelement <5 x i32> [[IFMCOORDS3_0447]], i32 [[ADD10]], i32 0
; CHECK-NEXT:    [[ADD12:%.*]] = add nsw i32 [[H_0451]], 4
; CHECK-NEXT:    [[VECINS13:%.*]] = insertelement <5 x i32> [[IFMCOORDS4_0446]], i32 [[ADD12]], i32 0
; CHECK-NEXT:    [[ADD14:%.*]] = add nsw i32 [[H_0451]], 5
; CHECK-NEXT:    [[VECINS15:%.*]] = insertelement <5 x i32> [[IFMCOORDS5_0445]], i32 [[ADD14]], i32 0
; CHECK-NEXT:    [[ADD16:%.*]] = add nsw i32 [[H_0451]], 6
; CHECK-NEXT:    [[VECINS17:%.*]] = insertelement <5 x i32> [[IFMCOORDS6_0444]], i32 [[ADD16]], i32 0
; CHECK-NEXT:    [[ADD18:%.*]] = add nsw i32 [[H_0451]], 7
; CHECK-NEXT:    [[VECINS19:%.*]] = insertelement <5 x i32> [[IFMCOORDS7_0443]], i32 [[ADD18]], i32 0
; CHECK-NEXT:    [[ADD20:%.*]] = add nsw i32 [[H_0451]], 8
; CHECK-NEXT:    [[VECINS21:%.*]] = insertelement <5 x i32> [[IFMCOORDS8_0442]], i32 [[ADD20]], i32 0
; CHECK-NEXT:    [[ADD22:%.*]] = add nsw i32 [[H_0451]], 9
; CHECK-NEXT:    [[VECINS23:%.*]] = insertelement <5 x i32> [[IFMCOORDS9_0441]], i32 [[ADD22]], i32 0
; CHECK-NEXT:    [[ADD24:%.*]] = add nsw i32 [[H_0451]], 10
; CHECK-NEXT:    [[VECINS25:%.*]] = insertelement <5 x i32> [[IFMCOORDS10_0440]], i32 [[ADD24]], i32 0
; CHECK-NEXT:    [[ADD26:%.*]] = add nsw i32 [[H_0451]], 11
; CHECK-NEXT:    [[VECINS27:%.*]] = insertelement <5 x i32> [[IFMCOORDS11_0439]], i32 [[ADD26]], i32 0
; CHECK-NEXT:    [[ADD28:%.*]] = add nsw i32 [[H_0451]], 12
; CHECK-NEXT:    [[VECINS29:%.*]] = insertelement <5 x i32> [[IFMCOORDS12_0438]], i32 [[ADD28]], i32 0
; CHECK-NEXT:    [[ADD30:%.*]] = add nsw i32 [[H_0451]], 13
; CHECK-NEXT:    [[VECINS31:%.*]] = insertelement <5 x i32> [[IFMCOORDS13_0437]], i32 [[ADD30]], i32 0
; CHECK-NEXT:    [[ADD32:%.*]] = add nsw i32 [[H_0451]], 14
; CHECK-NEXT:    [[VECINS33:%.*]] = insertelement <5 x i32> [[IFMCOORDS14_0436]], i32 [[ADD32]], i32 0
; CHECK-NEXT:    [[ADD34:%.*]] = add nsw i32 [[H_0451]], 15
; CHECK-NEXT:    [[VECINS35:%.*]] = insertelement <5 x i32> [[IFMCOORDS15_0435]], i32 [[ADD34]], i32 0
; CHECK-NEXT:    [[ADD36:%.*]] = add nsw i32 [[H_0451]], 16
; CHECK-NEXT:    [[VECINS37:%.*]] = insertelement <5 x i32> [[IFMCOORDS16_0434]], i32 [[ADD36]], i32 0
; CHECK-NEXT:    [[ADD38:%.*]] = add nsw i32 [[H_0451]], 17
; CHECK-NEXT:    [[VECINS39:%.*]] = insertelement <5 x i32> [[IFMCOORDS17_0433]], i32 [[ADD38]], i32 0
; CHECK-NEXT:    [[ADD40:%.*]] = add nsw i32 [[H_0451]], 18
; CHECK-NEXT:    [[VECINS41:%.*]] = insertelement <5 x i32> [[IFMCOORDS18_0432]], i32 [[ADD40]], i32 0
; CHECK-NEXT:    [[ADD42:%.*]] = add nsw i32 [[H_0451]], 19
; CHECK-NEXT:    [[VECINS43:%.*]] = insertelement <5 x i32> [[IFMCOORDS19_0431]], i32 [[ADD42]], i32 0
; CHECK-NEXT:    [[ADD44:%.*]] = add nsw i32 [[H_0451]], 20
; CHECK-NEXT:    [[VECINS45:%.*]] = insertelement <5 x i32> [[IFMCOORDS20_0430]], i32 [[ADD44]], i32 0
; CHECK-NEXT:    [[ADD46:%.*]] = add nsw i32 [[H_0451]], 21
; CHECK-NEXT:    [[VECINS47:%.*]] = insertelement <5 x i32> [[IFMCOORDS21_0429]], i32 [[ADD46]], i32 0
; CHECK-NEXT:    [[ADD48:%.*]] = add nsw i32 [[H_0451]], 22
; CHECK-NEXT:    [[VECINS49:%.*]] = insertelement <5 x i32> [[IFMCOORDS22_0428]], i32 [[ADD48]], i32 0
; CHECK-NEXT:    [[ADD50:%.*]] = add nsw i32 [[H_0451]], 23
; CHECK-NEXT:    [[VECINS51:%.*]] = insertelement <5 x i32> [[IFMCOORDS23_0427]], i32 [[ADD50]], i32 0
; CHECK-NEXT:    [[ADD52:%.*]] = add nsw i32 [[H_0451]], 24
; CHECK-NEXT:    [[VECINS53:%.*]] = insertelement <5 x i32> [[IFMCOORDS24_0426]], i32 [[ADD52]], i32 0
; CHECK-NEXT:    [[ADD54:%.*]] = add nsw i32 [[H_0451]], 25
; CHECK-NEXT:    [[VECINS55:%.*]] = insertelement <5 x i32> [[IFMCOORDS25_0425]], i32 [[ADD54]], i32 0
; CHECK-NEXT:    [[ADD56:%.*]] = add nsw i32 [[H_0451]], 26
; CHECK-NEXT:    [[VECINS57:%.*]] = insertelement <5 x i32> [[IFMCOORDS26_0424]], i32 [[ADD56]], i32 0
; CHECK-NEXT:    [[ADD58:%.*]] = add nsw i32 [[H_0451]], 27
; CHECK-NEXT:    [[VECINS59:%.*]] = insertelement <5 x i32> [[IFMCOORDS27_0423]], i32 [[ADD58]], i32 0
; CHECK-NEXT:    [[ADD60:%.*]] = add nsw i32 [[H_0451]], 28
; CHECK-NEXT:    [[VECINS61:%.*]] = insertelement <5 x i32> [[IFMCOORDS28_0422]], i32 [[ADD60]], i32 0
; CHECK-NEXT:    [[ADD62:%.*]] = add nsw i32 [[H_0451]], 29
; CHECK-NEXT:    [[VECINS63:%.*]] = insertelement <5 x i32> [[IFMCOORDS29_0421]], i32 [[ADD62]], i32 0
; CHECK-NEXT:    br i1 [[CMP65359]], label [[FOR_BODY67_PREHEADER:%.*]], label [[FOR_COND_CLEANUP66]]
; CHECK:       for.body67.preheader:
; CHECK-NEXT:    br label [[FOR_BODY67:%.*]]
; CHECK:       for.cond.cleanup66.loopexit:
; CHECK-NEXT:    [[VECINS68_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS68:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS69_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS69:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS70_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS70:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS71_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS71:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS72_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS72:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS73_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS73:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS74_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS74:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS75_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS75:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS76_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS76:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS77_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS77:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS78_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS78:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS79_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS79:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS80_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS80:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS81_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS81:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS82_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS82:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS83_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS83:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS84_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS84:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS85_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS85:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS86_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS86:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS87_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS87:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS88_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS88:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS89_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS89:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS90_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS90:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS91_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS91:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS92_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS92:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS93_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS93:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS94_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS94:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS95_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS95:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS96_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS96:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    [[VECINS97_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS97:%.*]], [[FOR_BODY67]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP66]]
; CHECK:       for.cond.cleanup66:
; CHECK-NEXT:    [[IFMCOORDS29_1_LCSSA]] = phi <5 x i32> [ [[VECINS63]], [[FOR_BODY]] ], [ [[VECINS97_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS28_1_LCSSA]] = phi <5 x i32> [ [[VECINS61]], [[FOR_BODY]] ], [ [[VECINS96_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS27_1_LCSSA]] = phi <5 x i32> [ [[VECINS59]], [[FOR_BODY]] ], [ [[VECINS95_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS26_1_LCSSA]] = phi <5 x i32> [ [[VECINS57]], [[FOR_BODY]] ], [ [[VECINS94_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS25_1_LCSSA]] = phi <5 x i32> [ [[VECINS55]], [[FOR_BODY]] ], [ [[VECINS93_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS24_1_LCSSA]] = phi <5 x i32> [ [[VECINS53]], [[FOR_BODY]] ], [ [[VECINS92_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS23_1_LCSSA]] = phi <5 x i32> [ [[VECINS51]], [[FOR_BODY]] ], [ [[VECINS91_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS22_1_LCSSA]] = phi <5 x i32> [ [[VECINS49]], [[FOR_BODY]] ], [ [[VECINS90_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS21_1_LCSSA]] = phi <5 x i32> [ [[VECINS47]], [[FOR_BODY]] ], [ [[VECINS89_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS20_1_LCSSA]] = phi <5 x i32> [ [[VECINS45]], [[FOR_BODY]] ], [ [[VECINS88_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS19_1_LCSSA]] = phi <5 x i32> [ [[VECINS43]], [[FOR_BODY]] ], [ [[VECINS87_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS18_1_LCSSA]] = phi <5 x i32> [ [[VECINS41]], [[FOR_BODY]] ], [ [[VECINS86_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS17_1_LCSSA]] = phi <5 x i32> [ [[VECINS39]], [[FOR_BODY]] ], [ [[VECINS85_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS16_1_LCSSA]] = phi <5 x i32> [ [[VECINS37]], [[FOR_BODY]] ], [ [[VECINS84_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS15_1_LCSSA]] = phi <5 x i32> [ [[VECINS35]], [[FOR_BODY]] ], [ [[VECINS83_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS14_1_LCSSA]] = phi <5 x i32> [ [[VECINS33]], [[FOR_BODY]] ], [ [[VECINS82_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS13_1_LCSSA]] = phi <5 x i32> [ [[VECINS31]], [[FOR_BODY]] ], [ [[VECINS81_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS12_1_LCSSA]] = phi <5 x i32> [ [[VECINS29]], [[FOR_BODY]] ], [ [[VECINS80_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS11_1_LCSSA]] = phi <5 x i32> [ [[VECINS27]], [[FOR_BODY]] ], [ [[VECINS79_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS10_1_LCSSA]] = phi <5 x i32> [ [[VECINS25]], [[FOR_BODY]] ], [ [[VECINS78_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS9_1_LCSSA]] = phi <5 x i32> [ [[VECINS23]], [[FOR_BODY]] ], [ [[VECINS77_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS8_1_LCSSA]] = phi <5 x i32> [ [[VECINS21]], [[FOR_BODY]] ], [ [[VECINS76_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS7_1_LCSSA]] = phi <5 x i32> [ [[VECINS19]], [[FOR_BODY]] ], [ [[VECINS75_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS6_1_LCSSA]] = phi <5 x i32> [ [[VECINS17]], [[FOR_BODY]] ], [ [[VECINS74_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS5_1_LCSSA]] = phi <5 x i32> [ [[VECINS15]], [[FOR_BODY]] ], [ [[VECINS73_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS4_1_LCSSA]] = phi <5 x i32> [ [[VECINS13]], [[FOR_BODY]] ], [ [[VECINS72_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS3_1_LCSSA]] = phi <5 x i32> [ [[VECINS11]], [[FOR_BODY]] ], [ [[VECINS71_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS2_1_LCSSA]] = phi <5 x i32> [ [[VECINS9]], [[FOR_BODY]] ], [ [[VECINS70_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS1_1_LCSSA]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY]] ], [ [[VECINS69_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS0_1_LCSSA]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ], [ [[VECINS68_LCSSA]], [[FOR_COND_CLEANUP66_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD100]] = add nsw i32 [[H_0451]], 30
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[ADD100]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], !llvm.loop !3
; CHECK:       for.body67:
; CHECK-NEXT:    [[W_0390:%.*]] = phi i32 [ [[ADD98:%.*]], [[FOR_BODY67]] ], [ [[MUL]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS0_1389:%.*]] = phi <5 x i32> [ [[VECINS68]], [[FOR_BODY67]] ], [ [[VECINS]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS1_1388:%.*]] = phi <5 x i32> [ [[VECINS69]], [[FOR_BODY67]] ], [ [[VECINS7]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS2_1387:%.*]] = phi <5 x i32> [ [[VECINS70]], [[FOR_BODY67]] ], [ [[VECINS9]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS3_1386:%.*]] = phi <5 x i32> [ [[VECINS71]], [[FOR_BODY67]] ], [ [[VECINS11]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS4_1385:%.*]] = phi <5 x i32> [ [[VECINS72]], [[FOR_BODY67]] ], [ [[VECINS13]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS5_1384:%.*]] = phi <5 x i32> [ [[VECINS73]], [[FOR_BODY67]] ], [ [[VECINS15]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS6_1383:%.*]] = phi <5 x i32> [ [[VECINS74]], [[FOR_BODY67]] ], [ [[VECINS17]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS7_1382:%.*]] = phi <5 x i32> [ [[VECINS75]], [[FOR_BODY67]] ], [ [[VECINS19]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS8_1381:%.*]] = phi <5 x i32> [ [[VECINS76]], [[FOR_BODY67]] ], [ [[VECINS21]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS9_1380:%.*]] = phi <5 x i32> [ [[VECINS77]], [[FOR_BODY67]] ], [ [[VECINS23]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS10_1379:%.*]] = phi <5 x i32> [ [[VECINS78]], [[FOR_BODY67]] ], [ [[VECINS25]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS11_1378:%.*]] = phi <5 x i32> [ [[VECINS79]], [[FOR_BODY67]] ], [ [[VECINS27]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS12_1377:%.*]] = phi <5 x i32> [ [[VECINS80]], [[FOR_BODY67]] ], [ [[VECINS29]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS13_1376:%.*]] = phi <5 x i32> [ [[VECINS81]], [[FOR_BODY67]] ], [ [[VECINS31]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS14_1375:%.*]] = phi <5 x i32> [ [[VECINS82]], [[FOR_BODY67]] ], [ [[VECINS33]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS15_1374:%.*]] = phi <5 x i32> [ [[VECINS83]], [[FOR_BODY67]] ], [ [[VECINS35]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS16_1373:%.*]] = phi <5 x i32> [ [[VECINS84]], [[FOR_BODY67]] ], [ [[VECINS37]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS17_1372:%.*]] = phi <5 x i32> [ [[VECINS85]], [[FOR_BODY67]] ], [ [[VECINS39]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS18_1371:%.*]] = phi <5 x i32> [ [[VECINS86]], [[FOR_BODY67]] ], [ [[VECINS41]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS19_1370:%.*]] = phi <5 x i32> [ [[VECINS87]], [[FOR_BODY67]] ], [ [[VECINS43]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS20_1369:%.*]] = phi <5 x i32> [ [[VECINS88]], [[FOR_BODY67]] ], [ [[VECINS45]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS21_1368:%.*]] = phi <5 x i32> [ [[VECINS89]], [[FOR_BODY67]] ], [ [[VECINS47]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS22_1367:%.*]] = phi <5 x i32> [ [[VECINS90]], [[FOR_BODY67]] ], [ [[VECINS49]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS23_1366:%.*]] = phi <5 x i32> [ [[VECINS91]], [[FOR_BODY67]] ], [ [[VECINS51]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS24_1365:%.*]] = phi <5 x i32> [ [[VECINS92]], [[FOR_BODY67]] ], [ [[VECINS53]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS25_1364:%.*]] = phi <5 x i32> [ [[VECINS93]], [[FOR_BODY67]] ], [ [[VECINS55]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS26_1363:%.*]] = phi <5 x i32> [ [[VECINS94]], [[FOR_BODY67]] ], [ [[VECINS57]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS27_1362:%.*]] = phi <5 x i32> [ [[VECINS95]], [[FOR_BODY67]] ], [ [[VECINS59]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS28_1361:%.*]] = phi <5 x i32> [ [[VECINS96]], [[FOR_BODY67]] ], [ [[VECINS61]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS29_1360:%.*]] = phi <5 x i32> [ [[VECINS97]], [[FOR_BODY67]] ], [ [[VECINS63]], [[FOR_BODY67_PREHEADER]] ]
; CHECK-NEXT:    [[VECINS68]] = insertelement <5 x i32> [[IFMCOORDS0_1389]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS69]] = insertelement <5 x i32> [[IFMCOORDS1_1388]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS70]] = insertelement <5 x i32> [[IFMCOORDS2_1387]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS71]] = insertelement <5 x i32> [[IFMCOORDS3_1386]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS72]] = insertelement <5 x i32> [[IFMCOORDS4_1385]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS73]] = insertelement <5 x i32> [[IFMCOORDS5_1384]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS74]] = insertelement <5 x i32> [[IFMCOORDS6_1383]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS75]] = insertelement <5 x i32> [[IFMCOORDS7_1382]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS76]] = insertelement <5 x i32> [[IFMCOORDS8_1381]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS77]] = insertelement <5 x i32> [[IFMCOORDS9_1380]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS78]] = insertelement <5 x i32> [[IFMCOORDS10_1379]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS79]] = insertelement <5 x i32> [[IFMCOORDS11_1378]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS80]] = insertelement <5 x i32> [[IFMCOORDS12_1377]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS81]] = insertelement <5 x i32> [[IFMCOORDS13_1376]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS82]] = insertelement <5 x i32> [[IFMCOORDS14_1375]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS83]] = insertelement <5 x i32> [[IFMCOORDS15_1374]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS84]] = insertelement <5 x i32> [[IFMCOORDS16_1373]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS85]] = insertelement <5 x i32> [[IFMCOORDS17_1372]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS86]] = insertelement <5 x i32> [[IFMCOORDS18_1371]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS87]] = insertelement <5 x i32> [[IFMCOORDS19_1370]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS88]] = insertelement <5 x i32> [[IFMCOORDS20_1369]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS89]] = insertelement <5 x i32> [[IFMCOORDS21_1368]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS90]] = insertelement <5 x i32> [[IFMCOORDS22_1367]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS91]] = insertelement <5 x i32> [[IFMCOORDS23_1366]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS92]] = insertelement <5 x i32> [[IFMCOORDS24_1365]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS93]] = insertelement <5 x i32> [[IFMCOORDS25_1364]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS94]] = insertelement <5 x i32> [[IFMCOORDS26_1363]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS95]] = insertelement <5 x i32> [[IFMCOORDS27_1362]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS96]] = insertelement <5 x i32> [[IFMCOORDS28_1361]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[VECINS97]] = insertelement <5 x i32> [[IFMCOORDS29_1360]], i32 [[W_0390]], i32 3
; CHECK-NEXT:    [[TMP2:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS68]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP3:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS69]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP4:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS70]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP5:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS71]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS72]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS73]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP8:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS74]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP9:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS75]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP10:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS76]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP11:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS77]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP12:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS78]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP13:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS79]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP14:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS80]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP15:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS81]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP16:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS82]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS83]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS84]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP19:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS85]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS86]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS87]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS88]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP23:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS89]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP24:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS90]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP25:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS91]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP26:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS92]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP27:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS93]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP28:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS94]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP29:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS95]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP30:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS96]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP31:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS97]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP32:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP2]])
; CHECK-NEXT:    [[TMP33:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP3]])
; CHECK-NEXT:    [[TMP34:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP4]])
; CHECK-NEXT:    [[TMP35:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP5]])
; CHECK-NEXT:    [[TMP36:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP6]])
; CHECK-NEXT:    [[TMP37:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP7]])
; CHECK-NEXT:    [[TMP38:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP8]])
; CHECK-NEXT:    [[TMP39:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP9]])
; CHECK-NEXT:    [[TMP40:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP10]])
; CHECK-NEXT:    [[TMP41:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP11]])
; CHECK-NEXT:    [[TMP42:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP12]])
; CHECK-NEXT:    [[TMP43:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP13]])
; CHECK-NEXT:    [[TMP44:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP14]])
; CHECK-NEXT:    [[TMP45:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP15]])
; CHECK-NEXT:    [[TMP46:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP16]])
; CHECK-NEXT:    [[TMP47:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP17]])
; CHECK-NEXT:    [[TMP48:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP18]])
; CHECK-NEXT:    [[TMP49:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP19]])
; CHECK-NEXT:    [[TMP50:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP20]])
; CHECK-NEXT:    [[TMP51:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP21]])
; CHECK-NEXT:    [[TMP52:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP22]])
; CHECK-NEXT:    [[TMP53:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP23]])
; CHECK-NEXT:    [[TMP54:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP24]])
; CHECK-NEXT:    [[TMP55:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP25]])
; CHECK-NEXT:    [[TMP56:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP26]])
; CHECK-NEXT:    [[TMP57:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP27]])
; CHECK-NEXT:    [[TMP58:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP28]])
; CHECK-NEXT:    [[TMP59:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP29]])
; CHECK-NEXT:    [[TMP60:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP30]])
; CHECK-NEXT:    [[TMP61:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP31]])
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS68]], i8 1, <64 x float> [[TMP32]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS69]], i8 1, <64 x float> [[TMP33]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS70]], i8 1, <64 x float> [[TMP34]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS71]], i8 1, <64 x float> [[TMP35]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS72]], i8 1, <64 x float> [[TMP36]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS73]], i8 1, <64 x float> [[TMP37]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS74]], i8 1, <64 x float> [[TMP38]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS75]], i8 1, <64 x float> [[TMP39]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS76]], i8 1, <64 x float> [[TMP40]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS77]], i8 1, <64 x float> [[TMP41]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS78]], i8 1, <64 x float> [[TMP42]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS79]], i8 1, <64 x float> [[TMP43]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS80]], i8 1, <64 x float> [[TMP44]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS81]], i8 1, <64 x float> [[TMP45]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS82]], i8 1, <64 x float> [[TMP46]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS83]], i8 1, <64 x float> [[TMP47]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS84]], i8 1, <64 x float> [[TMP48]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS85]], i8 1, <64 x float> [[TMP49]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS86]], i8 1, <64 x float> [[TMP50]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS87]], i8 1, <64 x float> [[TMP51]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS88]], i8 1, <64 x float> [[TMP52]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS89]], i8 1, <64 x float> [[TMP53]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS90]], i8 1, <64 x float> [[TMP54]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS91]], i8 1, <64 x float> [[TMP55]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS92]], i8 1, <64 x float> [[TMP56]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS93]], i8 1, <64 x float> [[TMP57]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS94]], i8 1, <64 x float> [[TMP58]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS95]], i8 1, <64 x float> [[TMP59]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS96]], i8 1, <64 x float> [[TMP60]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS97]], i8 1, <64 x float> [[TMP61]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[ADD98]] = add i32 [[W_0390]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[ADD98]], [[MUL2]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP66_LOOPEXIT]], label [[FOR_BODY67]], !llvm.loop !5
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 3
  %mul = shl nsw i32 %vecext, 2
  %vecext1 = extractelement <5 x i32> %add, i32 3
  %mul2 = shl i32 %vecext1, 2
  %vecext3 = extractelement <5 x i32> %0, i32 0
  %vecext4 = extractelement <5 x i32> %add, i32 0
  %cmp420 = icmp slt i32 %vecext3, %vecext4
  br i1 %cmp420, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp65359 = icmp slt i32 %mul, %mul2
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup66
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup66
  %h.0451 = phi i32 [ %vecext3, %for.body.lr.ph ], [ %add100, %for.cond.cleanup66 ]
  %ifmCoords0.0450 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords0.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords1.0449 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords1.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords2.0448 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords2.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords3.0447 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords3.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords4.0446 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords4.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords5.0445 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords5.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords6.0444 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords6.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords7.0443 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords7.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords8.0442 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords8.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords9.0441 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords9.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords10.0440 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords10.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords11.0439 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords11.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords12.0438 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords12.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords13.0437 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords13.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords14.0436 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords14.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords15.0435 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords15.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords16.0434 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords16.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords17.0433 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords17.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords18.0432 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords18.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords19.0431 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords19.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords20.0430 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords20.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords21.0429 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords21.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords22.0428 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords22.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords23.0427 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords23.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords24.0426 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords24.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords25.0425 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords25.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords26.0424 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords26.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords27.0423 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords27.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords28.0422 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords28.1.lcssa, %for.cond.cleanup66 ]
  %ifmCoords29.0421 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords29.1.lcssa, %for.cond.cleanup66 ]
  %vecins = insertelement <5 x i32> %ifmCoords0.0450, i32 %h.0451, i32 0
  %add6 = add nsw i32 %h.0451, 1
  %vecins7 = insertelement <5 x i32> %ifmCoords1.0449, i32 %add6, i32 0
  %add8 = add nsw i32 %h.0451, 2
  %vecins9 = insertelement <5 x i32> %ifmCoords2.0448, i32 %add8, i32 0
  %add10 = add nsw i32 %h.0451, 3
  %vecins11 = insertelement <5 x i32> %ifmCoords3.0447, i32 %add10, i32 0
  %add12 = add nsw i32 %h.0451, 4
  %vecins13 = insertelement <5 x i32> %ifmCoords4.0446, i32 %add12, i32 0
  %add14 = add nsw i32 %h.0451, 5
  %vecins15 = insertelement <5 x i32> %ifmCoords5.0445, i32 %add14, i32 0
  %add16 = add nsw i32 %h.0451, 6
  %vecins17 = insertelement <5 x i32> %ifmCoords6.0444, i32 %add16, i32 0
  %add18 = add nsw i32 %h.0451, 7
  %vecins19 = insertelement <5 x i32> %ifmCoords7.0443, i32 %add18, i32 0
  %add20 = add nsw i32 %h.0451, 8
  %vecins21 = insertelement <5 x i32> %ifmCoords8.0442, i32 %add20, i32 0
  %add22 = add nsw i32 %h.0451, 9
  %vecins23 = insertelement <5 x i32> %ifmCoords9.0441, i32 %add22, i32 0
  %add24 = add nsw i32 %h.0451, 10
  %vecins25 = insertelement <5 x i32> %ifmCoords10.0440, i32 %add24, i32 0
  %add26 = add nsw i32 %h.0451, 11
  %vecins27 = insertelement <5 x i32> %ifmCoords11.0439, i32 %add26, i32 0
  %add28 = add nsw i32 %h.0451, 12
  %vecins29 = insertelement <5 x i32> %ifmCoords12.0438, i32 %add28, i32 0
  %add30 = add nsw i32 %h.0451, 13
  %vecins31 = insertelement <5 x i32> %ifmCoords13.0437, i32 %add30, i32 0
  %add32 = add nsw i32 %h.0451, 14
  %vecins33 = insertelement <5 x i32> %ifmCoords14.0436, i32 %add32, i32 0
  %add34 = add nsw i32 %h.0451, 15
  %vecins35 = insertelement <5 x i32> %ifmCoords15.0435, i32 %add34, i32 0
  %add36 = add nsw i32 %h.0451, 16
  %vecins37 = insertelement <5 x i32> %ifmCoords16.0434, i32 %add36, i32 0
  %add38 = add nsw i32 %h.0451, 17
  %vecins39 = insertelement <5 x i32> %ifmCoords17.0433, i32 %add38, i32 0
  %add40 = add nsw i32 %h.0451, 18
  %vecins41 = insertelement <5 x i32> %ifmCoords18.0432, i32 %add40, i32 0
  %add42 = add nsw i32 %h.0451, 19
  %vecins43 = insertelement <5 x i32> %ifmCoords19.0431, i32 %add42, i32 0
  %add44 = add nsw i32 %h.0451, 20
  %vecins45 = insertelement <5 x i32> %ifmCoords20.0430, i32 %add44, i32 0
  %add46 = add nsw i32 %h.0451, 21
  %vecins47 = insertelement <5 x i32> %ifmCoords21.0429, i32 %add46, i32 0
  %add48 = add nsw i32 %h.0451, 22
  %vecins49 = insertelement <5 x i32> %ifmCoords22.0428, i32 %add48, i32 0
  %add50 = add nsw i32 %h.0451, 23
  %vecins51 = insertelement <5 x i32> %ifmCoords23.0427, i32 %add50, i32 0
  %add52 = add nsw i32 %h.0451, 24
  %vecins53 = insertelement <5 x i32> %ifmCoords24.0426, i32 %add52, i32 0
  %add54 = add nsw i32 %h.0451, 25
  %vecins55 = insertelement <5 x i32> %ifmCoords25.0425, i32 %add54, i32 0
  %add56 = add nsw i32 %h.0451, 26
  %vecins57 = insertelement <5 x i32> %ifmCoords26.0424, i32 %add56, i32 0
  %add58 = add nsw i32 %h.0451, 27
  %vecins59 = insertelement <5 x i32> %ifmCoords27.0423, i32 %add58, i32 0
  %add60 = add nsw i32 %h.0451, 28
  %vecins61 = insertelement <5 x i32> %ifmCoords28.0422, i32 %add60, i32 0
  %add62 = add nsw i32 %h.0451, 29
  %vecins63 = insertelement <5 x i32> %ifmCoords29.0421, i32 %add62, i32 0
  br i1 %cmp65359, label %for.body67.preheader, label %for.cond.cleanup66

for.body67.preheader:                             ; preds = %for.body
  br label %for.body67

for.cond.cleanup66.loopexit:                      ; preds = %for.body67
  %vecins68.lcssa = phi <5 x i32> [ %vecins68, %for.body67 ]
  %vecins69.lcssa = phi <5 x i32> [ %vecins69, %for.body67 ]
  %vecins70.lcssa = phi <5 x i32> [ %vecins70, %for.body67 ]
  %vecins71.lcssa = phi <5 x i32> [ %vecins71, %for.body67 ]
  %vecins72.lcssa = phi <5 x i32> [ %vecins72, %for.body67 ]
  %vecins73.lcssa = phi <5 x i32> [ %vecins73, %for.body67 ]
  %vecins74.lcssa = phi <5 x i32> [ %vecins74, %for.body67 ]
  %vecins75.lcssa = phi <5 x i32> [ %vecins75, %for.body67 ]
  %vecins76.lcssa = phi <5 x i32> [ %vecins76, %for.body67 ]
  %vecins77.lcssa = phi <5 x i32> [ %vecins77, %for.body67 ]
  %vecins78.lcssa = phi <5 x i32> [ %vecins78, %for.body67 ]
  %vecins79.lcssa = phi <5 x i32> [ %vecins79, %for.body67 ]
  %vecins80.lcssa = phi <5 x i32> [ %vecins80, %for.body67 ]
  %vecins81.lcssa = phi <5 x i32> [ %vecins81, %for.body67 ]
  %vecins82.lcssa = phi <5 x i32> [ %vecins82, %for.body67 ]
  %vecins83.lcssa = phi <5 x i32> [ %vecins83, %for.body67 ]
  %vecins84.lcssa = phi <5 x i32> [ %vecins84, %for.body67 ]
  %vecins85.lcssa = phi <5 x i32> [ %vecins85, %for.body67 ]
  %vecins86.lcssa = phi <5 x i32> [ %vecins86, %for.body67 ]
  %vecins87.lcssa = phi <5 x i32> [ %vecins87, %for.body67 ]
  %vecins88.lcssa = phi <5 x i32> [ %vecins88, %for.body67 ]
  %vecins89.lcssa = phi <5 x i32> [ %vecins89, %for.body67 ]
  %vecins90.lcssa = phi <5 x i32> [ %vecins90, %for.body67 ]
  %vecins91.lcssa = phi <5 x i32> [ %vecins91, %for.body67 ]
  %vecins92.lcssa = phi <5 x i32> [ %vecins92, %for.body67 ]
  %vecins93.lcssa = phi <5 x i32> [ %vecins93, %for.body67 ]
  %vecins94.lcssa = phi <5 x i32> [ %vecins94, %for.body67 ]
  %vecins95.lcssa = phi <5 x i32> [ %vecins95, %for.body67 ]
  %vecins96.lcssa = phi <5 x i32> [ %vecins96, %for.body67 ]
  %vecins97.lcssa = phi <5 x i32> [ %vecins97, %for.body67 ]
  br label %for.cond.cleanup66

for.cond.cleanup66:                               ; preds = %for.cond.cleanup66.loopexit, %for.body
  %ifmCoords29.1.lcssa = phi <5 x i32> [ %vecins63, %for.body ], [ %vecins97.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords28.1.lcssa = phi <5 x i32> [ %vecins61, %for.body ], [ %vecins96.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords27.1.lcssa = phi <5 x i32> [ %vecins59, %for.body ], [ %vecins95.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords26.1.lcssa = phi <5 x i32> [ %vecins57, %for.body ], [ %vecins94.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords25.1.lcssa = phi <5 x i32> [ %vecins55, %for.body ], [ %vecins93.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords24.1.lcssa = phi <5 x i32> [ %vecins53, %for.body ], [ %vecins92.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords23.1.lcssa = phi <5 x i32> [ %vecins51, %for.body ], [ %vecins91.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords22.1.lcssa = phi <5 x i32> [ %vecins49, %for.body ], [ %vecins90.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords21.1.lcssa = phi <5 x i32> [ %vecins47, %for.body ], [ %vecins89.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords20.1.lcssa = phi <5 x i32> [ %vecins45, %for.body ], [ %vecins88.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords19.1.lcssa = phi <5 x i32> [ %vecins43, %for.body ], [ %vecins87.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords18.1.lcssa = phi <5 x i32> [ %vecins41, %for.body ], [ %vecins86.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords17.1.lcssa = phi <5 x i32> [ %vecins39, %for.body ], [ %vecins85.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords16.1.lcssa = phi <5 x i32> [ %vecins37, %for.body ], [ %vecins84.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords15.1.lcssa = phi <5 x i32> [ %vecins35, %for.body ], [ %vecins83.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords14.1.lcssa = phi <5 x i32> [ %vecins33, %for.body ], [ %vecins82.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords13.1.lcssa = phi <5 x i32> [ %vecins31, %for.body ], [ %vecins81.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords12.1.lcssa = phi <5 x i32> [ %vecins29, %for.body ], [ %vecins80.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords11.1.lcssa = phi <5 x i32> [ %vecins27, %for.body ], [ %vecins79.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords10.1.lcssa = phi <5 x i32> [ %vecins25, %for.body ], [ %vecins78.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords9.1.lcssa = phi <5 x i32> [ %vecins23, %for.body ], [ %vecins77.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords8.1.lcssa = phi <5 x i32> [ %vecins21, %for.body ], [ %vecins76.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords7.1.lcssa = phi <5 x i32> [ %vecins19, %for.body ], [ %vecins75.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords6.1.lcssa = phi <5 x i32> [ %vecins17, %for.body ], [ %vecins74.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords5.1.lcssa = phi <5 x i32> [ %vecins15, %for.body ], [ %vecins73.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords4.1.lcssa = phi <5 x i32> [ %vecins13, %for.body ], [ %vecins72.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords3.1.lcssa = phi <5 x i32> [ %vecins11, %for.body ], [ %vecins71.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords2.1.lcssa = phi <5 x i32> [ %vecins9, %for.body ], [ %vecins70.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords1.1.lcssa = phi <5 x i32> [ %vecins7, %for.body ], [ %vecins69.lcssa, %for.cond.cleanup66.loopexit ]
  %ifmCoords0.1.lcssa = phi <5 x i32> [ %vecins, %for.body ], [ %vecins68.lcssa, %for.cond.cleanup66.loopexit ]
  %add100 = add nsw i32 %h.0451, 30
  %cmp = icmp slt i32 %add100, %vecext4
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit, !llvm.loop !3

for.body67:                                       ; preds = %for.body67.preheader, %for.body67
  %w.0390 = phi i32 [ %add98, %for.body67 ], [ %mul, %for.body67.preheader ]
  %ifmCoords0.1389 = phi <5 x i32> [ %vecins68, %for.body67 ], [ %vecins, %for.body67.preheader ]
  %ifmCoords1.1388 = phi <5 x i32> [ %vecins69, %for.body67 ], [ %vecins7, %for.body67.preheader ]
  %ifmCoords2.1387 = phi <5 x i32> [ %vecins70, %for.body67 ], [ %vecins9, %for.body67.preheader ]
  %ifmCoords3.1386 = phi <5 x i32> [ %vecins71, %for.body67 ], [ %vecins11, %for.body67.preheader ]
  %ifmCoords4.1385 = phi <5 x i32> [ %vecins72, %for.body67 ], [ %vecins13, %for.body67.preheader ]
  %ifmCoords5.1384 = phi <5 x i32> [ %vecins73, %for.body67 ], [ %vecins15, %for.body67.preheader ]
  %ifmCoords6.1383 = phi <5 x i32> [ %vecins74, %for.body67 ], [ %vecins17, %for.body67.preheader ]
  %ifmCoords7.1382 = phi <5 x i32> [ %vecins75, %for.body67 ], [ %vecins19, %for.body67.preheader ]
  %ifmCoords8.1381 = phi <5 x i32> [ %vecins76, %for.body67 ], [ %vecins21, %for.body67.preheader ]
  %ifmCoords9.1380 = phi <5 x i32> [ %vecins77, %for.body67 ], [ %vecins23, %for.body67.preheader ]
  %ifmCoords10.1379 = phi <5 x i32> [ %vecins78, %for.body67 ], [ %vecins25, %for.body67.preheader ]
  %ifmCoords11.1378 = phi <5 x i32> [ %vecins79, %for.body67 ], [ %vecins27, %for.body67.preheader ]
  %ifmCoords12.1377 = phi <5 x i32> [ %vecins80, %for.body67 ], [ %vecins29, %for.body67.preheader ]
  %ifmCoords13.1376 = phi <5 x i32> [ %vecins81, %for.body67 ], [ %vecins31, %for.body67.preheader ]
  %ifmCoords14.1375 = phi <5 x i32> [ %vecins82, %for.body67 ], [ %vecins33, %for.body67.preheader ]
  %ifmCoords15.1374 = phi <5 x i32> [ %vecins83, %for.body67 ], [ %vecins35, %for.body67.preheader ]
  %ifmCoords16.1373 = phi <5 x i32> [ %vecins84, %for.body67 ], [ %vecins37, %for.body67.preheader ]
  %ifmCoords17.1372 = phi <5 x i32> [ %vecins85, %for.body67 ], [ %vecins39, %for.body67.preheader ]
  %ifmCoords18.1371 = phi <5 x i32> [ %vecins86, %for.body67 ], [ %vecins41, %for.body67.preheader ]
  %ifmCoords19.1370 = phi <5 x i32> [ %vecins87, %for.body67 ], [ %vecins43, %for.body67.preheader ]
  %ifmCoords20.1369 = phi <5 x i32> [ %vecins88, %for.body67 ], [ %vecins45, %for.body67.preheader ]
  %ifmCoords21.1368 = phi <5 x i32> [ %vecins89, %for.body67 ], [ %vecins47, %for.body67.preheader ]
  %ifmCoords22.1367 = phi <5 x i32> [ %vecins90, %for.body67 ], [ %vecins49, %for.body67.preheader ]
  %ifmCoords23.1366 = phi <5 x i32> [ %vecins91, %for.body67 ], [ %vecins51, %for.body67.preheader ]
  %ifmCoords24.1365 = phi <5 x i32> [ %vecins92, %for.body67 ], [ %vecins53, %for.body67.preheader ]
  %ifmCoords25.1364 = phi <5 x i32> [ %vecins93, %for.body67 ], [ %vecins55, %for.body67.preheader ]
  %ifmCoords26.1363 = phi <5 x i32> [ %vecins94, %for.body67 ], [ %vecins57, %for.body67.preheader ]
  %ifmCoords27.1362 = phi <5 x i32> [ %vecins95, %for.body67 ], [ %vecins59, %for.body67.preheader ]
  %ifmCoords28.1361 = phi <5 x i32> [ %vecins96, %for.body67 ], [ %vecins61, %for.body67.preheader ]
  %ifmCoords29.1360 = phi <5 x i32> [ %vecins97, %for.body67 ], [ %vecins63, %for.body67.preheader ]
  %vecins68 = insertelement <5 x i32> %ifmCoords0.1389, i32 %w.0390, i32 3
  %vecins69 = insertelement <5 x i32> %ifmCoords1.1388, i32 %w.0390, i32 3
  %vecins70 = insertelement <5 x i32> %ifmCoords2.1387, i32 %w.0390, i32 3
  %vecins71 = insertelement <5 x i32> %ifmCoords3.1386, i32 %w.0390, i32 3
  %vecins72 = insertelement <5 x i32> %ifmCoords4.1385, i32 %w.0390, i32 3
  %vecins73 = insertelement <5 x i32> %ifmCoords5.1384, i32 %w.0390, i32 3
  %vecins74 = insertelement <5 x i32> %ifmCoords6.1383, i32 %w.0390, i32 3
  %vecins75 = insertelement <5 x i32> %ifmCoords7.1382, i32 %w.0390, i32 3
  %vecins76 = insertelement <5 x i32> %ifmCoords8.1381, i32 %w.0390, i32 3
  %vecins77 = insertelement <5 x i32> %ifmCoords9.1380, i32 %w.0390, i32 3
  %vecins78 = insertelement <5 x i32> %ifmCoords10.1379, i32 %w.0390, i32 3
  %vecins79 = insertelement <5 x i32> %ifmCoords11.1378, i32 %w.0390, i32 3
  %vecins80 = insertelement <5 x i32> %ifmCoords12.1377, i32 %w.0390, i32 3
  %vecins81 = insertelement <5 x i32> %ifmCoords13.1376, i32 %w.0390, i32 3
  %vecins82 = insertelement <5 x i32> %ifmCoords14.1375, i32 %w.0390, i32 3
  %vecins83 = insertelement <5 x i32> %ifmCoords15.1374, i32 %w.0390, i32 3
  %vecins84 = insertelement <5 x i32> %ifmCoords16.1373, i32 %w.0390, i32 3
  %vecins85 = insertelement <5 x i32> %ifmCoords17.1372, i32 %w.0390, i32 3
  %vecins86 = insertelement <5 x i32> %ifmCoords18.1371, i32 %w.0390, i32 3
  %vecins87 = insertelement <5 x i32> %ifmCoords19.1370, i32 %w.0390, i32 3
  %vecins88 = insertelement <5 x i32> %ifmCoords20.1369, i32 %w.0390, i32 3
  %vecins89 = insertelement <5 x i32> %ifmCoords21.1368, i32 %w.0390, i32 3
  %vecins90 = insertelement <5 x i32> %ifmCoords22.1367, i32 %w.0390, i32 3
  %vecins91 = insertelement <5 x i32> %ifmCoords23.1366, i32 %w.0390, i32 3
  %vecins92 = insertelement <5 x i32> %ifmCoords24.1365, i32 %w.0390, i32 3
  %vecins93 = insertelement <5 x i32> %ifmCoords25.1364, i32 %w.0390, i32 3
  %vecins94 = insertelement <5 x i32> %ifmCoords26.1363, i32 %w.0390, i32 3
  %vecins95 = insertelement <5 x i32> %ifmCoords27.1362, i32 %w.0390, i32 3
  %vecins96 = insertelement <5 x i32> %ifmCoords28.1361, i32 %w.0390, i32 3
  %vecins97 = insertelement <5 x i32> %ifmCoords29.1360, i32 %w.0390, i32 3
  %2 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins68, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %3 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins69, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %4 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins70, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %5 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins71, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %6 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins72, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %7 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins73, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %8 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins74, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %9 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins75, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %10 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins76, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %11 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins77, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %12 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins78, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %13 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins79, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %14 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins80, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %15 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins81, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %16 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins82, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %17 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins83, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %18 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins84, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %19 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins85, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %20 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins86, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %21 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins87, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %22 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins88, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %23 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins89, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %24 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins90, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %25 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins91, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %26 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins92, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %27 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins93, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %28 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins94, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %29 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins95, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %30 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins96, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %31 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins97, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %32 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %2)
  %33 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %3)
  %34 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %4)
  %35 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %5)
  %36 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %6)
  %37 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %7)
  %38 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %8)
  %39 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %9)
  %40 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %10)
  %41 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %11)
  %42 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %12)
  %43 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %13)
  %44 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %14)
  %45 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %15)
  %46 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %16)
  %47 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %17)
  %48 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %18)
  %49 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %19)
  %50 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %20)
  %51 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %21)
  %52 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %22)
  %53 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %23)
  %54 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %24)
  %55 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %25)
  %56 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %26)
  %57 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %27)
  %58 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %28)
  %59 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %29)
  %60 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %30)
  %61 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %31)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins68, i8 1, <64 x float> %32, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins69, i8 1, <64 x float> %33, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins70, i8 1, <64 x float> %34, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins71, i8 1, <64 x float> %35, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins72, i8 1, <64 x float> %36, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins73, i8 1, <64 x float> %37, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins74, i8 1, <64 x float> %38, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins75, i8 1, <64 x float> %39, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins76, i8 1, <64 x float> %40, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins77, i8 1, <64 x float> %41, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins78, i8 1, <64 x float> %42, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins79, i8 1, <64 x float> %43, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins80, i8 1, <64 x float> %44, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins81, i8 1, <64 x float> %45, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins82, i8 1, <64 x float> %46, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins83, i8 1, <64 x float> %47, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins84, i8 1, <64 x float> %48, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins85, i8 1, <64 x float> %49, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins86, i8 1, <64 x float> %50, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins87, i8 1, <64 x float> %51, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins88, i8 1, <64 x float> %52, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins89, i8 1, <64 x float> %53, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins90, i8 1, <64 x float> %54, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins91, i8 1, <64 x float> %55, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins92, i8 1, <64 x float> %56, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins93, i8 1, <64 x float> %57, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins94, i8 1, <64 x float> %58, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins95, i8 1, <64 x float> %59, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins96, i8 1, <64 x float> %60, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins97, i8 1, <64 x float> %61, i32 0, i1 true, i1 false)
  %add98 = add i32 %w.0390, 1
  %exitcond = icmp eq i32 %add98, %mul2
  br i1 %exitcond, label %for.cond.cleanup66.loopexit, label %for.body67, !llvm.loop !5
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare <64 x float> @llvm.fabs.v64f32(<64 x float>) #3

attributes #0 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya2" "target-features"="+goya2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 37f6b84c5ee8bcfb48af5c8de6a680ad5a709a1d)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.taken", i1 true}
!5 = distinct !{!5, !4}
