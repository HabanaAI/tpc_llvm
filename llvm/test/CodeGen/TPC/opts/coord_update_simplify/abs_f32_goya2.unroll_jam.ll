; XFAIL: *
; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -march=tpc -mcpu=goya2 -coord-simplify -coord-update-simplify=true -S | FileCheck %s

target datalayout = "e-p0:32:32:32-p1:32:32:32-p2:32:32:32-p3:64:64:64-i32:32:32-n8:16:32-f16:16:16-f32:32:32-v160:32:32-v256:2048:2048-v2048:2048:2048-v4096:2048:2048-v8192:2048:2048"
target triple = "tpc"

; Function Attrs: nounwind writeonly
define dso_local void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 3
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[VECEXT]], 2
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 3
; CHECK-NEXT:    [[MUL2:%.*]] = shl i32 [[VECEXT1]], 2
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 0
; CHECK-NEXT:    [[VECEXT4:%.*]] = extractelement <5 x i32> [[ADD]], i32 0
; CHECK-NEXT:    [[CMP134:%.*]] = icmp slt i32 [[VECEXT3]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP134]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP21117:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[H_0143:%.*]] = phi i32 [ [[VECEXT3]], [[FOR_BODY_LR_PH]] ], [ [[ADD34:%.*]], [[FOR_COND_CLEANUP22:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS0_0142:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS0_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[IFMCOORDS1_0141:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS1_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[IFMCOORDS2_0140:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS2_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[IFMCOORDS3_0139:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS3_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[IFMCOORDS4_0138:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS4_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[IFMCOORDS5_0137:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS5_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[IFMCOORDS6_0136:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS6_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[IFMCOORDS7_0135:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS7_1_LCSSA:%.*]], [[FOR_COND_CLEANUP22]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[IFMCOORDS0_0142]], i32 [[H_0143]], i32 0
; CHECK-NEXT:    [[ADD6:%.*]] = add nsw i32 [[H_0143]], 1
; CHECK-NEXT:    [[VECINS7:%.*]] = insertelement <5 x i32> [[IFMCOORDS1_0141]], i32 [[ADD6]], i32 0
; CHECK-NEXT:    [[ADD8:%.*]] = add nsw i32 [[H_0143]], 2
; CHECK-NEXT:    [[VECINS9:%.*]] = insertelement <5 x i32> [[IFMCOORDS2_0140]], i32 [[ADD8]], i32 0
; CHECK-NEXT:    [[ADD10:%.*]] = add nsw i32 [[H_0143]], 3
; CHECK-NEXT:    [[VECINS11:%.*]] = insertelement <5 x i32> [[IFMCOORDS3_0139]], i32 [[ADD10]], i32 0
; CHECK-NEXT:    [[ADD12:%.*]] = add nsw i32 [[H_0143]], 4
; CHECK-NEXT:    [[VECINS13:%.*]] = insertelement <5 x i32> [[IFMCOORDS4_0138]], i32 [[ADD12]], i32 0
; CHECK-NEXT:    [[ADD14:%.*]] = add nsw i32 [[H_0143]], 5
; CHECK-NEXT:    [[VECINS15:%.*]] = insertelement <5 x i32> [[IFMCOORDS5_0137]], i32 [[ADD14]], i32 0
; CHECK-NEXT:    [[ADD16:%.*]] = add nsw i32 [[H_0143]], 6
; CHECK-NEXT:    [[VECINS17:%.*]] = insertelement <5 x i32> [[IFMCOORDS6_0136]], i32 [[ADD16]], i32 0
; CHECK-NEXT:    [[ADD18:%.*]] = add nsw i32 [[H_0143]], 7
; CHECK-NEXT:    [[VECINS19:%.*]] = insertelement <5 x i32> [[IFMCOORDS7_0135]], i32 [[ADD18]], i32 0
; CHECK-NEXT:    br i1 [[CMP21117]], label [[FOR_BODY23_PREHEADER:%.*]], label [[FOR_COND_CLEANUP22]]
; CHECK:       for.body23.preheader:
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <5 x i32> [[VECINS19]], i32 [[MUL]], i32 3
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <5 x i32> [[VECINS17]], i32 [[MUL]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <5 x i32> [[VECINS7]], i32 [[MUL]], i32 3
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <5 x i32> [[VECINS]], i32 [[MUL]], i32 3
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <5 x i32> [[VECINS9]], i32 [[MUL]], i32 3
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <5 x i32> [[VECINS11]], i32 [[MUL]], i32 3
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <5 x i32> [[VECINS13]], i32 [[MUL]], i32 3
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <5 x i32> [[VECINS15]], i32 [[MUL]], i32 3
; CHECK-NEXT:    br label [[FOR_BODY23:%.*]]
; CHECK:       for.cond.cleanup22.loopexit:
; CHECK-NEXT:    [[VECINS24_LCSSA:%.*]] = phi <5 x i32> [ [[TMP34:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[VECINS25_LCSSA:%.*]] = phi <5 x i32> [ [[TMP35:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[VECINS26_LCSSA:%.*]] = phi <5 x i32> [ [[TMP36:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[VECINS27_LCSSA:%.*]] = phi <5 x i32> [ [[TMP37:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[VECINS28_LCSSA:%.*]] = phi <5 x i32> [ [[TMP38:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[VECINS29_LCSSA:%.*]] = phi <5 x i32> [ [[TMP39:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[VECINS30_LCSSA:%.*]] = phi <5 x i32> [ [[TMP40:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[VECINS31_LCSSA:%.*]] = phi <5 x i32> [ [[TMP41:%.*]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS31_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS31_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP11:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS30_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS30_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP12:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS25_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS25_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP13:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS24_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS24_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP14:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS26_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS26_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP15:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS27_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS27_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP16:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS28_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS28_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS29_LCSSA]], i32 -1, i32 8, i8 2, i32 0, <5 x i32> [[VECINS29_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP22]]
; CHECK:       for.cond.cleanup22:
; CHECK-NEXT:    [[IFMCOORDS7_1_LCSSA]] = phi <5 x i32> [ [[VECINS19]], [[FOR_BODY]] ], [ [[TMP10]], [[FOR_COND_CLEANUP22_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS6_1_LCSSA]] = phi <5 x i32> [ [[VECINS17]], [[FOR_BODY]] ], [ [[TMP11]], [[FOR_COND_CLEANUP22_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS5_1_LCSSA]] = phi <5 x i32> [ [[VECINS15]], [[FOR_BODY]] ], [ [[TMP17]], [[FOR_COND_CLEANUP22_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS4_1_LCSSA]] = phi <5 x i32> [ [[VECINS13]], [[FOR_BODY]] ], [ [[TMP16]], [[FOR_COND_CLEANUP22_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS3_1_LCSSA]] = phi <5 x i32> [ [[VECINS11]], [[FOR_BODY]] ], [ [[TMP15]], [[FOR_COND_CLEANUP22_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS2_1_LCSSA]] = phi <5 x i32> [ [[VECINS9]], [[FOR_BODY]] ], [ [[TMP14]], [[FOR_COND_CLEANUP22_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS1_1_LCSSA]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY]] ], [ [[TMP12]], [[FOR_COND_CLEANUP22_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS0_1_LCSSA]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ], [ [[TMP13]], [[FOR_COND_CLEANUP22_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD34]] = add nsw i32 [[H_0143]], 8
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[ADD34]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], !llvm.loop !3
; CHECK:       for.body23:
; CHECK-NEXT:    [[W_0126:%.*]] = phi i32 [ [[ADD32:%.*]], [[FOR_BODY23]] ], [ [[MUL]], [[FOR_BODY23_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS0_1125:%.*]] = phi <5 x i32> [ [[TMP5]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP34]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[IFMCOORDS1_1124:%.*]] = phi <5 x i32> [ [[TMP4]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP35]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[IFMCOORDS2_1123:%.*]] = phi <5 x i32> [ [[TMP6]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP36]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[IFMCOORDS3_1122:%.*]] = phi <5 x i32> [ [[TMP7]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP37]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[IFMCOORDS4_1121:%.*]] = phi <5 x i32> [ [[TMP8]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP38]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[IFMCOORDS5_1120:%.*]] = phi <5 x i32> [ [[TMP9]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP39]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[IFMCOORDS6_1119:%.*]] = phi <5 x i32> [ [[TMP3]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP40]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[IFMCOORDS7_1118:%.*]] = phi <5 x i32> [ [[TMP2]], [[FOR_BODY23_PREHEADER]] ], [ [[TMP41]], [[FOR_BODY23]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS0_1125]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP19:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS1_1124]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS2_1123]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS3_1122]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS4_1121]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP23:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS5_1120]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP24:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS6_1119]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP25:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS7_1118]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP26:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP18]])
; CHECK-NEXT:    [[TMP27:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP19]])
; CHECK-NEXT:    [[TMP28:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP20]])
; CHECK-NEXT:    [[TMP29:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP21]])
; CHECK-NEXT:    [[TMP30:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP22]])
; CHECK-NEXT:    [[TMP31:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP23]])
; CHECK-NEXT:    [[TMP32:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP24]])
; CHECK-NEXT:    [[TMP33:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP25]])
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS0_1125]], i8 1, <64 x float> [[TMP26]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP34]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS0_1125]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS0_1125]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS1_1124]], i8 1, <64 x float> [[TMP27]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP35]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS1_1124]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS1_1124]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS2_1123]], i8 1, <64 x float> [[TMP28]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP36]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS2_1123]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS2_1123]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS3_1122]], i8 1, <64 x float> [[TMP29]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP37]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS3_1122]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS3_1122]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS4_1121]], i8 1, <64 x float> [[TMP30]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP38]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS4_1121]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS4_1121]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS5_1120]], i8 1, <64 x float> [[TMP31]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP39]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS5_1120]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS5_1120]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS6_1119]], i8 1, <64 x float> [[TMP32]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP40]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS6_1119]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS6_1119]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[IFMCOORDS7_1118]], i8 1, <64 x float> [[TMP33]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP41]] = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS7_1118]], i32 1, i32 8, i8 2, i32 0, <5 x i32> [[IFMCOORDS7_1118]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD32]] = add i32 [[W_0126]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[ADD32]], [[MUL2]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP22_LOOPEXIT]], label [[FOR_BODY23]], !llvm.loop !5
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 3
  %mul = shl nsw i32 %vecext, 2
  %vecext1 = extractelement <5 x i32> %add, i32 3
  %mul2 = shl i32 %vecext1, 2
  %vecext3 = extractelement <5 x i32> %0, i32 0
  %vecext4 = extractelement <5 x i32> %add, i32 0
  %cmp134 = icmp slt i32 %vecext3, %vecext4
  br i1 %cmp134, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp21117 = icmp slt i32 %mul, %mul2
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup22
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup22
  %h.0143 = phi i32 [ %vecext3, %for.body.lr.ph ], [ %add34, %for.cond.cleanup22 ]
  %ifmCoords0.0142 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords0.1.lcssa, %for.cond.cleanup22 ]
  %ifmCoords1.0141 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords1.1.lcssa, %for.cond.cleanup22 ]
  %ifmCoords2.0140 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords2.1.lcssa, %for.cond.cleanup22 ]
  %ifmCoords3.0139 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords3.1.lcssa, %for.cond.cleanup22 ]
  %ifmCoords4.0138 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords4.1.lcssa, %for.cond.cleanup22 ]
  %ifmCoords5.0137 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords5.1.lcssa, %for.cond.cleanup22 ]
  %ifmCoords6.0136 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords6.1.lcssa, %for.cond.cleanup22 ]
  %ifmCoords7.0135 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords7.1.lcssa, %for.cond.cleanup22 ]
  %vecins = insertelement <5 x i32> %ifmCoords0.0142, i32 %h.0143, i32 0
  %add6 = add nsw i32 %h.0143, 1
  %vecins7 = insertelement <5 x i32> %ifmCoords1.0141, i32 %add6, i32 0
  %add8 = add nsw i32 %h.0143, 2
  %vecins9 = insertelement <5 x i32> %ifmCoords2.0140, i32 %add8, i32 0
  %add10 = add nsw i32 %h.0143, 3
  %vecins11 = insertelement <5 x i32> %ifmCoords3.0139, i32 %add10, i32 0
  %add12 = add nsw i32 %h.0143, 4
  %vecins13 = insertelement <5 x i32> %ifmCoords4.0138, i32 %add12, i32 0
  %add14 = add nsw i32 %h.0143, 5
  %vecins15 = insertelement <5 x i32> %ifmCoords5.0137, i32 %add14, i32 0
  %add16 = add nsw i32 %h.0143, 6
  %vecins17 = insertelement <5 x i32> %ifmCoords6.0136, i32 %add16, i32 0
  %add18 = add nsw i32 %h.0143, 7
  %vecins19 = insertelement <5 x i32> %ifmCoords7.0135, i32 %add18, i32 0
  br i1 %cmp21117, label %for.body23.preheader, label %for.cond.cleanup22

for.body23.preheader:                             ; preds = %for.body
  br label %for.body23

for.cond.cleanup22.loopexit:                      ; preds = %for.body23
  %vecins24.lcssa = phi <5 x i32> [ %vecins24, %for.body23 ]
  %vecins25.lcssa = phi <5 x i32> [ %vecins25, %for.body23 ]
  %vecins26.lcssa = phi <5 x i32> [ %vecins26, %for.body23 ]
  %vecins27.lcssa = phi <5 x i32> [ %vecins27, %for.body23 ]
  %vecins28.lcssa = phi <5 x i32> [ %vecins28, %for.body23 ]
  %vecins29.lcssa = phi <5 x i32> [ %vecins29, %for.body23 ]
  %vecins30.lcssa = phi <5 x i32> [ %vecins30, %for.body23 ]
  %vecins31.lcssa = phi <5 x i32> [ %vecins31, %for.body23 ]
  br label %for.cond.cleanup22

for.cond.cleanup22:                               ; preds = %for.cond.cleanup22.loopexit, %for.body
  %ifmCoords7.1.lcssa = phi <5 x i32> [ %vecins19, %for.body ], [ %vecins31.lcssa, %for.cond.cleanup22.loopexit ]
  %ifmCoords6.1.lcssa = phi <5 x i32> [ %vecins17, %for.body ], [ %vecins30.lcssa, %for.cond.cleanup22.loopexit ]
  %ifmCoords5.1.lcssa = phi <5 x i32> [ %vecins15, %for.body ], [ %vecins29.lcssa, %for.cond.cleanup22.loopexit ]
  %ifmCoords4.1.lcssa = phi <5 x i32> [ %vecins13, %for.body ], [ %vecins28.lcssa, %for.cond.cleanup22.loopexit ]
  %ifmCoords3.1.lcssa = phi <5 x i32> [ %vecins11, %for.body ], [ %vecins27.lcssa, %for.cond.cleanup22.loopexit ]
  %ifmCoords2.1.lcssa = phi <5 x i32> [ %vecins9, %for.body ], [ %vecins26.lcssa, %for.cond.cleanup22.loopexit ]
  %ifmCoords1.1.lcssa = phi <5 x i32> [ %vecins7, %for.body ], [ %vecins25.lcssa, %for.cond.cleanup22.loopexit ]
  %ifmCoords0.1.lcssa = phi <5 x i32> [ %vecins, %for.body ], [ %vecins24.lcssa, %for.cond.cleanup22.loopexit ]
  %add34 = add nsw i32 %h.0143, 8
  %cmp = icmp slt i32 %add34, %vecext4
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit, !llvm.loop !3

for.body23:                                       ; preds = %for.body23.preheader, %for.body23
  %w.0126 = phi i32 [ %add32, %for.body23 ], [ %mul, %for.body23.preheader ]
  %ifmCoords0.1125 = phi <5 x i32> [ %vecins24, %for.body23 ], [ %vecins, %for.body23.preheader ]
  %ifmCoords1.1124 = phi <5 x i32> [ %vecins25, %for.body23 ], [ %vecins7, %for.body23.preheader ]
  %ifmCoords2.1123 = phi <5 x i32> [ %vecins26, %for.body23 ], [ %vecins9, %for.body23.preheader ]
  %ifmCoords3.1122 = phi <5 x i32> [ %vecins27, %for.body23 ], [ %vecins11, %for.body23.preheader ]
  %ifmCoords4.1121 = phi <5 x i32> [ %vecins28, %for.body23 ], [ %vecins13, %for.body23.preheader ]
  %ifmCoords5.1120 = phi <5 x i32> [ %vecins29, %for.body23 ], [ %vecins15, %for.body23.preheader ]
  %ifmCoords6.1119 = phi <5 x i32> [ %vecins30, %for.body23 ], [ %vecins17, %for.body23.preheader ]
  %ifmCoords7.1118 = phi <5 x i32> [ %vecins31, %for.body23 ], [ %vecins19, %for.body23.preheader ]
  %vecins24 = insertelement <5 x i32> %ifmCoords0.1125, i32 %w.0126, i32 3
  %vecins25 = insertelement <5 x i32> %ifmCoords1.1124, i32 %w.0126, i32 3
  %vecins26 = insertelement <5 x i32> %ifmCoords2.1123, i32 %w.0126, i32 3
  %vecins27 = insertelement <5 x i32> %ifmCoords3.1122, i32 %w.0126, i32 3
  %vecins28 = insertelement <5 x i32> %ifmCoords4.1121, i32 %w.0126, i32 3
  %vecins29 = insertelement <5 x i32> %ifmCoords5.1120, i32 %w.0126, i32 3
  %vecins30 = insertelement <5 x i32> %ifmCoords6.1119, i32 %w.0126, i32 3
  %vecins31 = insertelement <5 x i32> %ifmCoords7.1118, i32 %w.0126, i32 3
  %2 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins24, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %3 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins25, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %4 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins26, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %5 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins27, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %6 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins28, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %7 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins29, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %8 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins30, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %9 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins31, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %10 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %2)
  %11 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %3)
  %12 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %4)
  %13 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %5)
  %14 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %6)
  %15 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %7)
  %16 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %8)
  %17 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %9)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins24, i8 1, <64 x float> %10, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins25, i8 1, <64 x float> %11, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins26, i8 1, <64 x float> %12, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins27, i8 1, <64 x float> %13, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins28, i8 1, <64 x float> %14, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins29, i8 1, <64 x float> %15, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins30, i8 1, <64 x float> %16, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins31, i8 1, <64 x float> %17, i32 0, i1 true, i1 false)
  %add32 = add i32 %w.0126, 1
  %exitcond = icmp eq i32 %add32, %mul2
  br i1 %exitcond, label %for.cond.cleanup22.loopexit, label %for.body23, !llvm.loop !5
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare <64 x float> @llvm.fabs.v64f32(<64 x float>) #3

attributes #0 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya2" "target-features"="+goya2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 37f6b84c5ee8bcfb48af5c8de6a680ad5a709a1d)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.taken", i1 true}
!5 = distinct !{!5, !4}
