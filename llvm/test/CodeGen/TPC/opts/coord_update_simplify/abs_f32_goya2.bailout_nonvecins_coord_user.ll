; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -march=tpc -mcpu=goya2 -coord-simplify -coord-update-simplify=true -S | FileCheck %s

target datalayout = "e-p0:32:32:32-p1:32:32:32-p2:32:32:32-p3:64:64:64-i32:32:32-n8:16:32-f16:16:16-f32:32:32-v160:32:32-v256:2048:2048-v2048:2048:2048-v4096:2048:2048-v8192:2048:2048"
target triple = "tpc"

; Function Attrs: nounwind writeonly
define dso_local void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 3
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[VECEXT]], 2
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 3
; CHECK-NEXT:    [[MUL2:%.*]] = shl i32 [[VECEXT1]], 2
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 0
; CHECK-NEXT:    [[VECEXT4:%.*]] = extractelement <5 x i32> [[ADD]], i32 0
; CHECK-NEXT:    [[CMP42:%.*]] = icmp slt i32 [[VECEXT3]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP42]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP639:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[H_044:%.*]] = phi i32 [ [[VECEXT3]], [[FOR_BODY_LR_PH]] ], [ [[ADD12:%.*]], [[FOR_COND_CLEANUP7:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_043:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP7]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[IFMCOORDS_043]], i32 [[H_044]], i32 0
; CHECK-NEXT:    br i1 [[CMP639]], label [[FOR_BODY8_PREHEADER:%.*]], label [[FOR_COND_CLEANUP7]]
; CHECK:       for.body8.preheader:
; CHECK-NEXT:    br label [[FOR_BODY8:%.*]]
; CHECK:       for.cond.cleanup7.loopexit:
; CHECK-NEXT:    [[VECINS9_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS9:%.*]], [[FOR_BODY8]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP7]]
; CHECK:       for.cond.cleanup7:
; CHECK-NEXT:    [[IFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ], [ [[VECINS9_LCSSA]], [[FOR_COND_CLEANUP7_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[ADD12]] = add i32 [[H_044]], 1
; CHECK-NEXT:    [[EXITCOND45:%.*]] = icmp eq i32 [[ADD12]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[EXITCOND45]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop !3
; CHECK:       for.body8:
; CHECK-NEXT:    [[W_041:%.*]] = phi i32 [ [[ADD10:%.*]], [[FOR_BODY8]] ], [ [[MUL]], [[FOR_BODY8_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_140:%.*]] = phi <5 x i32> [ [[VECINS9]], [[FOR_BODY8]] ], [ [[VECINS]], [[FOR_BODY8_PREHEADER]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_140]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[VECINS9]] = insertelement <5 x i32> [[IFMCOORDS_140]], i32 [[W_041]], i32 3
; CHECK-NEXT:    [[TMP3:%.*]] = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> [[TMP2]])
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS9]], i8 1, <64 x float> [[TMP3]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[ADD10]] = add i32 [[W_041]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[ADD10]], [[MUL2]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP7_LOOPEXIT]], label [[FOR_BODY8]], !llvm.loop !5
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 3
  %mul = shl nsw i32 %vecext, 2
  %vecext1 = extractelement <5 x i32> %add, i32 3
  %mul2 = shl i32 %vecext1, 2
  %vecext3 = extractelement <5 x i32> %0, i32 0
  %vecext4 = extractelement <5 x i32> %add, i32 0
  %cmp42 = icmp slt i32 %vecext3, %vecext4
  br i1 %cmp42, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp639 = icmp slt i32 %mul, %mul2
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup7
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.cond.cleanup7, %for.body.lr.ph
  %h.044 = phi i32 [ %vecext3, %for.body.lr.ph ], [ %add12, %for.cond.cleanup7 ]
  %ifmCoords.043 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords.1.lcssa, %for.cond.cleanup7 ]
  %vecins = insertelement <5 x i32> %ifmCoords.043, i32 %h.044, i32 0
  br i1 %cmp639, label %for.body8.preheader, label %for.cond.cleanup7

for.body8.preheader:                              ; preds = %for.body
  br label %for.body8

for.cond.cleanup7.loopexit:                       ; preds = %for.body8
  %vecins9.lcssa = phi <5 x i32> [ %vecins9, %for.body8 ]
  br label %for.cond.cleanup7

for.cond.cleanup7:                                ; preds = %for.cond.cleanup7.loopexit, %for.body
  %ifmCoords.1.lcssa = phi <5 x i32> [ %vecins, %for.body ], [ %vecins9.lcssa, %for.cond.cleanup7.loopexit ]
  %add12 = add i32 %h.044, 1
  %exitcond45 = icmp eq i32 %add12, %vecext4
  br i1 %exitcond45, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !3

for.body8:                                        ; preds = %for.body8.preheader, %for.body8
  %w.041 = phi i32 [ %add10, %for.body8 ], [ %mul, %for.body8.preheader ]
  %ifmCoords.140 = phi <5 x i32> [ %vecins9, %for.body8 ], [ %vecins, %for.body8.preheader ]
  %2 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.140, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %vecins9 = insertelement <5 x i32> %ifmCoords.140, i32 %w.041, i32 3
  %3 = tail call <64 x float> @llvm.fabs.v64f32(<64 x float> %2)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins9, i8 1, <64 x float> %3, i32 0, i1 true, i1 false)
  %add10 = add i32 %w.041, 1
  %exitcond = icmp eq i32 %add10, %mul2
  br i1 %exitcond, label %for.cond.cleanup7.loopexit, label %for.body8, !llvm.loop !5
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare <64 x float> @llvm.fabs.v64f32(<64 x float>) #3

attributes #0 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya2" "target-features"="+goya2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 37f6b84c5ee8bcfb48af5c8de6a680ad5a709a1d)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.taken", i1 true}
!5 = distinct !{!5, !4}
