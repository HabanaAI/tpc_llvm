# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tpc -mcpu=doron1 -run-pass=tpc-inc -tpc-inc-merger=1 %s -o - | FileCheck %s

# Cannot merge if increment step is not supported.

# Initially obtained from the source:
#
# void main() {
#   int5 index = {0};
#   __global__ int*  ptr = (__global__ int*)gen_addr(index, 0, SW_INT32 | SW_DT_OVERRIDE);
#   prefetch(ptr);
#
#   index[0] += 16;
#   ptr = (__global__ int*)gen_addr(index, 0);
#   prefetch(ptr);
# }

--- |
  define void @main() #0 {
  entry:
    %0 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 0, i32 18, i8 addrspace(3)* undef, i1 true, i1 false)
    tail call void @llvm.tpc.prefetch(i8 addrspace(3)* %0, i32 0, i1 true, i1 false)
    %1 = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> zeroinitializer, i32 16, i32 1, i8 2, i32 0, <5 x i32> zeroinitializer, i1 true, i1 false)
    %2 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %1, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
    tail call void @llvm.tpc.prefetch(i8 addrspace(3)* %2, i32 0, i1 true, i1 false)
    ret void
  }

  declare i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32>, i8, i32, i8 addrspace(3)*, i1, i1) #1
  declare void @llvm.tpc.prefetch(i8 addrspace(3)*, i32, i1, i1) #2
  declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

  attributes #0 = { nounwind "target-cpu"="doron1" "target-features"="+doron1" "tpc-kernel"="true" }
  attributes #1 = { nounwind readnone "target-cpu"="doron1" }
  attributes #2 = { inaccessiblemem_or_argmemonly nounwind "target-cpu"="doron1" }

...
---
name:            main
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: main
    ; CHECK: [[DEF:%[0-9]+]]:irf = IMPLICIT_DEF
    ; CHECK: [[SET_INDX_ld_ip:%[0-9]+]]:irf = SET_INDX_ld_ip [[DEF]], 0, 31, 0, $sprf_true, 0
    ; CHECK: [[COPY:%[0-9]+]]:sprf = COPY $sprf_true
    ; CHECK: [[DEF1:%[0-9]+]]:adrf = IMPLICIT_DEF
    ; CHECK: [[GEN_ADDR_st:%[0-9]+]]:adrf = GEN_ADDR_st 0, [[SET_INDX_ld_ip]], 18, [[DEF1]], $sprf_true, 0
    ; CHECK: PREFETCH killed [[GEN_ADDR_st]], 0, $sprf_true, 0
    ; CHECK: [[ADDiIp:%[0-9]+]]:irf = ADDiIp 16, [[SET_INDX_ld_ip]], 1, 2, 0, [[SET_INDX_ld_ip]], $sprf_true, 0
    ; CHECK: [[DEF2:%[0-9]+]]:adrf = IMPLICIT_DEF
    ; CHECK: [[GEN_ADDR_st1:%[0-9]+]]:adrf = GEN_ADDR_st 0, killed [[ADDiIp]], 0, [[DEF2]], $sprf_true, 0
    ; CHECK: PREFETCH killed [[GEN_ADDR_st1]], 0, $sprf_true, 0
    ; CHECK: HALTs
    %1:irf = IMPLICIT_DEF
    %0:irf = SET_INDX_ld_ip %1, 0, 31, 0, $sprf_true, 0
    %2:sprf = COPY $sprf_true
    %4:adrf = IMPLICIT_DEF
    %3:adrf = GEN_ADDR_st 0, %0, 18, %4, $sprf_true, 0
    PREFETCH killed %3, 0, $sprf_true, 0
    %5:irf = ADDiIp 16, %0, 1, 2, 0, %0, $sprf_true, 0
    %7:adrf = IMPLICIT_DEF
    %6:adrf = GEN_ADDR_st 0, killed %5, 0, %7, $sprf_true, 0
    PREFETCH killed %6, 0, $sprf_true, 0
    HALTs

...
