# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tpc -mcpu=gaudi2 -run-pass=tpc-pred %s -o - | FileCheck %s

--- |
  ; Function Attrs: nofree nounwind willreturn
  define dso_local void @main(i32 %mem_src, i32 %mem_dst) local_unnamed_addr {
  entry:
    %0 = inttoptr i32 %mem_dst to <256 x i8> addrspace(2)*
    %src_val.sroa.0.0..sroa_cast1 = inttoptr i32 %mem_src to <256 x i16> addrspace(2)*
    %src_val.sroa.0.0.copyload = load <256 x i16>, <256 x i16> addrspace(2)* %src_val.sroa.0.0..sroa_cast1, align 256
    %1 = tail call <256 x i8> @llvm.tpc.convert.v256i8.v256i16.i1(<256 x i16> %src_val.sroa.0.0.copyload, i8 7, i32 1024, <256 x i8> zeroinitializer, i1 true, i1 false)
    store <256 x i8> %1, <256 x i8> addrspace(2)* %0, align 256
    ret void
  }

  ; Function Attrs: nounwind readnone
  declare <256 x i8> @llvm.tpc.convert.v256i8.v256i16.i1(<256 x i16>, i8, i32, <256 x i8>, i1, i1)

...
---
name:            main
tracksRegLiveness: true
liveins:
  - { reg: '$s0', virtual-reg: '%0' }
  - { reg: '$s1', virtual-reg: '%1' }
body:             |
  bb.0.entry:
    liveins: $s0, $s1

    ; CHECK-LABEL: name: main
    ; CHECK: liveins: $s0, $s1
    ; CHECK: CACHE_INVALIDATE 4, $sprf_true, 0
    ; CHECK: [[COPY:%[0-9]+]]:srf = COPY $s1
    ; CHECK: [[COPY1:%[0-9]+]]:srf = COPY $s0
    ; CHECK: [[DEF:%[0-9]+]]:vrf = IMPLICIT_DEF
    ; CHECK: [[LD_L_Vvsp:%[0-9]+]]:vrf = LD_L_Vvsp [[COPY1]], 0, [[DEF]], $sprf_true, 0 :: (load 256 from %ir.src_val.sroa.0.0..sroa_cast1, addrspace 2)
    ; CHECK: [[DEF1:%[0-9]+]]:srf = IMPLICIT_DEF
    ; CHECK: [[ADDsip:%[0-9]+]]:srf = ADDsip [[COPY1]], 256, 2, 0, [[DEF1]], $sprf_true, 0
    ; CHECK: [[DEF2:%[0-9]+]]:vrf = IMPLICIT_DEF
    ; CHECK: [[LD_L_Vvsp1:%[0-9]+]]:vrf = LD_L_Vvsp killed [[ADDsip]], 0, [[DEF2]], $sprf_true, 0 :: (load 256 from %ir.src_val.sroa.0.0..sroa_cast1 + 256, addrspace 2)
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:drf = REG_SEQUENCE killed [[LD_L_Vvsp]], %subreg.sub_0, killed [[LD_L_Vvsp1]], %subreg.sub_1
    ; CHECK: [[DEF3:%[0-9]+]]:vrf = IMPLICIT_DEF
    ; CHECK: [[MOV_ld_vip:%[0-9]+]]:vrf = MOV_ld_vip 0, 4, 0, [[DEF3]], $sprf_true, 0
    ; CHECK: [[COPY2:%[0-9]+]]:sprf = COPY $sprf_true
    ; CHECK: [[DEF4:%[0-9]+]]:vrf = IMPLICIT_DEF
    ; CHECK: [[CONVERTg3vdp:%[0-9]+]]:vrf = CONVERTg3vdp killed [[REG_SEQUENCE]], 7, 1024, [[DEF4]], $sprf_true, 0
    ; CHECK: ST_L_Vsvp [[COPY]], killed [[CONVERTg3vdp]], 0, $sprf_true, 0 :: (store 256 into %ir.0, addrspace 2)
    ; CHECK: HALTs
    CACHE_INVALIDATE 4, $sprf_true, 0
    %1:srf = COPY $s1
    %0:srf = COPY $s0
    %3:vrf = IMPLICIT_DEF
    %2:vrf = LD_L_Vvsp %0, 0, %3, $sprf_true, 0 :: (load 256 from %ir.src_val.sroa.0.0..sroa_cast1, addrspace 2)
    %5:srf = IMPLICIT_DEF
    %4:srf = ADDsip %0, 256, 2, 0, %5, $sprf_true, 0
    %7:vrf = IMPLICIT_DEF
    %6:vrf = LD_L_Vvsp killed %4, 0, %7, $sprf_true, 0 :: (load 256 from %ir.src_val.sroa.0.0..sroa_cast1 + 256, addrspace 2)
    %8:drf = REG_SEQUENCE killed %2, %subreg.sub_0, killed %6, %subreg.sub_1
    %10:vrf = IMPLICIT_DEF
    %9:vrf = MOV_ld_vip 0, 4, 0, %10, $sprf_true, 0
    %11:sprf = COPY $sprf_true
    %12:vrf = CONVERTg3vdp killed %8, 7, 1024, %9, killed %11, 0
    ST_L_Vsvp %1, killed %12, 0, $sprf_true, 0 :: (store 256 into %ir.0, addrspace 2)
    HALTs

...
