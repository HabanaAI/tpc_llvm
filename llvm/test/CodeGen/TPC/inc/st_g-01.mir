# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tpc -mcpu=gaudi2 -run-pass=tpc-inc -tpc-inc-merger=1 %s -o - | FileCheck %s

# void main(tensor out, int value) {
#   int5 index = get_index_space_offset();
#   int __global *ptr = (int __global *)gen_addr(index, out, SW_INT32 | SW_DT_OVERRIDE);
#   *ptr = value;
#   index[0] += 1;
#   ptr = (__global__ int *)gen_addr(index, out);
#   *ptr = value;
# }

--- |
  define void @main(i32 %value) #0 {
  entry:
    %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
    %1 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %0, i8 0, i32 18, i8 addrspace(3)* undef, i1 true, i1 false)
    %2 = bitcast i8 addrspace(3)* %1 to i32 addrspace(3)*
    store i32 %value, i32 addrspace(3)* %2, align 4
    %3 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %0, i32 1, i32 1, i8 2, i32 0, <5 x i32> %0, i1 true, i1 false)
    %4 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %3, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
    %5 = bitcast i8 addrspace(3)* %4 to i32 addrspace(3)*
    store i32 %value, i32 addrspace(3)* %5, align 4
    ret void
  }

  declare <5 x i32> @llvm.tpc.get.index.space.offset() #1
  declare i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32>, i8, i32, i8 addrspace(3)*, i1, i1) #1
  declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

  attributes #0 = { nofree nounwind willreturn writeonly "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gaudi2" "target-features"="+gaudi2" "tpc-kernel"="true" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind readnone "target-cpu"="gaudi2" }

...
---
name:            main
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $s0

    ; CHECK-LABEL: name: main
    ; CHECK: liveins: $s0
    ; CHECK: CACHE_INVALIDATE 4, $sprf_true, 0
    ; CHECK: [[COPY:%[0-9]+]]:srf = COPY $s0
    ; CHECK: [[COPY1:%[0-9]+]]:irf = COPY $i0
    ; CHECK: [[COPY2:%[0-9]+]]:sprf = COPY $sprf_true
    ; CHECK: [[DEF:%[0-9]+]]:adrf = IMPLICIT_DEF
    ; CHECK: [[GEN_ADDR_st:%[0-9]+]]:adrf = GEN_ADDR_st 0, [[COPY1]], 18, [[DEF]], $sprf_true, 0
    ; CHECK: ST_Gs killed [[GEN_ADDR_st]](tied-def 5), [[COPY]], 3, $sprf_true, 0, implicit-def %8 :: (store 4 into %ir.2, addrspace 3)
    ; CHECK: [[DEF1:%[0-9]+]]:adrf = IMPLICIT_DEF
    ; CHECK: ST_Gs killed %8, [[COPY]], 0, $sprf_true, 0 :: (store 4 into %ir.5, addrspace 3)
    ; CHECK: HALTs
    CACHE_INVALIDATE 4, $sprf_true, 0
    %0:srf = COPY $s0
    %1:irf = COPY $i0
    %2:sprf = COPY $sprf_true
    %4:adrf = IMPLICIT_DEF
    %3:adrf = GEN_ADDR_st 0, %1, 18, %4, $sprf_true, 0
    ST_Gs killed %3, %0, 0, $sprf_true, 0 :: (store 4 into %ir.2, addrspace 3)
    %5:irf = ADDiIp 1, %1, 1, 2, 0, %1, $sprf_true, 0
    %7:adrf = IMPLICIT_DEF
    %6:adrf = GEN_ADDR_st 0, killed %5, 0, %7, $sprf_true, 0
    ST_Gs killed %6, %0, 0, $sprf_true, 0 :: (store 4 into %ir.5, addrspace 3)
    HALTs

...
