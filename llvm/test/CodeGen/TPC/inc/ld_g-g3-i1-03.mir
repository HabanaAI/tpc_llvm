# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tpc -mcpu=greco -run-pass=tpc-inc -tpc-inc-merger=1 %s -o - | FileCheck %s

# Greco, increment by 1. Chain of loads with increment.

# void main(int dest, int ndx) {
#   char __local *dptr = (char __local *)dest;
#
#   int5 index = {ndx};
#   char __global *ptr = (char __global *)gen_addr(index, 0, SW_INT8 | SW_DT_OVERRIDE);
#   *dptr++ = *ptr;
#
#   index[0] += 1;
#   ptr = (__global__ char*)gen_addr(index, 0);
#   *dptr++ = *ptr;
#
#   index[0] += 1;
#   ptr = (__global__ char*)gen_addr(index, 0);
#   *dptr = *ptr;
# }


--- |
  define void @main(i32 %dest, i32 %ndx) #0 {
  entry:
    %dptr.0 = inttoptr i32 %dest to i8 addrspace(1)*
    %ndx.0 = insertelement <5 x i32> <i32 poison, i32 0, i32 0, i32 0, i32 0>, i32 %ndx, i32 0
    %addr.0 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %ndx.0, i8 0, i32 20, i8 addrspace(3)* undef, i1 true, i1 false)
    %val.0 = load i8, i8 addrspace(3)* %addr.0, align 1
    store i8 %val.0, i8 addrspace(1)* %dptr.0, align 1
    %dptr.1 = getelementptr inbounds i8, i8 addrspace(1)* %dptr.0, i32 1
    %ndx.1 = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ndx.0, i32 1, i32 1, i8 2, i32 0, <5 x i32> %ndx.0, i1 true, i1 false)
    %addr.1 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %ndx.1, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
    %val.1 = load i8, i8 addrspace(3)* %addr.1, align 1
    store i8 %val.1, i8 addrspace(1)* %dptr.1, align 1
    %dptr.2 = getelementptr inbounds i8, i8 addrspace(1)* %dptr.0, i32 2
    %ndx.2 = call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ndx.1, i32 1, i32 1, i8 2, i32 0, <5 x i32> %ndx.1, i1 true, i1 false)
    %addr.2 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %ndx.2, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
    %val.2 = load i8, i8 addrspace(3)* %addr.2, align 1
    store i8 %val.2, i8 addrspace(1)* %dptr.2, align 1
    ret void
  }

  declare i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32>, i8, i32, i8 addrspace(3)*, i1, i1) #1
  declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

  attributes #0 = { nounwind "target-cpu"="greco" "tpc-kernel"="true" }
  attributes #1 = { nounwind readnone "target-cpu"="goya2" }

...
---
name:            main
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $s0, $s1

    ; CHECK-LABEL: name: main
    ; CHECK: liveins: $s0, $s1
    ; CHECK: [[COPY:%[0-9]+]]:srf = COPY $s1
    ; CHECK: [[COPY1:%[0-9]+]]:srf = COPY $s0
    ; CHECK: [[DEF:%[0-9]+]]:irf = IMPLICIT_DEF
    ; CHECK: [[SET_INDX_ld_rp:%[0-9]+]]:irf = SET_INDX_ld_rp [[DEF]], [[COPY]], 1, 0, $sprf_true, 0
    ; CHECK: [[DEF1:%[0-9]+]]:srf = IMPLICIT_DEF
    ; CHECK: [[SET_INDX_ld_ip:%[0-9]+]]:irf = SET_INDX_ld_ip [[SET_INDX_ld_rp]], 0, 30, 0, $sprf_true, 0
    ; CHECK: [[DEF2:%[0-9]+]]:adrf = IMPLICIT_DEF
    ; CHECK: [[GEN_ADDR_st:%[0-9]+]]:adrf = GEN_ADDR_st 0, [[SET_INDX_ld_ip]], 20, [[DEF2]], $sprf_true, 0
    ; CHECK: [[DEF3:%[0-9]+]]:srf = IMPLICIT_DEF
    ; CHECK: [[LD_Gsap:%[0-9]+]]:srf = LD_Gsap killed [[GEN_ADDR_st]](tied-def 6), 5, [[DEF3]](tied-def 0), $sprf_true, 0, implicit-def %23 :: (load 1 from %ir.addr.0, addrspace 3)
    ; CHECK: [[DEF4:%[0-9]+]]:srf = IMPLICIT_DEF
    ; CHECK: [[DEF5:%[0-9]+]]:adrf = IMPLICIT_DEF
    ; CHECK: [[DEF6:%[0-9]+]]:srf = IMPLICIT_DEF
    ; CHECK: [[LD_Gsap1:%[0-9]+]]:srf = LD_Gsap killed %23(tied-def 6), 1, [[DEF6]](tied-def 0), $sprf_true, 0, implicit-def %22 :: (load 1 from %ir.addr.1, addrspace 3)
    ; CHECK: [[DEF7:%[0-9]+]]:srf = IMPLICIT_DEF
    ; CHECK: [[DEF8:%[0-9]+]]:adrf = IMPLICIT_DEF
    ; CHECK: [[DEF9:%[0-9]+]]:srf = IMPLICIT_DEF
    ; CHECK: [[LD_Gsap2:%[0-9]+]]:srf = LD_Gsap killed %22, 0, [[DEF9]], $sprf_true, 0 :: (load 1 from %ir.addr.2, addrspace 3)
    ; CHECK: HALTs
    %1:srf = COPY $s1
    %0:srf = COPY $s0
    %3:irf = IMPLICIT_DEF
    %2:irf = SET_INDX_ld_rp %3, %1, 1, 0, $sprf_true, 0
    %5:srf = IMPLICIT_DEF
    %29:irf = SET_INDX_ld_ip %2, 0, 30, 0, $sprf_true, 0
    %12:adrf = IMPLICIT_DEF
    %11:adrf = GEN_ADDR_st 0, %29, 20, %12, $sprf_true, 0
    %14:srf = IMPLICIT_DEF
    %13:srf = LD_Gsap killed %11, 0, %14, $sprf_true, 0 :: (load 1 from %ir.addr.0, addrspace 3)
    %16:srf = IMPLICIT_DEF
    %17:irf = ADDiIp 1, %29, 1, 2, 0, %29, $sprf_true, 0
    %19:adrf = IMPLICIT_DEF
    %18:adrf = GEN_ADDR_st 0, %17, 0, %19, $sprf_true, 0
    %21:srf = IMPLICIT_DEF
    %20:srf = LD_Gsap killed %18, 0, %21, $sprf_true, 0 :: (load 1 from %ir.addr.1, addrspace 3)
    %23:srf = IMPLICIT_DEF
    %24:irf = ADDiIp 1, %17, 1, 2, 0, %17, $sprf_true, 0
    %26:adrf = IMPLICIT_DEF
    %25:adrf = GEN_ADDR_st 0, killed %24, 0, %26, $sprf_true, 0
    %28:srf = IMPLICIT_DEF
    %27:srf = LD_Gsap killed %25, 0, %28, $sprf_true, 0 :: (load 1 from %ir.addr.2, addrspace 3)
    HALTs

...
