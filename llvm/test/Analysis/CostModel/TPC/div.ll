; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s -cost-model -cost-kind=latency -analyze -mtriple=tpc -mcpu=gaudi | FileCheck %s --check-prefix=LATENCY
; XFAIL: *
target datalayout = "e-p0:32:32:32-p1:32:32:32-p2:32:32:32-p3:64:64:64-i32:32:32-n8:16:32-f16:16:16-f32:32:32-v160:32:32-v256:2048:2048-v2048:2048:2048-v4096:2048:2048-v8192:2048:2048"
target triple = "tpc"

@0 = external dso_local addrspace(1) global <5 x i32>, section ".sldata"
@1 = external dso_local addrspace(1) global i32, section ".sldata"
@2 = external dso_local addrspace(2) global <64 x i32>, section ".vldata"
@3 = external dso_local addrspace(1) global i32, section ".sldata"
@4 = external dso_local addrspace(1) global i32, section ".sldata"
@5 = external dso_local addrspace(1) global i32, section ".sldata"

; Function Attrs: noinline nounwind
define dso_local void @main() #0 {
; LATENCY-LABEL: 'main'
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = call <5 x i32> @llvm.tpc.get.index.space.offset()
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = call <5 x i32> @llvm.tpc.get.index.space.size()
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %3 = add <5 x i32> %2, %1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <5 x i32> zeroinitializer, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %4 = extractelement <5 x i32> %1, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %5 = shl nsw i32 %4, 7
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = extractelement <5 x i32> %3, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %7 = shl nsw i32 %6, 7
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %7, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %8
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %9 = phi i32 [ %5, %0 ], [ %32, %30 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %9, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %10 = load i32, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %11 = icmp slt i32 %9, %10
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %11, label %12, label %33
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %13 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %14 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %13, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %15 = call i32 @llvm.tpc.ld.g.i32(i8 addrspace(3)* %14, i32 0, i32 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %15, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %16 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %17 = insertelement <5 x i32> %13, i32 %16, i32 2
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <5 x i32> %17, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %18 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %17, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %19 = call i32 @llvm.tpc.ld.g.i32(i8 addrspace(3)* %18, i32 0, i32 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %19, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %20 = load i32, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %21 = mul nsw i32 %20, %19
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 40 for instruction: %udiv1 = udiv i32 %21, %20
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 60 for instruction: %sdiv1 = sdiv i32 %21, %udiv1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 40 for instruction: %urem1 = urem i32 %21, %sdiv1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 60 for instruction: %srem1 = srem i32 %21, %urem1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %srem1, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: call void @llvm.tpc.st.g.b.i32(i8 addrspace(3)* %18, i32 %21, i32 0, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %22 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %23 = call <64 x i32> @llvm.tpc.ld.tnsr.v64i32.i1(<5 x i32> %22, i8 0, i32 0, <64 x i32> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x i32> %23, <64 x i32> addrspace(2)* null, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %24 = load i32, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %25 = icmp slt i32 %24, %21
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %25, label %26, label %29
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %27 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %28 = load <64 x i32>, <64 x i32> addrspace(2)* null, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: call void @llvm.tpc.st.tnsr.v64i32(<5 x i32> %27, i8 2, <64 x i32> %28, i32 0, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %29
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %30
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %31 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %32 = add nsw i32 %31, 128
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %8, !llvm.loop !4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %1 = call <5 x i32> @llvm.tpc.get.index.space.offset()
  %2 = call <5 x i32> @llvm.tpc.get.index.space.size()
  %3 = add <5 x i32> %2, %1
  store <5 x i32> zeroinitializer, <5 x i32> addrspace(1)* null, align 4
  %4 = extractelement <5 x i32> %1, i32 0
  %5 = shl nsw i32 %4, 7
  %6 = extractelement <5 x i32> %3, i32 0
  %7 = shl nsw i32 %6, 7
  store i32 %7, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
  br label %8

; <label>:8:                                      ; preds = %30, %0
  %9 = phi i32 [ %5, %0 ], [ %32, %30 ]
  store i32 %9, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  %10 = load i32, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %33

; <label>:12:                                     ; preds = %8
  %13 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
  %14 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %13, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %15 = call i32 @llvm.tpc.ld.g.i32(i8 addrspace(3)* %14, i32 0, i32 undef, i1 true, i1 false)
  store i32 %15, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
  %16 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  %17 = insertelement <5 x i32> %13, i32 %16, i32 2
  store <5 x i32> %17, <5 x i32> addrspace(1)* null, align 4
  %18 = call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %17, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %19 = call i32 @llvm.tpc.ld.g.i32(i8 addrspace(3)* %18, i32 0, i32 undef, i1 true, i1 false)
  store i32 %19, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
  %20 = load i32, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
  %21 = mul nsw i32 %20, %19
  %udiv1 = udiv i32 %21, %20
  %sdiv1 = sdiv i32 %21, %udiv1
  %urem1 = urem i32 %21, %sdiv1
  %srem1 = srem i32 %21, %urem1
  store i32 %srem1, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
  call void @llvm.tpc.st.g.b.i32(i8 addrspace(3)* %18, i32 %21, i32 0, i1 true, i1 false)
  %22 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
  %23 = call <64 x i32> @llvm.tpc.ld.tnsr.v64i32.i1(<5 x i32> %22, i8 0, i32 0, <64 x i32> undef, i1 true, i1 false)
  store <64 x i32> %23, <64 x i32> addrspace(2)* null, align 256
  %24 = load i32, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
  %25 = icmp slt i32 %24, %21
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %12
  %27 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
  %28 = load <64 x i32>, <64 x i32> addrspace(2)* null, align 256
  call void @llvm.tpc.st.tnsr.v64i32(<5 x i32> %27, i8 2, <64 x i32> %28, i32 0, i1 true, i1 false)
  br label %29

; <label>:29:                                     ; preds = %26, %12
  br label %30

; <label>:30:                                     ; preds = %29
  %31 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  %32 = add nsw i32 %31, 128
  br label %8, !llvm.loop !4

; <label>:33:                                     ; preds = %8
  ret void
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32>, i8, i32, i8 addrspace(3)*, i1, i1) #1

; Function Attrs: nounwind readonly
declare i32 @llvm.tpc.ld.g.i32(i8 addrspace(3)*, i32, i32, i1, i1) #2

; Function Attrs: argmemonly nounwind writeonly
declare void @llvm.tpc.st.g.b.i32(i8 addrspace(3)*, i32, i32, i1, i1) #3

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.ld.tnsr.v64i32.i1(<5 x i32>, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64i32(<5 x i32>, i8, <64 x i32>, i32, i1, i1) #4

attributes #0 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }
attributes #3 = { argmemonly nounwind writeonly }
attributes #4 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (ssh://gerrit:29418/tpc_clang2 896330493290d87fa684af427415776cad2c1b28) (ssh://gerrit:29418/tpc_llvm2 d26cb21634b93d0936bb95d19671598f848acda7)"}
!2 = !{i32 36}
!3 = !{i32 256}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.taken", i1 true}
