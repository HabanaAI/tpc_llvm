; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s -cost-model -cost-kind=latency -analyze -mtriple=tpc -mcpu=gaudi | FileCheck %s --check-prefix=LATENCY

target datalayout = "e-p0:32:32:32-p1:32:32:32-p2:32:32:32-p3:64:64:64-i32:32:32-n8:16:32-f16:16:16-f32:32:32-v160:32:32-v256:2048:2048-v2048:2048:2048-v4096:2048:2048-v8192:2048:2048"
target triple = "tpc"

@0 = external dso_local addrspace(1) global <5 x i32>, section ".sldata"
@1 = external dso_local addrspace(1) global i32, section ".sldata"
@2 = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@3 = external dso_local addrspace(1) global i32, section ".sldata"

; Function Attrs: noinline nounwind
define dso_local void @main(i32, i32) #0 {
; LATENCY-LABEL: 'main'
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %3 = call <5 x i32> @llvm.tpc.get.index.space.offset()
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %4 = call <5 x i32> @llvm.tpc.get.index.space.size()
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %5 = add <5 x i32> %4, %3
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <5 x i32> zeroinitializer, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = extractelement <5 x i32> %3, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %7 = shl nsw i32 %6, 7
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %8 = extractelement <5 x i32> %5, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %9 = shl nsw i32 %8, 7
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %9, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %10
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %11 = phi i32 [ %7, %2 ], [ %40, %38 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %11, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %12 = load i32, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %13 = icmp slt i32 %11, %12
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %13, label %14, label %41
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %15 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %16 = call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %15, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %16, <64 x float> addrspace(2)* null, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %17 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %18 = add nsw i32 %17, 128
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %19 = insertelement <5 x i32> %15, i32 %18, i32 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <5 x i32> %19, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %20 = call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %19, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %21 = call <64 x float> @llvm.tpc.add.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %20, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %22 = call <64 x float> @llvm.tpc.sub.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %21, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %23 = call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %22, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %24 = call <64 x float> @llvm.tpc.or.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %23, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %25 = call <64 x float> @llvm.tpc.xor.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %24, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %26 = load <64 x float>, <64 x float> addrspace(2)* null, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %27 = call <64 x float> @llvm.tpc.and.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %25, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %28 = fadd <64 x float> %27, %26
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %29 = fsub <64 x float> %28, %26
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %fdiv1 = fdiv <64 x float> %28, %27
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 12 for instruction: %frem1 = frem <64 x float> %28, %fdiv1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %30 = fmul <64 x float> %29, %frem1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %31 = call <64 x float> @llvm.tpc.not.v64f32.v64f32.i1(<64 x float> %30, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %32 = call <64 x float> @llvm.tpc.sel.eq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %31, <64 x float> %26, <64 x float> %31, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %33 = call <64 x float> @llvm.tpc.sel.neq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %32, <64 x float> %26, <64 x float> %32, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %34 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %33, <64 x float> %26, <64 x float> %33, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %35 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %34, <64 x float> %26, <64 x float> %34, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %36 = call <64 x float> @llvm.tpc.sel.geq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %35, <64 x float> %26, <64 x float> %35, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %37 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %37, i8 2, <64 x float> %36, i32 0, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %38
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %39 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %40 = add nsw i32 %39, 128
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %10, !llvm.loop !4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  %3 = call <5 x i32> @llvm.tpc.get.index.space.offset()
  %4 = call <5 x i32> @llvm.tpc.get.index.space.size()
  %5 = add <5 x i32> %4, %3
  store <5 x i32> zeroinitializer, <5 x i32> addrspace(1)* null, align 4
  %6 = extractelement <5 x i32> %3, i32 0
  %7 = shl nsw i32 %6, 7
  %8 = extractelement <5 x i32> %5, i32 0
  %9 = shl nsw i32 %8, 7
  store i32 %9, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
  br label %10

; <label>:10:                                     ; preds = %38, %2
  %11 = phi i32 [ %7, %2 ], [ %40, %38 ]
  store i32 %11, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  %12 = load i32, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %41

; <label>:14:                                     ; preds = %10
  %15 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
  %16 = call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %15, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  store <64 x float> %16, <64 x float> addrspace(2)* null, align 256
  %17 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  %18 = add nsw i32 %17, 128
  %19 = insertelement <5 x i32> %15, i32 %18, i32 1
  store <5 x i32> %19, <5 x i32> addrspace(1)* null, align 4
  %20 = call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %19, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %21 = call <64 x float> @llvm.tpc.add.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %20, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %22 = call <64 x float> @llvm.tpc.sub.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %21, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %23 = call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %22, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %24 = call <64 x float> @llvm.tpc.or.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %23, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %25 = call <64 x float> @llvm.tpc.xor.v64f32.v64f32.v64f32.i1(<64 x float> %16, <64 x float> %24, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %26 = load <64 x float>, <64 x float> addrspace(2)* null, align 256
  %27 = call <64 x float> @llvm.tpc.and.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %25, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %28 = fadd <64 x float> %27, %26
  %29 = fsub <64 x float> %28, %26
  %fdiv1 = fdiv <64 x float> %28 , %27
  %frem1 = frem <64 x float> %28 , %fdiv1
  %30 = fmul <64 x float> %29, %frem1
  %31 = call <64 x float> @llvm.tpc.not.v64f32.v64f32.i1(<64 x float> %30, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %32 = call <64 x float> @llvm.tpc.sel.eq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %31, <64 x float> %26, <64 x float> %31, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %33 = call <64 x float> @llvm.tpc.sel.neq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %32, <64 x float> %26, <64 x float> %32, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %34 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %33, <64 x float> %26, <64 x float> %33, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %35 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %34, <64 x float> %26, <64 x float> %34, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %36 = call <64 x float> @llvm.tpc.sel.geq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %26, <64 x float> %35, <64 x float> %26, <64 x float> %35, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %37 = load <5 x i32>, <5 x i32> addrspace(1)* null, align 4
  call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %37, i8 2, <64 x float> %36, i32 0, i1 true, i1 false)
  br label %38

; <label>:38:                                     ; preds = %14
  %39 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  %40 = add nsw i32 %39, 128
  br label %10, !llvm.loop !4

; <label>:41:                                     ; preds = %10
  ret void
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.add.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sub.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.or.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.xor.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.and.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.not.v64f32.v64f32.i1(<64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.eq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.neq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.geq.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

attributes #0 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (ssh://gerrit:29418/tpc_clang2 896330493290d87fa684af427415776cad2c1b28) (ssh://gerrit:29418/tpc_llvm2 d26cb21634b93d0936bb95d19671598f848acda7)"}
!2 = !{i32 28}
!3 = !{i32 256}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.taken", i1 true}
