; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s -cost-model -cost-kind=latency -analyze -mtriple=tpc -mcpu=gaudi | FileCheck %s --check-prefix=LATENCY
;XFAIL:*
target datalayout = "e-p0:32:32:32-p1:32:32:32-p2:32:32:32-p3:64:64:64-i32:32:32-n8:16:32-f16:16:16-f32:32:32-v160:32:32-v256:2048:2048-v2048:2048:2048-v4096:2048:2048-v8192:2048:2048"
target triple = "tpc"

@input.addr.i.i.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@result.i.i.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@value.i.i.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@C0.i.i.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@res_exp.i.i.i = external dso_local addrspace(2) global <64 x i32>, section ".vldata"
@input.addr.i.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@input_x.addr.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@input_y.addr.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@result.i119 = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@flt_min_fp32.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@nan_fp32.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@plus_inf_fp32.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@abs_x.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@abs_y.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@sign_res_fp32.i = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@pad_w.addr = external dso_local addrspace(1) global i32, section ".sldata"
@pad_h.addr = external dso_local addrspace(1) global i32, section ".sldata"
@kernel_w.addr = external dso_local addrspace(1) global i32, section ".sldata"
@kernel_h.addr = external dso_local addrspace(1) global i32, section ".sldata"
@stride_w.addr = external dso_local addrspace(1) global i32, section ".sldata"
@stride_h.addr = external dso_local addrspace(1) global i32, section ".sldata"
@dilation_w.addr = external dso_local addrspace(1) global i32, section ".sldata"
@dilation_h.addr = external dso_local addrspace(1) global i32, section ".sldata"
@pad_d.addr = external dso_local addrspace(1) global i32, section ".sldata"
@kernel_d.addr = external dso_local addrspace(1) global i32, section ".sldata"
@stride_d.addr = external dso_local addrspace(1) global i32, section ".sldata"
@dilation_d.addr = external dso_local addrspace(1) global i32, section ".sldata"
@include_padding.addr = external dso_local addrspace(1) global i32, section ".sldata"
@index_space_start = external dso_local addrspace(1) global <5 x i32>, section ".sldata"
@index_space_end = external dso_local addrspace(1) global <5 x i32>, section ".sldata"
@channels_start = external dso_local addrspace(1) global i32, section ".sldata"
@channels_end = external dso_local addrspace(1) global i32, section ".sldata"
@width_start = external dso_local addrspace(1) global i32, section ".sldata"
@width_end = external dso_local addrspace(1) global i32, section ".sldata"
@height_start = external dso_local addrspace(1) global i32, section ".sldata"
@height_end = external dso_local addrspace(1) global i32, section ".sldata"
@depth_start = external dso_local addrspace(1) global i32, section ".sldata"
@depth_end = external dso_local addrspace(1) global i32, section ".sldata"
@batch_start = external dso_local addrspace(1) global i32, section ".sldata"
@batch_end = external dso_local addrspace(1) global i32, section ".sldata"
@ifm_w = external dso_local addrspace(1) global i32, section ".sldata"
@ifm_h = external dso_local addrspace(1) global i32, section ".sldata"
@ifm_d = external dso_local addrspace(1) global i32, section ".sldata"
@pad_included = external dso_local addrspace(1) global i8, section ".sldata"
@c = external dso_local addrspace(1) global i32, section ".sldata"
@b = external dso_local addrspace(1) global i32, section ".sldata"
@d = external dso_local addrspace(1) global i32, section ".sldata"
@start_d = external dso_local addrspace(1) global i32, section ".sldata"
@h = external dso_local addrspace(1) global i32, section ".sldata"
@start_h = external dso_local addrspace(1) global i32, section ".sldata"
@w = external dso_local addrspace(1) global i32, section ".sldata"
@start_w = external dso_local addrspace(1) global i32, section ".sldata"
@elements_in_tensor = external dso_local addrspace(1) global i32, section ".sldata"
@accum = external dso_local addrspace(2) global <64 x float>, section ".vldata"
@kd = external dso_local addrspace(1) global i32, section ".sldata"
@ifm_d_index = external dso_local addrspace(1) global i32, section ".sldata"
@d_ind_in_ifm = external dso_local addrspace(1) global i8, section ".sldata"
@kh = external dso_local addrspace(1) global i32, section ".sldata"
@ifm_h_index = external dso_local addrspace(1) global i32, section ".sldata"
@h_ind_in_ifm = external dso_local addrspace(1) global i8, section ".sldata"
@kw = external dso_local addrspace(1) global i32, section ".sldata"
@ifm_w_index = external dso_local addrspace(1) global i32, section ".sldata"
@add_value = external dso_local addrspace(1) global i8, section ".sldata"
@ele_count = external dso_local addrspace(1) global float, section ".sldata"

; Function Attrs: noinline nounwind
define dso_local void @main(i32 %pad_w, i32 %pad_h, i32 %kernel_w, i32 %kernel_h, i32 %stride_w, i32 %stride_h, i32 %dilation_w, i32 %dilation_h, i32 %pad_d, i32 %kernel_d, i32 %stride_d, i32 %dilation_d, i32 %include_padding) #0 {
; LATENCY-LABEL: 'main'
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %pad_w, i32 addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %pad_h, i32 addrspace(1)* inttoptr (i32 4 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %kernel_w, i32 addrspace(1)* inttoptr (i32 8 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %kernel_h, i32 addrspace(1)* inttoptr (i32 12 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %stride_w, i32 addrspace(1)* inttoptr (i32 16 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %stride_h, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %dilation_w, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %dilation_h, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %pad_d, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %kernel_d, i32 addrspace(1)* inttoptr (i32 36 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %stride_d, i32 addrspace(1)* inttoptr (i32 40 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %dilation_d, i32 addrspace(1)* inttoptr (i32 44 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %include_padding, i32 addrspace(1)* inttoptr (i32 48 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %0 = call <5 x i32> @llvm.tpc.get.index.space.offset()
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <5 x i32> %0, <5 x i32> addrspace(1)* inttoptr (i32 52 to <5 x i32> addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %1 = call <5 x i32> @llvm.tpc.get.index.space.size()
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add = add <5 x i32> %1, %0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <5 x i32> %add, <5 x i32> addrspace(1)* inttoptr (i32 72 to <5 x i32> addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext = extractelement <5 x i32> %0, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul = shl nsw i32 %vecext, 6
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %mul, i32 addrspace(1)* inttoptr (i32 92 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext1 = extractelement <5 x i32> %add, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul2 = shl nsw i32 %vecext1, 6
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %mul2, i32 addrspace(1)* inttoptr (i32 96 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %2 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 52 to <5 x i32> addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext3 = extractelement <5 x i32> %2, i32 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext3, i32 addrspace(1)* inttoptr (i32 100 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %3 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 72 to <5 x i32> addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext5 = extractelement <5 x i32> %3, i32 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext5, i32 addrspace(1)* inttoptr (i32 104 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext7 = extractelement <5 x i32> %2, i32 2
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext7, i32 addrspace(1)* inttoptr (i32 108 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext9 = extractelement <5 x i32> %3, i32 2
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext9, i32 addrspace(1)* inttoptr (i32 112 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %4 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 52 to <5 x i32> addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext11 = extractelement <5 x i32> %4, i32 3
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext11, i32 addrspace(1)* inttoptr (i32 116 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %5 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 72 to <5 x i32> addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext13 = extractelement <5 x i32> %5, i32 3
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext13, i32 addrspace(1)* inttoptr (i32 120 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext15 = extractelement <5 x i32> %4, i32 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext15, i32 addrspace(1)* inttoptr (i32 124 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecext17 = extractelement <5 x i32> %5, i32 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %vecext17, i32 addrspace(1)* inttoptr (i32 128 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %6 = call i32 @llvm.tpc.ld.l.i32(i32 1048, i32 1, i32 undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %6, i32 addrspace(1)* inttoptr (i32 132 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %7 = call i32 @llvm.tpc.ld.l.i32(i32 1056, i32 1, i32 undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %7, i32 addrspace(1)* inttoptr (i32 136 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %8 = call i32 @llvm.tpc.ld.l.i32(i32 1064, i32 1, i32 undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %8, i32 addrspace(1)* inttoptr (i32 140 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %9 = load i32, i32 addrspace(1)* inttoptr (i32 48 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %10 = call i1 @llvm.tpc.cmp.eq.i1.i32.i32.i1(i32 %9, i32 1, i8 2, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %conv = zext i1 %10 to i8
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i8 %conv, i8 addrspace(1)* inttoptr (i32 144 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %11 = load i32, i32 addrspace(1)* inttoptr (i32 92 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge = phi i32 [ %11, %entry ], [ %add117, %for.inc116 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %12 = load i32, i32 addrspace(1)* inttoptr (i32 96 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp = icmp slt i32 %storemerge, %12
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp, label %for.body, label %for.end118
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %13 = load i32, i32 addrspace(1)* inttoptr (i32 124 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond22
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge144 = phi i32 [ %13, %for.body ], [ %add114, %for.inc113 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge144, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %14 = load i32, i32 addrspace(1)* inttoptr (i32 128 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp23 = icmp slt i32 %storemerge144, %14
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp23, label %for.body25, label %for.end115
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %15 = load i32, i32 addrspace(1)* inttoptr (i32 116 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond26
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge145 = phi i32 [ %15, %for.body25 ], [ %add111, %for.inc110 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge145, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %16 = load i32, i32 addrspace(1)* inttoptr (i32 120 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp27 = icmp slt i32 %storemerge145, %16
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp27, label %for.body29, label %for.end112
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %17 = load i32, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %18 = load i32, i32 addrspace(1)* inttoptr (i32 40 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul30 = mul nsw i32 %17, %18
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %19 = load i32, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %sub = sub nsw i32 %mul30, %19
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %sub, i32 addrspace(1)* inttoptr (i32 160 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %20 = load i32, i32 addrspace(1)* inttoptr (i32 108 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond31
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge146 = phi i32 [ %20, %for.body29 ], [ %add108, %for.inc107 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge146, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %21 = load i32, i32 addrspace(1)* inttoptr (i32 112 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp32 = icmp slt i32 %storemerge146, %21
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp32, label %for.body34, label %for.end109
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %22 = load i32, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %23 = load i32, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul35 = mul nsw i32 %22, %23
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %24 = load i32, i32 addrspace(1)* inttoptr (i32 4 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %sub36 = sub nsw i32 %mul35, %24
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %sub36, i32 addrspace(1)* inttoptr (i32 168 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %25 = load i32, i32 addrspace(1)* inttoptr (i32 100 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond37
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge147 = phi i32 [ %25, %for.body34 ], [ %add105, %for.inc104 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge147, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %26 = load i32, i32 addrspace(1)* inttoptr (i32 104 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp38 = icmp slt i32 %storemerge147, %26
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp38, label %for.body40, label %for.end106
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %27 = load i32, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %28 = load i32, i32 addrspace(1)* inttoptr (i32 16 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul41 = mul nsw i32 %27, %28
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %29 = load i32, i32 addrspace(1)* null, align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %sub42 = sub nsw i32 %mul41, %29
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %sub42, i32 addrspace(1)* inttoptr (i32 176 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 0, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> zeroinitializer, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond43
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge148 = phi i32 [ 0, %for.body40 ], [ %inc94, %for.inc93 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge148, i32 addrspace(1)* inttoptr (i32 184 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %30 = load i32, i32 addrspace(1)* inttoptr (i32 36 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp44 = icmp slt i32 %storemerge148, %30
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp44, label %for.body46, label %for.end95
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %31 = load i32, i32 addrspace(1)* inttoptr (i32 160 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %32 = load i32, i32 addrspace(1)* inttoptr (i32 184 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %33 = load i32, i32 addrspace(1)* inttoptr (i32 44 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul47 = mul nsw i32 %32, %33
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add48 = add nsw i32 %31, %mul47
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %add48, i32 addrspace(1)* inttoptr (i32 188 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %34 = call i1 @llvm.tpc.cmp.geq.i1.i32.i32.i1(i32 %add48, i32 0, i8 2, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %35 = load i32, i32 addrspace(1)* inttoptr (i32 140 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %36 = call i1 @llvm.tpc.cmp.less.i1.i32.i32.i1(i32 %add48, i32 %35, i8 2, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %37 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %34, i1 %36, i8 6, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %conv52 = zext i1 %37 to i8
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i8 %conv52, i8 addrspace(1)* inttoptr (i32 192 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond53
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge161 = phi i32 [ 0, %for.body46 ], [ %inc91, %for.inc90 ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge161, i32 addrspace(1)* inttoptr (i32 196 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %38 = load i32, i32 addrspace(1)* inttoptr (i32 12 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp54 = icmp slt i32 %storemerge161, %38
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp54, label %for.body56, label %for.end92
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %39 = load i32, i32 addrspace(1)* inttoptr (i32 168 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %40 = load i32, i32 addrspace(1)* inttoptr (i32 196 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %41 = load i32, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul57 = mul nsw i32 %40, %41
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add58 = add nsw i32 %39, %mul57
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %add58, i32 addrspace(1)* inttoptr (i32 200 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %42 = call i1 @llvm.tpc.cmp.geq.i1.i32.i32.i1(i32 %add58, i32 0, i8 2, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %43 = load i32, i32 addrspace(1)* inttoptr (i32 136 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %44 = call i1 @llvm.tpc.cmp.less.i1.i32.i32.i1(i32 %add58, i32 %43, i8 2, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %45 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %42, i1 %44, i8 6, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %conv63 = zext i1 %45 to i8
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i8 %conv63, i8 addrspace(1)* inttoptr (i32 204 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond64
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %storemerge162 = phi i32 [ 0, %for.body56 ], [ %inc, %for.inc ]
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %storemerge162, i32 addrspace(1)* inttoptr (i32 208 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %46 = load i32, i32 addrspace(1)* inttoptr (i32 8 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp65 = icmp slt i32 %storemerge162, %46
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br i1 %cmp65, label %for.body67, label %for.end
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %47 = load i32, i32 addrspace(1)* inttoptr (i32 176 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %48 = load i32, i32 addrspace(1)* inttoptr (i32 208 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %49 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul68 = mul nsw i32 %48, %49
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add69 = add nsw i32 %47, %mul68
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %add69, i32 addrspace(1)* inttoptr (i32 212 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %50 = call i1 @llvm.tpc.cmp.geq.i1.i32.i32.i1(i32 %add69, i32 0, i8 2, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %51 = load i32, i32 addrspace(1)* inttoptr (i32 132 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %52 = call i1 @llvm.tpc.cmp.less.i1.i32.i32.i1(i32 %add69, i32 %51, i8 2, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %53 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %50, i1 %52, i8 6, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %54 = load i8, i8 addrspace(1)* inttoptr (i32 204 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %tobool76 = icmp ne i8 %54, 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %55 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %53, i1 %tobool76, i8 6, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %56 = load i8, i8 addrspace(1)* inttoptr (i32 192 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %tobool78 = icmp ne i8 %56, 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %57 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %tobool78, i1 %55, i8 6, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %58 = load i8, i8 addrspace(1)* inttoptr (i32 144 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %tobool81 = icmp ne i8 %58, 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %59 = call i1 @llvm.tpc.or.i1.i1.i1.i1(i1 %tobool81, i1 %57, i8 6, i32 0, i1 undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %conv83 = zext i1 %59 to i8
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i8 %conv83, i8 addrspace(1)* inttoptr (i32 216 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %60 = load i32, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit = insertelement <5 x i32> undef, i32 %60, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %61 = load i32, i32 addrspace(1)* inttoptr (i32 212 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit84 = insertelement <5 x i32> %vecinit, i32 %61, i32 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %62 = load i32, i32 addrspace(1)* inttoptr (i32 200 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit85 = insertelement <5 x i32> %vecinit84, i32 %62, i32 2
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %63 = load i32, i32 addrspace(1)* inttoptr (i32 188 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit86 = insertelement <5 x i32> %vecinit85, i32 %63, i32 3
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %64 = load i32, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit87 = insertelement <5 x i32> %vecinit86, i32 %64, i32 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %65 = load i32, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %66 = load i8, i8 addrspace(1)* inttoptr (i32 216 to i8 addrspace(1)*), align 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %tobool88 = icmp ne i8 %66, 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %67 = call i32 @llvm.tpc.add.i32.i32.i32.i1(i32 %65, i32 1, i8 2, i32 1, i32 %65, i1 %tobool88, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store i32 %67, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %68 = call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecinit87, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %69 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %tobool89 = icmp ne i8 %66, 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %70 = call <64 x float> @llvm.tpc.add.v64f32.v64f32.v64f32.i1(<64 x float> %69, <64 x float> %68, i8 0, i32 0, <64 x float> %69, i1 %tobool89, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %70, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %71 = load i32, i32 addrspace(1)* inttoptr (i32 208 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %inc = add nsw i32 %71, 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond64
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc90
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %72 = load i32, i32 addrspace(1)* inttoptr (i32 196 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %inc91 = add nsw i32 %72, 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond53
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc93
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %73 = load i32, i32 addrspace(1)* inttoptr (i32 184 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %inc94 = add nsw i32 %73, 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond43
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %74 = load i32, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %75 = call float @llvm.tpc.convert.f32.i32.i1(i32 %74, i8 2, i32 0, float 0.000000e+00, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store float %75, float addrspace(1)* inttoptr (i32 220 to float addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %76 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %splat.splatinsert = insertelement <64 x float> undef, float %75, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> undef, <64 x i32> zeroinitializer
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %76, <64 x float> addrspace(2)* inttoptr (i32 1536 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %splat.splat, <64 x float> addrspace(2)* inttoptr (i32 1792 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %splat.splat, <64 x float> addrspace(2)* inttoptr (i32 1280 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %splat.splat, <64 x float> addrspace(2)* null, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %77 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> zeroinitializer, <64 x float> %splat.splat, <64 x float> %splat.splat, i8 0, i32 2816, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %77, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %78 = call <128 x i32> @llvm.tpc.get.lut.entry.v128i32.v64f32.i1(<64 x float> %77, i8 16, i8 0, i32 0, <128 x i32> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %79 = shufflevector <128 x i32> %78, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %80 = shufflevector <128 x i32> %78, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %.cast = bitcast <64 x i32> %80 to <64 x float>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %sub.i.i.i = fsub <64 x float> %77, %.cast
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %sub.i.i.i, <64 x float> addrspace(2)* inttoptr (i32 512 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %81 = call <64 x float> @llvm.tpc.lookup.1c.v64f32.v64i32(<64 x i32> %79, i32 129, i32 0, <64 x float> zeroinitializer, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %81, <64 x float> addrspace(2)* inttoptr (i32 768 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %82 = call <128 x float> @llvm.tpc.lookup.2c.v128f32.v64i32(<64 x i32> %79, i32 129, i32 0, <128 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %83 = shufflevector <128 x float> %82, <128 x float> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %84 = shufflevector <128 x float> %82, <128 x float> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %83, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %85 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 512 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %86 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %84, <64 x float> %85, i8 0, i32 0, <64 x float> %83, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %86, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %87 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 768 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 6 for instruction: %88 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %86, <64 x float> %85, i8 0, i32 0, <64 x float> %87, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %88, <64 x float> addrspace(2)* inttoptr (i32 768 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %88, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %.cast153 = bitcast <64 x float> %88 to <64 x i32>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %and.i.i.i = and <64 x i32> %.cast153, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %89 = bitcast <64 x float> addrspace(2)* null to <64 x i32> addrspace(2)*
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %90 = load <64 x i32>, <64 x i32> addrspace(2)* %89, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %and8.i.i.i = and <64 x i32> %90, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %sub9.i.i.i = sub nsw <64 x i32> %and.i.i.i, %and8.i.i.i
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x i32> %sub9.i.i.i, <64 x i32> addrspace(2)* inttoptr (i32 1024 to <64 x i32> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %.cast154 = bitcast <64 x i32> %sub9.i.i.i to <64 x float>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %.cast155 = bitcast <64 x i32> %90 to <64 x float>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %91 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %92 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v64f32.i1(<64 x float> %.cast154, <64 x float> %.cast155, <64 x float> %91, i8 0, i32 256, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %92, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %93 = load <64 x float>, <64 x float> addrspace(2)* null, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %94 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.f32.v64f32.v64f32.i1(<64 x float> %93, float 0.000000e+00, <64 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <64 x float> zeroinitializer, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %95 = load <64 x i32>, <64 x i32> addrspace(2)* inttoptr (i32 1024 to <64 x i32> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %96 = call <64 x float> @llvm.tpc.sel.leq.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %95, i32 -1065353216, <64 x float> %94, <64 x float> %92, i8 2, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %96, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %97 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1280 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %98 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %97, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %99 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %96, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %100 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %98, <64 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <64 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <64 x float> %99, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %101 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %98, <64 x float> <float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000>, <64 x float> zeroinitializer, <64 x float> %100, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %.cast156 = bitcast <64 x float> %98 to <64 x i32>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %102 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %.cast156, i32 2139095040, <64 x float> <float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000>, <64 x float> %101, i8 3, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %103 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1280 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %104 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v64f32.i1(<64 x float> %102, <64 x float> %103, <64 x float> %102, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %mul.i = fmul <64 x float> %76, %104
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %mul.i, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <64 x float> addrspace(2)* inttoptr (i32 2304 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> <float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <64 x float> addrspace(2)* inttoptr (i32 2816 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %105 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1536 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %106 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %105, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %106, <64 x float> addrspace(2)* inttoptr (i32 3072 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %107 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1792 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %108 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %107, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %108, <64 x float> addrspace(2)* inttoptr (i32 3328 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %109 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2816 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %110 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %111 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %112 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %106, <64 x float> %109, <64 x float> %110, <64 x float> %111, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %112, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %113 = bitcast <64 x float> addrspace(2)* inttoptr (i32 1536 to <64 x float> addrspace(2)*) to <64 x i32> addrspace(2)*
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %114 = load <64 x i32>, <64 x i32> addrspace(2)* %113, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %115 = bitcast <64 x float> addrspace(2)* inttoptr (i32 1792 to <64 x float> addrspace(2)*) to <64 x i32> addrspace(2)*
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %116 = load <64 x i32>, <64 x i32> addrspace(2)* %115, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %shr.i157 = xor <64 x i32> %114, %116
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %xor.i158 = and <64 x i32> %shr.i157, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %117 = bitcast <64 x float> addrspace(2)* inttoptr (i32 3584 to <64 x float> addrspace(2)*) to <64 x i32> addrspace(2)*
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x i32> %xor.i158, <64 x i32> addrspace(2)* %117, align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: %.cast160 = bitcast <64 x i32> %xor.i158 to <64 x float>
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %118 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2816 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %119 = call <64 x float> @llvm.tpc.or.v64f32.v64f32.v64f32.i1(<64 x float> %.cast160, <64 x float> %118, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %120 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3072 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %121 = call <256 x i1> @llvm.tpc.cmp.eq.v256i1.v64f32.v64f32.i1(<64 x float> %120, <64 x float> %118, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %122 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3328 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %123 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %124 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %125 = call <64 x float> @llvm.tpc.sel.eq.v64f32.v64f32.v64f32.v64f32.v64f32.v256i1(<64 x float> %122, <64 x float> %118, <64 x float> %123, <64 x float> %119, i8 0, i32 0, <64 x float> %124, <256 x i1> %121, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %125, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %126 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3072 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %127 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2304 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 3 for instruction: %128 = call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.v64f32.i1(<64 x float> %126, <64 x float> %127, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %129 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3328 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %130 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %131 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3584 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %132 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %133 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.v256i1(<64 x float> %129, <64 x float> %127, <64 x float> %130, <64 x float> %131, i8 0, i32 0, <64 x float> %132, <256 x i1> %128, i1 false) #4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %133, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %133, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %134 = load float, float addrspace(1)* inttoptr (i32 220 to float addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %cmp97 = fcmp oeq float %134, 0.000000e+00
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %135 = call <64 x float> @llvm.tpc.mov.v64f32.f32.i1(float 0.000000e+00, i8 0, i32 0, <64 x float> %133, i1 %cmp97, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: store <64 x float> %135, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %136 = load i32, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit99 = insertelement <5 x i32> undef, i32 %136, i32 0
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %137 = load i32, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit100 = insertelement <5 x i32> %vecinit99, i32 %137, i32 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %138 = load i32, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit101 = insertelement <5 x i32> %vecinit100, i32 %138, i32 2
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %139 = load i32, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit102 = insertelement <5 x i32> %vecinit101, i32 %139, i32 3
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %140 = load i32, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %vecinit103 = insertelement <5 x i32> %vecinit102, i32 %140, i32 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %141 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecinit103, i8 1, <64 x float> %141, i32 0, i1 true, i1 false)
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc104
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %142 = load i32, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add105 = add nsw i32 %142, 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond37
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc107
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %143 = load i32, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add108 = add nsw i32 %143, 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond31
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc110
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %144 = load i32, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add111 = add nsw i32 %144, 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond26
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc113
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %145 = load i32, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add114 = add nsw i32 %145, 1
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond22
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.inc116
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %146 = load i32, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %add117 = add nsw i32 %146, 64
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: br label %for.cond
; LATENCY-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
entry:
  store i32 %pad_w, i32 addrspace(1)* null, align 4
  store i32 %pad_h, i32 addrspace(1)* inttoptr (i32 4 to i32 addrspace(1)*), align 4
  store i32 %kernel_w, i32 addrspace(1)* inttoptr (i32 8 to i32 addrspace(1)*), align 4
  store i32 %kernel_h, i32 addrspace(1)* inttoptr (i32 12 to i32 addrspace(1)*), align 4
  store i32 %stride_w, i32 addrspace(1)* inttoptr (i32 16 to i32 addrspace(1)*), align 4
  store i32 %stride_h, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
  store i32 %dilation_w, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  store i32 %dilation_h, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
  store i32 %pad_d, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
  store i32 %kernel_d, i32 addrspace(1)* inttoptr (i32 36 to i32 addrspace(1)*), align 4
  store i32 %stride_d, i32 addrspace(1)* inttoptr (i32 40 to i32 addrspace(1)*), align 4
  store i32 %dilation_d, i32 addrspace(1)* inttoptr (i32 44 to i32 addrspace(1)*), align 4
  store i32 %include_padding, i32 addrspace(1)* inttoptr (i32 48 to i32 addrspace(1)*), align 4
  %0 = call <5 x i32> @llvm.tpc.get.index.space.offset()
  store <5 x i32> %0, <5 x i32> addrspace(1)* inttoptr (i32 52 to <5 x i32> addrspace(1)*), align 4
  %1 = call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  store <5 x i32> %add, <5 x i32> addrspace(1)* inttoptr (i32 72 to <5 x i32> addrspace(1)*), align 4
  %vecext = extractelement <5 x i32> %0, i32 0
  %mul = shl nsw i32 %vecext, 6
  store i32 %mul, i32 addrspace(1)* inttoptr (i32 92 to i32 addrspace(1)*), align 4
  %vecext1 = extractelement <5 x i32> %add, i32 0
  %mul2 = shl nsw i32 %vecext1, 6
  store i32 %mul2, i32 addrspace(1)* inttoptr (i32 96 to i32 addrspace(1)*), align 4
  %2 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 52 to <5 x i32> addrspace(1)*), align 4
  %vecext3 = extractelement <5 x i32> %2, i32 1
  store i32 %vecext3, i32 addrspace(1)* inttoptr (i32 100 to i32 addrspace(1)*), align 4
  %3 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 72 to <5 x i32> addrspace(1)*), align 4
  %vecext5 = extractelement <5 x i32> %3, i32 1
  store i32 %vecext5, i32 addrspace(1)* inttoptr (i32 104 to i32 addrspace(1)*), align 4
  %vecext7 = extractelement <5 x i32> %2, i32 2
  store i32 %vecext7, i32 addrspace(1)* inttoptr (i32 108 to i32 addrspace(1)*), align 4
  %vecext9 = extractelement <5 x i32> %3, i32 2
  store i32 %vecext9, i32 addrspace(1)* inttoptr (i32 112 to i32 addrspace(1)*), align 4
  %4 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 52 to <5 x i32> addrspace(1)*), align 4
  %vecext11 = extractelement <5 x i32> %4, i32 3
  store i32 %vecext11, i32 addrspace(1)* inttoptr (i32 116 to i32 addrspace(1)*), align 4
  %5 = load <5 x i32>, <5 x i32> addrspace(1)* inttoptr (i32 72 to <5 x i32> addrspace(1)*), align 4
  %vecext13 = extractelement <5 x i32> %5, i32 3
  store i32 %vecext13, i32 addrspace(1)* inttoptr (i32 120 to i32 addrspace(1)*), align 4
  %vecext15 = extractelement <5 x i32> %4, i32 4
  store i32 %vecext15, i32 addrspace(1)* inttoptr (i32 124 to i32 addrspace(1)*), align 4
  %vecext17 = extractelement <5 x i32> %5, i32 4
  store i32 %vecext17, i32 addrspace(1)* inttoptr (i32 128 to i32 addrspace(1)*), align 4
  %6 = call i32 @llvm.tpc.ld.l.i32(i32 1048, i32 1, i32 undef, i1 true, i1 false) #4
  store i32 %6, i32 addrspace(1)* inttoptr (i32 132 to i32 addrspace(1)*), align 4
  %7 = call i32 @llvm.tpc.ld.l.i32(i32 1056, i32 1, i32 undef, i1 true, i1 false) #4
  store i32 %7, i32 addrspace(1)* inttoptr (i32 136 to i32 addrspace(1)*), align 4
  %8 = call i32 @llvm.tpc.ld.l.i32(i32 1064, i32 1, i32 undef, i1 true, i1 false) #4
  store i32 %8, i32 addrspace(1)* inttoptr (i32 140 to i32 addrspace(1)*), align 4
  %9 = load i32, i32 addrspace(1)* inttoptr (i32 48 to i32 addrspace(1)*), align 4
  %10 = call i1 @llvm.tpc.cmp.eq.i1.i32.i32.i1(i32 %9, i32 1, i8 2, i32 0, i1 undef, i1 true, i1 false)
  %conv = zext i1 %10 to i8
  store i8 %conv, i8 addrspace(1)* inttoptr (i32 144 to i8 addrspace(1)*), align 1
  %11 = load i32, i32 addrspace(1)* inttoptr (i32 92 to i32 addrspace(1)*), align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc116, %entry
  %storemerge = phi i32 [ %11, %entry ], [ %add117, %for.inc116 ]
  store i32 %storemerge, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
  %12 = load i32, i32 addrspace(1)* inttoptr (i32 96 to i32 addrspace(1)*), align 4
  %cmp = icmp slt i32 %storemerge, %12
  br i1 %cmp, label %for.body, label %for.end118

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32 addrspace(1)* inttoptr (i32 124 to i32 addrspace(1)*), align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc113, %for.body
  %storemerge144 = phi i32 [ %13, %for.body ], [ %add114, %for.inc113 ]
  store i32 %storemerge144, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
  %14 = load i32, i32 addrspace(1)* inttoptr (i32 128 to i32 addrspace(1)*), align 4
  %cmp23 = icmp slt i32 %storemerge144, %14
  br i1 %cmp23, label %for.body25, label %for.end115

for.body25:                                       ; preds = %for.cond22
  %15 = load i32, i32 addrspace(1)* inttoptr (i32 116 to i32 addrspace(1)*), align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc110, %for.body25
  %storemerge145 = phi i32 [ %15, %for.body25 ], [ %add111, %for.inc110 ]
  store i32 %storemerge145, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
  %16 = load i32, i32 addrspace(1)* inttoptr (i32 120 to i32 addrspace(1)*), align 4
  %cmp27 = icmp slt i32 %storemerge145, %16
  br i1 %cmp27, label %for.body29, label %for.end112

for.body29:                                       ; preds = %for.cond26
  %17 = load i32, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
  %18 = load i32, i32 addrspace(1)* inttoptr (i32 40 to i32 addrspace(1)*), align 4
  %mul30 = mul nsw i32 %17, %18
  %19 = load i32, i32 addrspace(1)* inttoptr (i32 32 to i32 addrspace(1)*), align 4
  %sub = sub nsw i32 %mul30, %19
  store i32 %sub, i32 addrspace(1)* inttoptr (i32 160 to i32 addrspace(1)*), align 4
  %20 = load i32, i32 addrspace(1)* inttoptr (i32 108 to i32 addrspace(1)*), align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc107, %for.body29
  %storemerge146 = phi i32 [ %20, %for.body29 ], [ %add108, %for.inc107 ]
  store i32 %storemerge146, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
  %21 = load i32, i32 addrspace(1)* inttoptr (i32 112 to i32 addrspace(1)*), align 4
  %cmp32 = icmp slt i32 %storemerge146, %21
  br i1 %cmp32, label %for.body34, label %for.end109

for.body34:                                       ; preds = %for.cond31
  %22 = load i32, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
  %23 = load i32, i32 addrspace(1)* inttoptr (i32 20 to i32 addrspace(1)*), align 4
  %mul35 = mul nsw i32 %22, %23
  %24 = load i32, i32 addrspace(1)* inttoptr (i32 4 to i32 addrspace(1)*), align 4
  %sub36 = sub nsw i32 %mul35, %24
  store i32 %sub36, i32 addrspace(1)* inttoptr (i32 168 to i32 addrspace(1)*), align 4
  %25 = load i32, i32 addrspace(1)* inttoptr (i32 100 to i32 addrspace(1)*), align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc104, %for.body34
  %storemerge147 = phi i32 [ %25, %for.body34 ], [ %add105, %for.inc104 ]
  store i32 %storemerge147, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
  %26 = load i32, i32 addrspace(1)* inttoptr (i32 104 to i32 addrspace(1)*), align 4
  %cmp38 = icmp slt i32 %storemerge147, %26
  br i1 %cmp38, label %for.body40, label %for.end106

for.body40:                                       ; preds = %for.cond37
  %27 = load i32, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
  %28 = load i32, i32 addrspace(1)* inttoptr (i32 16 to i32 addrspace(1)*), align 4
  %mul41 = mul nsw i32 %27, %28
  %29 = load i32, i32 addrspace(1)* null, align 4
  %sub42 = sub nsw i32 %mul41, %29
  store i32 %sub42, i32 addrspace(1)* inttoptr (i32 176 to i32 addrspace(1)*), align 4
  store i32 0, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
  store <64 x float> zeroinitializer, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc93, %for.body40
  %storemerge148 = phi i32 [ 0, %for.body40 ], [ %inc94, %for.inc93 ]
  store i32 %storemerge148, i32 addrspace(1)* inttoptr (i32 184 to i32 addrspace(1)*), align 4
  %30 = load i32, i32 addrspace(1)* inttoptr (i32 36 to i32 addrspace(1)*), align 4
  %cmp44 = icmp slt i32 %storemerge148, %30
  br i1 %cmp44, label %for.body46, label %for.end95

for.body46:                                       ; preds = %for.cond43
  %31 = load i32, i32 addrspace(1)* inttoptr (i32 160 to i32 addrspace(1)*), align 4
  %32 = load i32, i32 addrspace(1)* inttoptr (i32 184 to i32 addrspace(1)*), align 4
  %33 = load i32, i32 addrspace(1)* inttoptr (i32 44 to i32 addrspace(1)*), align 4
  %mul47 = mul nsw i32 %32, %33
  %add48 = add nsw i32 %31, %mul47
  store i32 %add48, i32 addrspace(1)* inttoptr (i32 188 to i32 addrspace(1)*), align 4
  %34 = call i1 @llvm.tpc.cmp.geq.i1.i32.i32.i1(i32 %add48, i32 0, i8 2, i32 0, i1 undef, i1 true, i1 false)
  %35 = load i32, i32 addrspace(1)* inttoptr (i32 140 to i32 addrspace(1)*), align 4
  %36 = call i1 @llvm.tpc.cmp.less.i1.i32.i32.i1(i32 %add48, i32 %35, i8 2, i32 0, i1 undef, i1 true, i1 false)
  %37 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %34, i1 %36, i8 6, i32 0, i1 undef, i1 true, i1 false)
  %conv52 = zext i1 %37 to i8
  store i8 %conv52, i8 addrspace(1)* inttoptr (i32 192 to i8 addrspace(1)*), align 1
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc90, %for.body46
  %storemerge161 = phi i32 [ 0, %for.body46 ], [ %inc91, %for.inc90 ]
  store i32 %storemerge161, i32 addrspace(1)* inttoptr (i32 196 to i32 addrspace(1)*), align 4
  %38 = load i32, i32 addrspace(1)* inttoptr (i32 12 to i32 addrspace(1)*), align 4
  %cmp54 = icmp slt i32 %storemerge161, %38
  br i1 %cmp54, label %for.body56, label %for.end92

for.body56:                                       ; preds = %for.cond53
  %39 = load i32, i32 addrspace(1)* inttoptr (i32 168 to i32 addrspace(1)*), align 4
  %40 = load i32, i32 addrspace(1)* inttoptr (i32 196 to i32 addrspace(1)*), align 4
  %41 = load i32, i32 addrspace(1)* inttoptr (i32 28 to i32 addrspace(1)*), align 4
  %mul57 = mul nsw i32 %40, %41
  %add58 = add nsw i32 %39, %mul57
  store i32 %add58, i32 addrspace(1)* inttoptr (i32 200 to i32 addrspace(1)*), align 4
  %42 = call i1 @llvm.tpc.cmp.geq.i1.i32.i32.i1(i32 %add58, i32 0, i8 2, i32 0, i1 undef, i1 true, i1 false)
  %43 = load i32, i32 addrspace(1)* inttoptr (i32 136 to i32 addrspace(1)*), align 4
  %44 = call i1 @llvm.tpc.cmp.less.i1.i32.i32.i1(i32 %add58, i32 %43, i8 2, i32 0, i1 undef, i1 true, i1 false)
  %45 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %42, i1 %44, i8 6, i32 0, i1 undef, i1 true, i1 false)
  %conv63 = zext i1 %45 to i8
  store i8 %conv63, i8 addrspace(1)* inttoptr (i32 204 to i8 addrspace(1)*), align 1
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc, %for.body56
  %storemerge162 = phi i32 [ 0, %for.body56 ], [ %inc, %for.inc ]
  store i32 %storemerge162, i32 addrspace(1)* inttoptr (i32 208 to i32 addrspace(1)*), align 4
  %46 = load i32, i32 addrspace(1)* inttoptr (i32 8 to i32 addrspace(1)*), align 4
  %cmp65 = icmp slt i32 %storemerge162, %46
  br i1 %cmp65, label %for.body67, label %for.end

for.body67:                                       ; preds = %for.cond64
  %47 = load i32, i32 addrspace(1)* inttoptr (i32 176 to i32 addrspace(1)*), align 4
  %48 = load i32, i32 addrspace(1)* inttoptr (i32 208 to i32 addrspace(1)*), align 4
  %49 = load i32, i32 addrspace(1)* inttoptr (i32 24 to i32 addrspace(1)*), align 4
  %mul68 = mul nsw i32 %48, %49
  %add69 = add nsw i32 %47, %mul68
  store i32 %add69, i32 addrspace(1)* inttoptr (i32 212 to i32 addrspace(1)*), align 4
  %50 = call i1 @llvm.tpc.cmp.geq.i1.i32.i32.i1(i32 %add69, i32 0, i8 2, i32 0, i1 undef, i1 true, i1 false)
  %51 = load i32, i32 addrspace(1)* inttoptr (i32 132 to i32 addrspace(1)*), align 4
  %52 = call i1 @llvm.tpc.cmp.less.i1.i32.i32.i1(i32 %add69, i32 %51, i8 2, i32 0, i1 undef, i1 true, i1 false)
  %53 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %50, i1 %52, i8 6, i32 0, i1 undef, i1 true, i1 false)
  %54 = load i8, i8 addrspace(1)* inttoptr (i32 204 to i8 addrspace(1)*), align 1
  %tobool76 = icmp ne i8 %54, 0
  %55 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %53, i1 %tobool76, i8 6, i32 0, i1 undef, i1 true, i1 false)
  %56 = load i8, i8 addrspace(1)* inttoptr (i32 192 to i8 addrspace(1)*), align 1
  %tobool78 = icmp ne i8 %56, 0
  %57 = call i1 @llvm.tpc.and.i1.i1.i1.i1(i1 %tobool78, i1 %55, i8 6, i32 0, i1 undef, i1 true, i1 false)
  %58 = load i8, i8 addrspace(1)* inttoptr (i32 144 to i8 addrspace(1)*), align 1
  %tobool81 = icmp ne i8 %58, 0
  %59 = call i1 @llvm.tpc.or.i1.i1.i1.i1(i1 %tobool81, i1 %57, i8 6, i32 0, i1 undef, i1 true, i1 false)
  %conv83 = zext i1 %59 to i8
  store i8 %conv83, i8 addrspace(1)* inttoptr (i32 216 to i8 addrspace(1)*), align 1
  %60 = load i32, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
  %vecinit = insertelement <5 x i32> undef, i32 %60, i32 0
  %61 = load i32, i32 addrspace(1)* inttoptr (i32 212 to i32 addrspace(1)*), align 4
  %vecinit84 = insertelement <5 x i32> %vecinit, i32 %61, i32 1
  %62 = load i32, i32 addrspace(1)* inttoptr (i32 200 to i32 addrspace(1)*), align 4
  %vecinit85 = insertelement <5 x i32> %vecinit84, i32 %62, i32 2
  %63 = load i32, i32 addrspace(1)* inttoptr (i32 188 to i32 addrspace(1)*), align 4
  %vecinit86 = insertelement <5 x i32> %vecinit85, i32 %63, i32 3
  %64 = load i32, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
  %vecinit87 = insertelement <5 x i32> %vecinit86, i32 %64, i32 4
  %65 = load i32, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
  %66 = load i8, i8 addrspace(1)* inttoptr (i32 216 to i8 addrspace(1)*), align 1
  %tobool88 = icmp ne i8 %66, 0
  %67 = call i32 @llvm.tpc.add.i32.i32.i32.i1(i32 %65, i32 1, i8 2, i32 1, i32 %65, i1 %tobool88, i1 false)
  store i32 %67, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
  %68 = call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecinit87, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %69 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
  %tobool89 = icmp ne i8 %66, 0
  %70 = call <64 x float> @llvm.tpc.add.v64f32.v64f32.v64f32.i1(<64 x float> %69, <64 x float> %68, i8 0, i32 0, <64 x float> %69, i1 %tobool89, i1 false)
  store <64 x float> %70, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
  br label %for.inc

for.inc:                                          ; preds = %for.body67
  %71 = load i32, i32 addrspace(1)* inttoptr (i32 208 to i32 addrspace(1)*), align 4
  %inc = add nsw i32 %71, 1
  br label %for.cond64

for.end:                                          ; preds = %for.cond64
  br label %for.inc90

for.inc90:                                        ; preds = %for.end
  %72 = load i32, i32 addrspace(1)* inttoptr (i32 196 to i32 addrspace(1)*), align 4
  %inc91 = add nsw i32 %72, 1
  br label %for.cond53

for.end92:                                        ; preds = %for.cond53
  br label %for.inc93

for.inc93:                                        ; preds = %for.end92
  %73 = load i32, i32 addrspace(1)* inttoptr (i32 184 to i32 addrspace(1)*), align 4
  %inc94 = add nsw i32 %73, 1
  br label %for.cond43

for.end95:                                        ; preds = %for.cond43
  %74 = load i32, i32 addrspace(1)* inttoptr (i32 180 to i32 addrspace(1)*), align 4
  %75 = call float @llvm.tpc.convert.f32.i32.i1(i32 %74, i8 2, i32 0, float 0.000000e+00, i1 true, i1 false)
  store float %75, float addrspace(1)* inttoptr (i32 220 to float addrspace(1)*), align 4
  %76 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
  %splat.splatinsert = insertelement <64 x float> undef, float %75, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> undef, <64 x i32> zeroinitializer
  store <64 x float> %76, <64 x float> addrspace(2)* inttoptr (i32 1536 to <64 x float> addrspace(2)*), align 256
  store <64 x float> %splat.splat, <64 x float> addrspace(2)* inttoptr (i32 1792 to <64 x float> addrspace(2)*), align 256
  store <64 x float> %splat.splat, <64 x float> addrspace(2)* inttoptr (i32 1280 to <64 x float> addrspace(2)*), align 256
  store <64 x float> %splat.splat, <64 x float> addrspace(2)* null, align 256
  %77 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> zeroinitializer, <64 x float> %splat.splat, <64 x float> %splat.splat, i8 0, i32 2816, <64 x float> undef, i1 true, i1 false) #4
  store <64 x float> %77, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
  %78 = call <128 x i32> @llvm.tpc.get.lut.entry.v128i32.v64f32.i1(<64 x float> %77, i8 16, i8 0, i32 0, <128 x i32> undef, i1 true, i1 false) #4
  %79 = shufflevector <128 x i32> %78, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %80 = shufflevector <128 x i32> %78, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %.cast = bitcast <64 x i32> %80 to <64 x float>
  %sub.i.i.i = fsub <64 x float> %77, %.cast
  store <64 x float> %sub.i.i.i, <64 x float> addrspace(2)* inttoptr (i32 512 to <64 x float> addrspace(2)*), align 256
  %81 = call <64 x float> @llvm.tpc.lookup.1c.v64f32.v64i32(<64 x i32> %79, i32 129, i32 0, <64 x float> zeroinitializer, i1 true, i1 false) #4
  store <64 x float> %81, <64 x float> addrspace(2)* inttoptr (i32 768 to <64 x float> addrspace(2)*), align 256
  %82 = call <128 x float> @llvm.tpc.lookup.2c.v128f32.v64i32(<64 x i32> %79, i32 129, i32 0, <128 x float> undef, i1 true, i1 false) #4
  %83 = shufflevector <128 x float> %82, <128 x float> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %84 = shufflevector <128 x float> %82, <128 x float> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  store <64 x float> %83, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
  %85 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 512 to <64 x float> addrspace(2)*), align 256
  %86 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %84, <64 x float> %85, i8 0, i32 0, <64 x float> %83, i1 true, i1 false) #4
  store <64 x float> %86, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
  %87 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 768 to <64 x float> addrspace(2)*), align 256
  %88 = call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %86, <64 x float> %85, i8 0, i32 0, <64 x float> %87, i1 true, i1 false) #4
  store <64 x float> %88, <64 x float> addrspace(2)* inttoptr (i32 768 to <64 x float> addrspace(2)*), align 256
  store <64 x float> %88, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
  %.cast153 = bitcast <64 x float> %88 to <64 x i32>
  %and.i.i.i = and <64 x i32> %.cast153, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %89 = bitcast <64 x float> addrspace(2)* null to <64 x i32> addrspace(2)*
  %90 = load <64 x i32>, <64 x i32> addrspace(2)* %89, align 256
  %and8.i.i.i = and <64 x i32> %90, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %sub9.i.i.i = sub nsw <64 x i32> %and.i.i.i, %and8.i.i.i
  store <64 x i32> %sub9.i.i.i, <64 x i32> addrspace(2)* inttoptr (i32 1024 to <64 x i32> addrspace(2)*), align 256
  %.cast154 = bitcast <64 x i32> %sub9.i.i.i to <64 x float>
  %.cast155 = bitcast <64 x i32> %90 to <64 x float>
  %91 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
  %92 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v64f32.i1(<64 x float> %.cast154, <64 x float> %.cast155, <64 x float> %91, i8 0, i32 256, <64 x float> undef, i1 true, i1 false) #4
  store <64 x float> %92, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
  %93 = load <64 x float>, <64 x float> addrspace(2)* null, align 256
  %94 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.f32.v64f32.v64f32.i1(<64 x float> %93, float 0.000000e+00, <64 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <64 x float> zeroinitializer, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %95 = load <64 x i32>, <64 x i32> addrspace(2)* inttoptr (i32 1024 to <64 x i32> addrspace(2)*), align 256
  %96 = call <64 x float> @llvm.tpc.sel.leq.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %95, i32 -1065353216, <64 x float> %94, <64 x float> %92, i8 2, i32 0, <64 x float> undef, i1 true, i1 false) #4
  store <64 x float> %96, <64 x float> addrspace(2)* inttoptr (i32 256 to <64 x float> addrspace(2)*), align 256
  %97 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1280 to <64 x float> addrspace(2)*), align 256
  %98 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %97, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
  %99 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %96, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
  %100 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %98, <64 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <64 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <64 x float> %99, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %101 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %98, <64 x float> <float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000, float 0x47EFFFFFE0000000>, <64 x float> zeroinitializer, <64 x float> %100, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %.cast156 = bitcast <64 x float> %98 to <64 x i32>
  %102 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %.cast156, i32 2139095040, <64 x float> <float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000>, <64 x float> %101, i8 3, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %103 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1280 to <64 x float> addrspace(2)*), align 256
  %104 = call <64 x float> @llvm.tpc.form.fp.num.v64f32.v64f32.i1(<64 x float> %102, <64 x float> %103, <64 x float> %102, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %mul.i = fmul <64 x float> %76, %104
  store <64 x float> %mul.i, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
  store <64 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <64 x float> addrspace(2)* inttoptr (i32 2304 to <64 x float> addrspace(2)*), align 256
  store <64 x float> <float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
  store <64 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <64 x float> addrspace(2)* inttoptr (i32 2816 to <64 x float> addrspace(2)*), align 256
  %105 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1536 to <64 x float> addrspace(2)*), align 256
  %106 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %105, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
  store <64 x float> %106, <64 x float> addrspace(2)* inttoptr (i32 3072 to <64 x float> addrspace(2)*), align 256
  %107 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 1792 to <64 x float> addrspace(2)*), align 256
  %108 = call <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float> %107, i8 0, i32 512, <64 x float> undef, i1 true, i1 false) #4
  store <64 x float> %108, <64 x float> addrspace(2)* inttoptr (i32 3328 to <64 x float> addrspace(2)*), align 256
  %109 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2816 to <64 x float> addrspace(2)*), align 256
  %110 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
  %111 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
  %112 = call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %106, <64 x float> %109, <64 x float> %110, <64 x float> %111, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
  store <64 x float> %112, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
  %113 = bitcast <64 x float> addrspace(2)* inttoptr (i32 1536 to <64 x float> addrspace(2)*) to <64 x i32> addrspace(2)*
  %114 = load <64 x i32>, <64 x i32> addrspace(2)* %113, align 256
  %115 = bitcast <64 x float> addrspace(2)* inttoptr (i32 1792 to <64 x float> addrspace(2)*) to <64 x i32> addrspace(2)*
  %116 = load <64 x i32>, <64 x i32> addrspace(2)* %115, align 256
  %shr.i157 = xor <64 x i32> %114, %116
  %xor.i158 = and <64 x i32> %shr.i157, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %117 = bitcast <64 x float> addrspace(2)* inttoptr (i32 3584 to <64 x float> addrspace(2)*) to <64 x i32> addrspace(2)*
  store <64 x i32> %xor.i158, <64 x i32> addrspace(2)* %117, align 256
  %.cast160 = bitcast <64 x i32> %xor.i158 to <64 x float>
  %118 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2816 to <64 x float> addrspace(2)*), align 256
  %119 = call <64 x float> @llvm.tpc.or.v64f32.v64f32.v64f32.i1(<64 x float> %.cast160, <64 x float> %118, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %120 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3072 to <64 x float> addrspace(2)*), align 256
  %121 = call <256 x i1> @llvm.tpc.cmp.eq.v256i1.v64f32.v64f32.i1(<64 x float> %120, <64 x float> %118, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false) #4
  %122 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3328 to <64 x float> addrspace(2)*), align 256
  %123 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
  %124 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
  %125 = call <64 x float> @llvm.tpc.sel.eq.v64f32.v64f32.v64f32.v64f32.v64f32.v256i1(<64 x float> %122, <64 x float> %118, <64 x float> %123, <64 x float> %119, i8 0, i32 0, <64 x float> %124, <256 x i1> %121, i1 false) #4
  store <64 x float> %125, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
  %126 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3072 to <64 x float> addrspace(2)*), align 256
  %127 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2304 to <64 x float> addrspace(2)*), align 256
  %128 = call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.v64f32.i1(<64 x float> %126, <64 x float> %127, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false) #4
  %129 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3328 to <64 x float> addrspace(2)*), align 256
  %130 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2560 to <64 x float> addrspace(2)*), align 256
  %131 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3584 to <64 x float> addrspace(2)*), align 256
  %132 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
  %133 = call <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.v256i1(<64 x float> %129, <64 x float> %127, <64 x float> %130, <64 x float> %131, i8 0, i32 0, <64 x float> %132, <256 x i1> %128, i1 false) #4
  store <64 x float> %133, <64 x float> addrspace(2)* inttoptr (i32 2048 to <64 x float> addrspace(2)*), align 256
  store <64 x float> %133, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
  %134 = load float, float addrspace(1)* inttoptr (i32 220 to float addrspace(1)*), align 4
  %cmp97 = fcmp oeq float %134, 0.000000e+00
  %135 = call <64 x float> @llvm.tpc.mov.v64f32.f32.i1(float 0.000000e+00, i8 0, i32 0, <64 x float> %133, i1 %cmp97, i1 false)
  store <64 x float> %135, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
  %136 = load i32, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
  %vecinit99 = insertelement <5 x i32> undef, i32 %136, i32 0
  %137 = load i32, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
  %vecinit100 = insertelement <5 x i32> %vecinit99, i32 %137, i32 1
  %138 = load i32, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
  %vecinit101 = insertelement <5 x i32> %vecinit100, i32 %138, i32 2
  %139 = load i32, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
  %vecinit102 = insertelement <5 x i32> %vecinit101, i32 %139, i32 3
  %140 = load i32, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
  %vecinit103 = insertelement <5 x i32> %vecinit102, i32 %140, i32 4
  %141 = load <64 x float>, <64 x float> addrspace(2)* inttoptr (i32 3840 to <64 x float> addrspace(2)*), align 256
  call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecinit103, i8 1, <64 x float> %141, i32 0, i1 true, i1 false)
  br label %for.inc104

for.inc104:                                       ; preds = %for.end95
  %142 = load i32, i32 addrspace(1)* inttoptr (i32 172 to i32 addrspace(1)*), align 4
  %add105 = add nsw i32 %142, 1
  br label %for.cond37

for.end106:                                       ; preds = %for.cond37
  br label %for.inc107

for.inc107:                                       ; preds = %for.end106
  %143 = load i32, i32 addrspace(1)* inttoptr (i32 164 to i32 addrspace(1)*), align 4
  %add108 = add nsw i32 %143, 1
  br label %for.cond31

for.end109:                                       ; preds = %for.cond31
  br label %for.inc110

for.inc110:                                       ; preds = %for.end109
  %144 = load i32, i32 addrspace(1)* inttoptr (i32 156 to i32 addrspace(1)*), align 4
  %add111 = add nsw i32 %144, 1
  br label %for.cond26

for.end112:                                       ; preds = %for.cond26
  br label %for.inc113

for.inc113:                                       ; preds = %for.end112
  %145 = load i32, i32 addrspace(1)* inttoptr (i32 152 to i32 addrspace(1)*), align 4
  %add114 = add nsw i32 %145, 1
  br label %for.cond22

for.end115:                                       ; preds = %for.cond22
  br label %for.inc116

for.inc116:                                       ; preds = %for.end115
  %146 = load i32, i32 addrspace(1)* inttoptr (i32 148 to i32 addrspace(1)*), align 4
  %add117 = add nsw i32 %146, 64
  br label %for.cond

for.end118:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare i1 @llvm.tpc.cmp.eq.i1.i32.i32.i1(i32, i32, i8, i32, i1, i1, i1) #1

; Function Attrs: nounwind readnone
declare i1 @llvm.tpc.cmp.geq.i1.i32.i32.i1(i32, i32, i8, i32, i1, i1, i1) #1

; Function Attrs: nounwind readnone
declare i1 @llvm.tpc.cmp.less.i1.i32.i32.i1(i32, i32, i8, i32, i1, i1, i1) #1

; Function Attrs: nounwind readnone
declare i1 @llvm.tpc.and.i1.i1.i1.i1(i1, i1, i8, i32, i1, i1, i1) #1

; Function Attrs: nounwind readnone
declare i1 @llvm.tpc.or.i1.i1.i1.i1(i1, i1, i8, i32, i1, i1, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.tpc.add.i32.i32.i32.i1(i32, i32, i8, i32, i32, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.add.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare float @llvm.tpc.convert.f32.i32.i1(i32, i8, i32, float, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mov.v64f32.f32.i1(float, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readonly
declare i32 @llvm.tpc.ld.l.i32(i32, i32, i32, i1, i1) #3

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.abs.v64f32.v64f32.i1(<64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.or.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <256 x i1> @llvm.tpc.cmp.eq.v256i1.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <256 x i1>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.eq.v64f32.v64f32.v64f32.v64f32.v64f32.v256i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, <256 x i1>, i1) #1

; Function Attrs: nounwind readnone
declare <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <256 x i1>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.v256i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, <256 x i1>, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32>, i32, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x i32> @llvm.tpc.get.lut.entry.v128i32.v64f32.i1(<64 x float>, i8, i8, i32, <128 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.lookup.1c.v64f32.v64i32(<64 x i32>, i32, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x float> @llvm.tpc.lookup.2c.v128f32.v64i32(<64 x i32>, i32, i32, <128 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.less.v64f32.v64f32.f32.v64f32.v64f32.i1(<64 x float>, float, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.leq.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32>, i32, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

attributes #0 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind readonly }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (ssh://gerrit:29418/tpc_clang2 80a0a209e04a31e8f0eacc32134ef0a097b5a0c3) (ssh://gerrit:29418/tpc_llvm2 2278757240f4a1661b39e040250ba3e4baadfdab)"}
!2 = !{i32 224}
!3 = !{i32 4096}
