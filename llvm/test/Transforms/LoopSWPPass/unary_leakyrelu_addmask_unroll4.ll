; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind writeonly
define dso_local void @main(float %aboveZeroScale, float %belowZeroScale) local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 1
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[VECEXT]], 2
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 1
; CHECK-NEXT:    [[MUL2:%.*]] = shl i32 [[VECEXT1]], 2
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 2
; CHECK-NEXT:    [[VECEXT4:%.*]] = extractelement <5 x i32> [[ADD]], i32 2
; CHECK-NEXT:    [[SPLAT_SPLATINSERT:%.*]] = insertelement <64 x float> undef, float [[ABOVEZEROSCALE:%.*]], i32 0
; CHECK-NEXT:    [[SPLAT_SPLAT:%.*]] = shufflevector <64 x float> [[SPLAT_SPLATINSERT]], <64 x float> undef, <64 x i32> zeroinitializer
; CHECK-NEXT:    [[SPLAT_SPLATINSERT5:%.*]] = insertelement <64 x float> undef, float [[BELOWZEROSCALE:%.*]], i32 0
; CHECK-NEXT:    [[SPLAT_SPLAT6:%.*]] = shufflevector <64 x float> [[SPLAT_SPLATINSERT5]], <64 x float> undef, <64 x i32> zeroinitializer
; CHECK-NEXT:    [[CMP54:%.*]] = icmp slt i32 [[VECEXT3]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP54]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP951:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[H_056:%.*]] = phi i32 [ [[VECEXT3]], [[FOR_BODY_LR_PH]] ], [ [[ADD17:%.*]], [[FOR_COND_CLEANUP10:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_055:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP10]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[IFMCOORDS_055]], i32 [[H_056]], i32 2
; CHECK-NEXT:    [[VECINS7:%.*]] = insertelement <5 x i32> [[VECINS]], i32 [[MUL]], i32 1
; CHECK-NEXT:    br i1 [[CMP951]], label [[FOR_BODY11_PREHEADER:%.*]], label [[FOR_COND_CLEANUP10]]
; CHECK:       for.body11.preheader:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i32 [ [[MUL]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP3]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP5:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP3]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP3]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP5]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP5]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP5]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP8:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP7]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP9:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP7]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP7]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP10:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP9]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP11:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP9]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP9]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP2]], 4
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq i32 [[TMP12]], [[MUL2]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[FOR_COND_CLEANUP10_LOOPEXIT:%.*]], label [[FOR_BODY11:%.*]]
; CHECK:       for.cond.cleanup10.loopexit:
; CHECK-NEXT:    [[TMP14:%.*]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY11_PREHEADER]] ], [ [[TMP54:%.*]], [[FOR_BODY11]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <5 x i32> [ [[TMP55:%.*]], [[FOR_BODY11]] ], [ [[TMP11]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi <64 x float> [ [[TMP36:%.*]], [[FOR_BODY11]] ], [ [[TMP4]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi <64 x float> [ [[TMP41:%.*]], [[FOR_BODY11]] ], [ [[TMP6]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = phi <64 x float> [ [[TMP46:%.*]], [[FOR_BODY11]] ], [ [[TMP8]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi <64 x float> [ [[TMP51:%.*]], [[FOR_BODY11]] ], [ [[TMP10]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP15]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = fmul <64 x float> [[TMP15]], [[TMP19]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP14]], i8 1, <64 x float> [[TMP20]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP16]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = fmul <64 x float> [[TMP16]], [[TMP21]]
; CHECK-NEXT:    [[TMP23:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP14]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP14]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP23]], i8 1, <64 x float> [[TMP22]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP24:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP17]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP25:%.*]] = fmul <64 x float> [[TMP17]], [[TMP24]]
; CHECK-NEXT:    [[TMP26:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP23]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP23]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP26]], i8 1, <64 x float> [[TMP25]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP27:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP18]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP28:%.*]] = fmul <64 x float> [[TMP18]], [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP26]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP26]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP29]], i8 1, <64 x float> [[TMP28]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP30:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP29]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP29]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP10]]
; CHECK:       for.cond.cleanup10:
; CHECK-NEXT:    [[IFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY]] ], [ [[DOTLCSSA]], [[FOR_COND_CLEANUP10_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD17]] = add i32 [[H_056]], 1
; CHECK-NEXT:    [[EXITCOND57:%.*]] = icmp eq i32 [[ADD17]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[EXITCOND57]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]]
; CHECK:       for.body11:
; CHECK-NEXT:    [[TMP31:%.*]] = phi <64 x float> [ [[TMP36]], [[FOR_BODY11]] ], [ [[TMP4]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = phi <64 x float> [ [[TMP41]], [[FOR_BODY11]] ], [ [[TMP6]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = phi <64 x float> [ [[TMP46]], [[FOR_BODY11]] ], [ [[TMP8]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = phi <64 x float> [ [[TMP51]], [[FOR_BODY11]] ], [ [[TMP10]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY11_PREHEADER]] ], [ [[TMP54]], [[FOR_BODY11]] ]
; CHECK-NEXT:    [[W_053:%.*]] = phi i32 [ [[ADD15_3:%.*]], [[FOR_BODY11]] ], [ [[TMP12]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_152:%.*]] = phi <5 x i32> [ [[TMP55]], [[FOR_BODY11]] ], [ [[TMP11]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP36]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_152]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP37:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP31]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP38:%.*]] = fmul <64 x float> [[TMP31]], [[TMP37]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP35]], i8 1, <64 x float> [[TMP38]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP39:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP35]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP35]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP40:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_152]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_152]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP41]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP40]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP42:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP32]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP43:%.*]] = fmul <64 x float> [[TMP32]], [[TMP42]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP39]], i8 1, <64 x float> [[TMP43]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP44:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP39]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP39]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP45:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP40]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP40]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP46]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP45]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP47:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP33]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP48:%.*]] = fmul <64 x float> [[TMP33]], [[TMP47]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP44]], i8 1, <64 x float> [[TMP48]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP49:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP44]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP44]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP50:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP45]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP45]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP51]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP50]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP52:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> [[TMP34]], <64 x float> zeroinitializer, <64 x float> [[SPLAT_SPLAT]], <64 x float> [[SPLAT_SPLAT6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP53:%.*]] = fmul <64 x float> [[TMP34]], [[TMP52]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP49]], i8 1, <64 x float> [[TMP53]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP54]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP49]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP49]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP55]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP50]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP50]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD15_3]] = add i32 [[W_053]], 4
; CHECK-NEXT:    [[EXITCOND_3:%.*]] = icmp eq i32 [[ADD15_3]], [[MUL2]]
; CHECK-NEXT:    br i1 [[EXITCOND_3]], label [[FOR_COND_CLEANUP10_LOOPEXIT]], label [[FOR_BODY11]], !llvm.loop !3
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 1
  %mul = shl nsw i32 %vecext, 2
  %vecext1 = extractelement <5 x i32> %add, i32 1
  %mul2 = shl i32 %vecext1, 2
  %vecext3 = extractelement <5 x i32> %0, i32 2
  %vecext4 = extractelement <5 x i32> %add, i32 2
  %splat.splatinsert = insertelement <64 x float> undef, float %aboveZeroScale, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> undef, <64 x i32> zeroinitializer
  %splat.splatinsert5 = insertelement <64 x float> undef, float %belowZeroScale, i32 0
  %splat.splat6 = shufflevector <64 x float> %splat.splatinsert5, <64 x float> undef, <64 x i32> zeroinitializer
  %cmp54 = icmp slt i32 %vecext3, %vecext4
  br i1 %cmp54, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp951 = icmp slt i32 %mul, %mul2
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup10
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.cond.cleanup10, %for.body.lr.ph
  %h.056 = phi i32 [ %vecext3, %for.body.lr.ph ], [ %add17, %for.cond.cleanup10 ]
  %ifmCoords.055 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords.1.lcssa, %for.cond.cleanup10 ]
  %vecins = insertelement <5 x i32> %ifmCoords.055, i32 %h.056, i32 2
  %vecins7 = insertelement <5 x i32> %vecins, i32 %mul, i32 1
  br i1 %cmp951, label %for.body11.preheader, label %for.cond.cleanup10

for.body11.preheader:                             ; preds = %for.body
  br label %for.body11

for.cond.cleanup10.loopexit:                      ; preds = %for.body11
  %.lcssa = phi <5 x i32> [ %17, %for.body11 ]
  br label %for.cond.cleanup10

for.cond.cleanup10:                               ; preds = %for.cond.cleanup10.loopexit, %for.body
  %ifmCoords.1.lcssa = phi <5 x i32> [ %vecins7, %for.body ], [ %.lcssa, %for.cond.cleanup10.loopexit ]
  %add17 = add i32 %h.056, 1
  %exitcond57 = icmp eq i32 %add17, %vecext4
  br i1 %exitcond57, label %for.cond.cleanup.loopexit, label %for.body

for.body11:                                       ; preds = %for.body11.preheader, %for.body11
  %w.053 = phi i32 [ %add15.3, %for.body11 ], [ %mul, %for.body11.preheader ]
  %ifmCoords.152 = phi <5 x i32> [ %17, %for.body11 ], [ %vecins7, %for.body11.preheader ]
  %2 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.152, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %3 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %2, <64 x float> zeroinitializer, <64 x float> %splat.splat, <64 x float> %splat.splat6, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %4 = fmul <64 x float> %2, %3
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ifmCoords.152, i8 1, <64 x float> %4, i32 0, i1 true, i1 false)
  %5 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.152, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.152, i1 true, i1 false)
  %6 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %5, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %7 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %6, <64 x float> zeroinitializer, <64 x float> %splat.splat, <64 x float> %splat.splat6, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %8 = fmul <64 x float> %6, %7
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %5, i8 1, <64 x float> %8, i32 0, i1 true, i1 false)
  %9 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %5, i32 1, i32 2, i8 2, i32 0, <5 x i32> %5, i1 true, i1 false)
  %10 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %9, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %11 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %10, <64 x float> zeroinitializer, <64 x float> %splat.splat, <64 x float> %splat.splat6, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %12 = fmul <64 x float> %10, %11
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %9, i8 1, <64 x float> %12, i32 0, i1 true, i1 false)
  %13 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %9, i32 1, i32 2, i8 2, i32 0, <5 x i32> %9, i1 true, i1 false)
  %14 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %13, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %15 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float> %14, <64 x float> zeroinitializer, <64 x float> %splat.splat, <64 x float> %splat.splat6, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %16 = fmul <64 x float> %14, %15
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %13, i8 1, <64 x float> %16, i32 0, i1 true, i1 false)
  %17 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %13, i32 1, i32 2, i8 2, i32 0, <5 x i32> %13, i1 true, i1 false)
  %add15.3 = add i32 %w.053, 4
  %exitcond.3 = icmp eq i32 %add15.3, %mul2
  br i1 %exitcond.3, label %for.cond.cleanup10.loopexit, label %for.body11, !llvm.loop !3
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.grt.v64f32.v64f32.v64f32.v64f32.v64f32.i1(<64 x float>, <64 x float>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4, !5}
!4 = !{!"llvm.loop.taken", i1 true}
!5 = !{!"llvm.loop.unroll.disable"}
