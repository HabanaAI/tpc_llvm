; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind writeonly
define dso_local void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 1
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[VECEXT]], 2
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 1
; CHECK-NEXT:    [[MUL2:%.*]] = shl i32 [[VECEXT1]], 2
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 2
; CHECK-NEXT:    [[VECEXT4:%.*]] = extractelement <5 x i32> [[ADD]], i32 2
; CHECK-NEXT:    [[CMP64:%.*]] = icmp slt i32 [[VECEXT3]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP64]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP959:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[H_067:%.*]] = phi i32 [ [[VECEXT3]], [[FOR_BODY_LR_PH]] ], [ [[ADD20:%.*]], [[FOR_COND_CLEANUP10:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_066:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP10]] ]
; CHECK-NEXT:    [[OFMCOORDS_065:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[OFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP10]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[IFMCOORDS_066]], i32 [[H_067]], i32 2
; CHECK-NEXT:    [[VECINS5:%.*]] = insertelement <5 x i32> [[OFMCOORDS_065]], i32 [[H_067]], i32 2
; CHECK-NEXT:    [[VECINS6:%.*]] = insertelement <5 x i32> [[VECINS]], i32 [[MUL]], i32 1
; CHECK-NEXT:    [[VECINS7:%.*]] = insertelement <5 x i32> [[VECINS5]], i32 [[MUL]], i32 1
; CHECK-NEXT:    br i1 [[CMP959]], label [[FOR_BODY11_PREHEADER:%.*]], label [[FOR_COND_CLEANUP10]]
; CHECK:       for.body11.preheader:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i32 [ [[MUL]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = phi <5 x i32> [ [[VECINS6]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP3]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP5:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP3]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP3]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP3]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP6]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP8:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP6]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP9:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP6]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP6]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP10:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP9]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP11:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP9]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP12:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP9]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP9]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP13:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP12]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP14:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP12]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP15:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP12]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP12]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP16:%.*]] = add i32 [[TMP2]], 4
; CHECK-NEXT:    [[TMP17:%.*]] = icmp eq i32 [[TMP16]], [[MUL2]]
; CHECK-NEXT:    br i1 [[TMP17]], label [[FOR_COND_CLEANUP10_LOOPEXIT:%.*]], label [[FOR_BODY11:%.*]]
; CHECK:       for.cond.cleanup10.loopexit:
; CHECK-NEXT:    [[DOTLCSSA74:%.*]] = phi <5 x i32> [ [[TMP59:%.*]], [[FOR_BODY11]] ], [ [[TMP15]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <5 x i32> [ [[TMP61:%.*]], [[FOR_BODY11]] ], [ [[VECINS7]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = phi <64 x float> [ [[TMP42:%.*]], [[FOR_BODY11]] ], [ [[TMP4]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = phi <64 x float> [ [[TMP43:%.*]], [[FOR_BODY11]] ], [ [[TMP5]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = phi <64 x float> [ [[TMP47:%.*]], [[FOR_BODY11]] ], [ [[TMP7]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi <64 x float> [ [[TMP48:%.*]], [[FOR_BODY11]] ], [ [[TMP8]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP22:%.*]] = phi <64 x float> [ [[TMP52:%.*]], [[FOR_BODY11]] ], [ [[TMP10]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi <64 x float> [ [[TMP53:%.*]], [[FOR_BODY11]] ], [ [[TMP11]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = phi <64 x float> [ [[TMP57:%.*]], [[FOR_BODY11]] ], [ [[TMP13]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = phi <64 x float> [ [[TMP58:%.*]], [[FOR_BODY11]] ], [ [[TMP14]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP26:%.*]] = fadd <64 x float> [[TMP18]], [[TMP19]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[DOTLCSSA]], i8 2, <64 x float> [[TMP26]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP27:%.*]] = fadd <64 x float> [[TMP20]], [[TMP21]]
; CHECK-NEXT:    [[TMP28:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[DOTLCSSA]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[DOTLCSSA]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP28]], i8 2, <64 x float> [[TMP27]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP29:%.*]] = fadd <64 x float> [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[TMP30:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP28]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP28]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP30]], i8 2, <64 x float> [[TMP29]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP31:%.*]] = fadd <64 x float> [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP32:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP30]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP30]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP32]], i8 2, <64 x float> [[TMP31]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP33:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP32]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP32]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP10]]
; CHECK:       for.cond.cleanup10:
; CHECK-NEXT:    [[OFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY]] ], [ [[DOTLCSSA]], [[FOR_COND_CLEANUP10_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS6]], [[FOR_BODY]] ], [ [[DOTLCSSA74]], [[FOR_COND_CLEANUP10_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD20]] = add i32 [[H_067]], 1
; CHECK-NEXT:    [[EXITCOND69:%.*]] = icmp eq i32 [[ADD20]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[EXITCOND69]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]]
; CHECK:       for.body11:
; CHECK-NEXT:    [[TMP34:%.*]] = phi <64 x float> [ [[TMP42]], [[FOR_BODY11]] ], [ [[TMP4]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi <64 x float> [ [[TMP43]], [[FOR_BODY11]] ], [ [[TMP5]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = phi <64 x float> [ [[TMP47]], [[FOR_BODY11]] ], [ [[TMP7]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = phi <64 x float> [ [[TMP48]], [[FOR_BODY11]] ], [ [[TMP8]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP38:%.*]] = phi <64 x float> [ [[TMP52]], [[FOR_BODY11]] ], [ [[TMP10]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP39:%.*]] = phi <64 x float> [ [[TMP53]], [[FOR_BODY11]] ], [ [[TMP11]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP40:%.*]] = phi <64 x float> [ [[TMP57]], [[FOR_BODY11]] ], [ [[TMP13]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP41:%.*]] = phi <64 x float> [ [[TMP58]], [[FOR_BODY11]] ], [ [[TMP14]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[W_062:%.*]] = phi i32 [ [[ADD18_3:%.*]], [[FOR_BODY11]] ], [ [[TMP16]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_161:%.*]] = phi <5 x i32> [ [[TMP59]], [[FOR_BODY11]] ], [ [[TMP15]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_160:%.*]] = phi <5 x i32> [ [[TMP61]], [[FOR_BODY11]] ], [ [[VECINS7]], [[FOR_BODY11_PREHEADER]] ]
; CHECK-NEXT:    [[TMP42]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_161]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP43]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_161]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP44:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_161]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_161]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP45:%.*]] = fadd <64 x float> [[TMP34]], [[TMP35]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_160]], i8 2, <64 x float> [[TMP45]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP46:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_160]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_160]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP47]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP44]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP48]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP44]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP49:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP44]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP44]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP50:%.*]] = fadd <64 x float> [[TMP36]], [[TMP37]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP46]], i8 2, <64 x float> [[TMP50]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP51:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP46]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP46]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP52]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP49]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP53]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP49]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP54:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP49]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP49]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP55:%.*]] = fadd <64 x float> [[TMP38]], [[TMP39]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP51]], i8 2, <64 x float> [[TMP55]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP56:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP51]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP51]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP57]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP54]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP58]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP54]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP59]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP54]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP54]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP60:%.*]] = fadd <64 x float> [[TMP40]], [[TMP41]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP56]], i8 2, <64 x float> [[TMP60]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP61]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP56]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP56]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD18_3]] = add i32 [[W_062]], 4
; CHECK-NEXT:    [[EXITCOND_3:%.*]] = icmp eq i32 [[ADD18_3]], [[MUL2]]
; CHECK-NEXT:    br i1 [[EXITCOND_3]], label [[FOR_COND_CLEANUP10_LOOPEXIT]], label [[FOR_BODY11]], !llvm.loop !3
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 1
  %mul = shl nsw i32 %vecext, 2
  %vecext1 = extractelement <5 x i32> %add, i32 1
  %mul2 = shl i32 %vecext1, 2
  %vecext3 = extractelement <5 x i32> %0, i32 2
  %vecext4 = extractelement <5 x i32> %add, i32 2
  %cmp64 = icmp slt i32 %vecext3, %vecext4
  br i1 %cmp64, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp959 = icmp slt i32 %mul, %mul2
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup10
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.cond.cleanup10, %for.body.lr.ph
  %h.067 = phi i32 [ %vecext3, %for.body.lr.ph ], [ %add20, %for.cond.cleanup10 ]
  %ifmCoords.066 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords.1.lcssa, %for.cond.cleanup10 ]
  %ofmCoords.065 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ofmCoords.1.lcssa, %for.cond.cleanup10 ]
  %vecins = insertelement <5 x i32> %ifmCoords.066, i32 %h.067, i32 2
  %vecins5 = insertelement <5 x i32> %ofmCoords.065, i32 %h.067, i32 2
  %vecins6 = insertelement <5 x i32> %vecins, i32 %mul, i32 1
  %vecins7 = insertelement <5 x i32> %vecins5, i32 %mul, i32 1
  br i1 %cmp959, label %for.body11.preheader, label %for.cond.cleanup10

for.body11.preheader:                             ; preds = %for.body
  br label %for.body11

for.cond.cleanup10.loopexit:                      ; preds = %for.body11
  %.lcssa74 = phi <5 x i32> [ %19, %for.body11 ]
  %.lcssa = phi <5 x i32> [ %21, %for.body11 ]
  br label %for.cond.cleanup10

for.cond.cleanup10:                               ; preds = %for.cond.cleanup10.loopexit, %for.body
  %ofmCoords.1.lcssa = phi <5 x i32> [ %vecins7, %for.body ], [ %.lcssa, %for.cond.cleanup10.loopexit ]
  %ifmCoords.1.lcssa = phi <5 x i32> [ %vecins6, %for.body ], [ %.lcssa74, %for.cond.cleanup10.loopexit ]
  %add20 = add i32 %h.067, 1
  %exitcond69 = icmp eq i32 %add20, %vecext4
  br i1 %exitcond69, label %for.cond.cleanup.loopexit, label %for.body

for.body11:                                       ; preds = %for.body11.preheader, %for.body11
  %w.062 = phi i32 [ %add18.3, %for.body11 ], [ %mul, %for.body11.preheader ]
  %ifmCoords.161 = phi <5 x i32> [ %19, %for.body11 ], [ %vecins6, %for.body11.preheader ]
  %ofmCoords.160 = phi <5 x i32> [ %21, %for.body11 ], [ %vecins7, %for.body11.preheader ]
  %2 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.161, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %3 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.161, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %4 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.161, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.161, i1 true, i1 false)
  %5 = fadd <64 x float> %2, %3
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.160, i8 2, <64 x float> %5, i32 0, i1 true, i1 false)
  %6 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.160, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.160, i1 true, i1 false)
  %7 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %4, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %8 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %4, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %9 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %4, i32 1, i32 2, i8 2, i32 0, <5 x i32> %4, i1 true, i1 false)
  %10 = fadd <64 x float> %7, %8
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %6, i8 2, <64 x float> %10, i32 0, i1 true, i1 false)
  %11 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %6, i32 1, i32 2, i8 2, i32 0, <5 x i32> %6, i1 true, i1 false)
  %12 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %9, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %13 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %9, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %14 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %9, i32 1, i32 2, i8 2, i32 0, <5 x i32> %9, i1 true, i1 false)
  %15 = fadd <64 x float> %12, %13
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %11, i8 2, <64 x float> %15, i32 0, i1 true, i1 false)
  %16 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %11, i32 1, i32 2, i8 2, i32 0, <5 x i32> %11, i1 true, i1 false)
  %17 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %14, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %18 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %14, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %19 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %14, i32 1, i32 2, i8 2, i32 0, <5 x i32> %14, i1 true, i1 false)
  %20 = fadd <64 x float> %17, %18
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %16, i8 2, <64 x float> %20, i32 0, i1 true, i1 false)
  %21 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %16, i32 1, i32 2, i8 2, i32 0, <5 x i32> %16, i1 true, i1 false)
  %add18.3 = add i32 %w.062, 4
  %exitcond.3 = icmp eq i32 %add18.3, %mul2
  br i1 %exitcond.3, label %for.cond.cleanup10.loopexit, label %for.body11, !llvm.loop !3
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
