; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind writeonly
define dso_local void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 1
; CHECK-NEXT:    [[MUL:%.*]] = shl i32 [[VECEXT]], 2
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 1
; CHECK-NEXT:    [[MUL2:%.*]] = shl i32 [[VECEXT1]], 2
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 2
; CHECK-NEXT:    [[VECEXT4:%.*]] = extractelement <5 x i32> [[ADD]], i32 2
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> <i32 0, i32 undef, i32 0, i32 0, i32 0>, i32 [[MUL]], i32 1
; CHECK-NEXT:    [[CMP72:%.*]] = icmp slt i32 [[VECEXT3]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[CMP72]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP967:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    [[TMP2:%.*]] = xor i32 [[MUL]], -1
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[MUL2]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = urem i32 [[TMP3]], 3
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i32 [[TMP4]] to i8
; CHECK-NEXT:    [[XTRAITER_LHS_TRUNC:%.*]] = add nuw nsw i8 [[TMP5]], 1
; CHECK-NEXT:    [[XTRAITER78:%.*]] = urem i8 [[XTRAITER_LHS_TRUNC]], 3
; CHECK-NEXT:    [[XTRAITER_ZEXT:%.*]] = zext i8 [[XTRAITER78]] to i32
; CHECK-NEXT:    [[LCMP_MOD:%.*]] = icmp eq i8 [[XTRAITER78]], 0
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[H_075:%.*]] = phi i32 [ [[VECEXT3]], [[FOR_BODY_LR_PH]] ], [ [[ADD22:%.*]], [[FOR_COND_CLEANUP10:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_074:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY_LR_PH]] ], [ [[VECINS19:%.*]], [[FOR_COND_CLEANUP10]] ]
; CHECK-NEXT:    [[OFMCOORDS_073:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY_LR_PH]] ], [ [[VECINS20:%.*]], [[FOR_COND_CLEANUP10]] ]
; CHECK-NEXT:    [[VECINS6:%.*]] = insertelement <5 x i32> [[IFMCOORDS_074]], i32 [[H_075]], i32 2
; CHECK-NEXT:    [[VECINS7:%.*]] = insertelement <5 x i32> [[OFMCOORDS_073]], i32 [[H_075]], i32 2
; CHECK-NEXT:    br i1 [[CMP967]], label [[FOR_BODY11_PREHEADER:%.*]], label [[FOR_COND_CLEANUP10]]
; CHECK:       for.body11.preheader:
; CHECK-NEXT:    br i1 [[LCMP_MOD]], label [[FOR_BODY11_PREHEADER85:%.*]], label [[FOR_BODY11_PROL_PREHEADER:%.*]]
; CHECK:       for.body11.prol.preheader:
; CHECK-NEXT:    br label [[FOR_BODY11_PROL:%.*]]
; CHECK:       for.body11.preheader85.loopexit:
; CHECK-NEXT:    [[DOTLCSSA92:%.*]] = phi <5 x i32> [ [[TMP19:%.*]], [[FOR_BODY11_PROL]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <5 x i32> [ [[TMP22:%.*]], [[FOR_BODY11_PROL]] ]
; CHECK-NEXT:    [[ADD18_PROL_LCSSA:%.*]] = phi i32 [ [[ADD18_PROL:%.*]], [[FOR_BODY11_PROL]] ]
; CHECK-NEXT:    br label [[FOR_BODY11_PREHEADER85]]
; CHECK:       for.body11.preheader85:
; CHECK-NEXT:    [[W_070_PH:%.*]] = phi i32 [ [[MUL]], [[FOR_BODY11_PREHEADER]] ], [ [[ADD18_PROL_LCSSA]], [[FOR_BODY11_PREHEADER85_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_169_PH:%.*]] = phi <5 x i32> [ [[VECINS6]], [[FOR_BODY11_PREHEADER]] ], [ [[DOTLCSSA92]], [[FOR_BODY11_PREHEADER85_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMCOORDS_168_PH:%.*]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY11_PREHEADER]] ], [ [[DOTLCSSA]], [[FOR_BODY11_PREHEADER85_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_169_PH]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_169_PH]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP8:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_169_PH]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_169_PH]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP9:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP8]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP10:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP8]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP11:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP8]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP8]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP12:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP11]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP13:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP11]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP14:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP11]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP11]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[W_070_PH]], 3
; CHECK-NEXT:    [[TMP16:%.*]] = icmp eq i32 [[TMP15]], [[MUL2]]
; CHECK-NEXT:    br i1 [[TMP16]], label [[FOR_COND_CLEANUP10_LOOPEXIT:%.*]], label [[FOR_BODY11:%.*]]
; CHECK:       for.body11.prol:
; CHECK-NEXT:    [[W_070_PROL:%.*]] = phi i32 [ [[ADD18_PROL]], [[FOR_BODY11_PROL]] ], [ [[MUL]], [[FOR_BODY11_PROL_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_169_PROL:%.*]] = phi <5 x i32> [ [[TMP19]], [[FOR_BODY11_PROL]] ], [ [[VECINS6]], [[FOR_BODY11_PROL_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_168_PROL:%.*]] = phi <5 x i32> [ [[TMP22]], [[FOR_BODY11_PROL]] ], [ [[VECINS7]], [[FOR_BODY11_PROL_PREHEADER]] ]
; CHECK-NEXT:    [[PROL_ITER:%.*]] = phi i32 [ [[PROL_ITER_SUB:%.*]], [[FOR_BODY11_PROL]] ], [ [[XTRAITER_ZEXT]], [[FOR_BODY11_PROL_PREHEADER]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_169_PROL]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_169_PROL]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP19]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_169_PROL]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_169_PROL]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP17]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP17]], <64 x float> [[TMP18]], i8 0, i32 0, <64 x float> [[TMP17]], <256 x i1> [[TMP20]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_168_PROL]], i8 2, <64 x float> [[TMP21]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP22]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_168_PROL]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_168_PROL]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD18_PROL]] = add i32 [[W_070_PROL]], 1
; CHECK-NEXT:    [[PROL_ITER_SUB]] = add i32 [[PROL_ITER]], -1
; CHECK-NEXT:    [[PROL_ITER_CMP:%.*]] = icmp eq i32 [[PROL_ITER_SUB]], 0
; CHECK-NEXT:    br i1 [[PROL_ITER_CMP]], label [[FOR_BODY11_PREHEADER85_LOOPEXIT]], label [[FOR_BODY11_PROL]], !llvm.loop !3
; CHECK:       for.cond.cleanup10.loopexit:
; CHECK-NEXT:    [[DOTLCSSA94:%.*]] = phi <5 x i32> [ [[TMP58:%.*]], [[FOR_BODY11]] ], [ [[TMP14]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[DOTLCSSA93:%.*]] = phi <5 x i32> [ [[TMP61:%.*]], [[FOR_BODY11]] ], [ [[OFMCOORDS_168_PH]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi <64 x float> [ [[TMP44:%.*]], [[FOR_BODY11]] ], [ [[TMP6]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = phi <64 x float> [ [[TMP45:%.*]], [[FOR_BODY11]] ], [ [[TMP7]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = phi <64 x float> [ [[TMP50:%.*]], [[FOR_BODY11]] ], [ [[TMP9]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP26:%.*]] = phi <64 x float> [ [[TMP51:%.*]], [[FOR_BODY11]] ], [ [[TMP10]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP27:%.*]] = phi <64 x float> [ [[TMP56:%.*]], [[FOR_BODY11]] ], [ [[TMP12]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP28:%.*]] = phi <64 x float> [ [[TMP57:%.*]], [[FOR_BODY11]] ], [ [[TMP13]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP29:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP23]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP30:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP23]], <64 x float> [[TMP24]], i8 0, i32 0, <64 x float> [[TMP23]], <256 x i1> [[TMP29]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[DOTLCSSA93]], i8 2, <64 x float> [[TMP30]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP31:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP25]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP32:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP25]], <64 x float> [[TMP26]], i8 0, i32 0, <64 x float> [[TMP25]], <256 x i1> [[TMP31]], i1 false)
; CHECK-NEXT:    [[TMP33:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[DOTLCSSA93]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[DOTLCSSA93]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP33]], i8 2, <64 x float> [[TMP32]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP34:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP27]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP35:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP27]], <64 x float> [[TMP28]], i8 0, i32 0, <64 x float> [[TMP27]], <256 x i1> [[TMP34]], i1 false)
; CHECK-NEXT:    [[TMP36:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP33]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP33]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP36]], i8 2, <64 x float> [[TMP35]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP37:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP36]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP36]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP10]]
; CHECK:       for.cond.cleanup10:
; CHECK-NEXT:    [[OFMCOORDS_1_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS7]], [[FOR_BODY]] ], [ [[DOTLCSSA93]], [[FOR_COND_CLEANUP10_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS_1_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS6]], [[FOR_BODY]] ], [ [[DOTLCSSA94]], [[FOR_COND_CLEANUP10_LOOPEXIT]] ]
; CHECK-NEXT:    [[VECINS19]] = insertelement <5 x i32> [[IFMCOORDS_1_LCSSA]], i32 [[MUL]], i32 1
; CHECK-NEXT:    [[VECINS20]] = insertelement <5 x i32> [[OFMCOORDS_1_LCSSA]], i32 [[MUL]], i32 1
; CHECK-NEXT:    [[ADD22]] = add i32 [[H_075]], 1
; CHECK-NEXT:    [[EXITCOND77:%.*]] = icmp eq i32 [[ADD22]], [[VECEXT4]]
; CHECK-NEXT:    br i1 [[EXITCOND77]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]]
; CHECK:       for.body11:
; CHECK-NEXT:    [[TMP38:%.*]] = phi <64 x float> [ [[TMP44]], [[FOR_BODY11]] ], [ [[TMP6]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP39:%.*]] = phi <64 x float> [ [[TMP45]], [[FOR_BODY11]] ], [ [[TMP7]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP40:%.*]] = phi <64 x float> [ [[TMP50]], [[FOR_BODY11]] ], [ [[TMP9]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP41:%.*]] = phi <64 x float> [ [[TMP51]], [[FOR_BODY11]] ], [ [[TMP10]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP42:%.*]] = phi <64 x float> [ [[TMP56]], [[FOR_BODY11]] ], [ [[TMP12]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP43:%.*]] = phi <64 x float> [ [[TMP57]], [[FOR_BODY11]] ], [ [[TMP13]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[W_070:%.*]] = phi i32 [ [[ADD18_2:%.*]], [[FOR_BODY11]] ], [ [[TMP15]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[IFMCOORDS_169:%.*]] = phi <5 x i32> [ [[TMP58]], [[FOR_BODY11]] ], [ [[TMP14]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[OFMCOORDS_168:%.*]] = phi <5 x i32> [ [[TMP61]], [[FOR_BODY11]] ], [ [[OFMCOORDS_168_PH]], [[FOR_BODY11_PREHEADER85]] ]
; CHECK-NEXT:    [[TMP44]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_169]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP45]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_169]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP46:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_169]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_169]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP47:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP38]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP48:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP38]], <64 x float> [[TMP39]], i8 0, i32 0, <64 x float> [[TMP38]], <256 x i1> [[TMP47]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_168]], i8 2, <64 x float> [[TMP48]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP49:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_168]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_168]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP50]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP46]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP51]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP46]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP52:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP46]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP46]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP53:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP40]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP54:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP40]], <64 x float> [[TMP41]], i8 0, i32 0, <64 x float> [[TMP40]], <256 x i1> [[TMP53]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP49]], i8 2, <64 x float> [[TMP54]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP55:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP49]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP49]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP56]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP52]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP57]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP52]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP58]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP52]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP52]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP59:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP42]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP60:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP42]], <64 x float> [[TMP43]], i8 0, i32 0, <64 x float> [[TMP42]], <256 x i1> [[TMP59]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP55]], i8 2, <64 x float> [[TMP60]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP61]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP55]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP55]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD18_2]] = add i32 [[W_070]], 3
; CHECK-NEXT:    [[EXITCOND_2:%.*]] = icmp eq i32 [[ADD18_2]], [[MUL2]]
; CHECK-NEXT:    br i1 [[EXITCOND_2]], label [[FOR_COND_CLEANUP10_LOOPEXIT]], label [[FOR_BODY11]], !llvm.loop !6
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 1
  %mul = shl i32 %vecext, 2
  %vecext1 = extractelement <5 x i32> %add, i32 1
  %mul2 = shl i32 %vecext1, 2
  %vecext3 = extractelement <5 x i32> %0, i32 2
  %vecext4 = extractelement <5 x i32> %add, i32 2
  %vecins = insertelement <5 x i32> <i32 0, i32 undef, i32 0, i32 0, i32 0>, i32 %mul, i32 1
  %cmp72 = icmp slt i32 %vecext3, %vecext4
  br i1 %cmp72, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp967 = icmp slt i32 %mul, %mul2
  %2 = xor i32 %mul, -1
  %3 = add i32 %mul2, %2
  %4 = urem i32 %3, 3
  %5 = trunc i32 %4 to i8
  %xtraiter.lhs.trunc = add nuw nsw i8 %5, 1
  %xtraiter78 = urem i8 %xtraiter.lhs.trunc, 3
  %xtraiter.zext = zext i8 %xtraiter78 to i32
  %lcmp.mod = icmp eq i8 %xtraiter78, 0
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup10
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.cond.cleanup10, %for.body.lr.ph
  %h.075 = phi i32 [ %vecext3, %for.body.lr.ph ], [ %add22, %for.cond.cleanup10 ]
  %ifmCoords.074 = phi <5 x i32> [ %vecins, %for.body.lr.ph ], [ %vecins19, %for.cond.cleanup10 ]
  %ofmCoords.073 = phi <5 x i32> [ %vecins, %for.body.lr.ph ], [ %vecins20, %for.cond.cleanup10 ]
  %vecins6 = insertelement <5 x i32> %ifmCoords.074, i32 %h.075, i32 2
  %vecins7 = insertelement <5 x i32> %ofmCoords.073, i32 %h.075, i32 2
  br i1 %cmp967, label %for.body11.preheader, label %for.cond.cleanup10

for.body11.preheader:                             ; preds = %for.body
  br i1 %lcmp.mod, label %for.body11.preheader85, label %for.body11.prol.preheader

for.body11.prol.preheader:                        ; preds = %for.body11.preheader
  br label %for.body11.prol

for.body11.preheader85.loopexit:                  ; preds = %for.body11.prol
  %.lcssa92 = phi <5 x i32> [ %8, %for.body11.prol ]
  %.lcssa = phi <5 x i32> [ %11, %for.body11.prol ]
  %add18.prol.lcssa = phi i32 [ %add18.prol, %for.body11.prol ]
  br label %for.body11.preheader85

for.body11.preheader85:                           ; preds = %for.body11.preheader85.loopexit, %for.body11.preheader
  %w.070.ph = phi i32 [ %mul, %for.body11.preheader ], [ %add18.prol.lcssa, %for.body11.preheader85.loopexit ]
  %ifmCoords.169.ph = phi <5 x i32> [ %vecins6, %for.body11.preheader ], [ %.lcssa92, %for.body11.preheader85.loopexit ]
  %ofmCoords.168.ph = phi <5 x i32> [ %vecins7, %for.body11.preheader ], [ %.lcssa, %for.body11.preheader85.loopexit ]
  br label %for.body11

for.body11.prol:                                  ; preds = %for.body11.prol.preheader, %for.body11.prol
  %w.070.prol = phi i32 [ %add18.prol, %for.body11.prol ], [ %mul, %for.body11.prol.preheader ]
  %ifmCoords.169.prol = phi <5 x i32> [ %8, %for.body11.prol ], [ %vecins6, %for.body11.prol.preheader ]
  %ofmCoords.168.prol = phi <5 x i32> [ %11, %for.body11.prol ], [ %vecins7, %for.body11.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body11.prol ], [ %xtraiter.zext, %for.body11.prol.preheader ]
  %6 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.169.prol, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %7 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.169.prol, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %8 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.169.prol, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.169.prol, i1 true, i1 false)
  %9 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %6, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %10 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %6, <64 x float> %7, i8 0, i32 0, <64 x float> %6, <256 x i1> %9, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.168.prol, i8 2, <64 x float> %10, i32 0, i1 true, i1 false)
  %11 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.168.prol, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.168.prol, i1 true, i1 false)
  %add18.prol = add i32 %w.070.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body11.preheader85.loopexit, label %for.body11.prol, !llvm.loop !3

for.cond.cleanup10.loopexit:                      ; preds = %for.body11
  %.lcssa94 = phi <5 x i32> [ %26, %for.body11 ]
  %.lcssa93 = phi <5 x i32> [ %29, %for.body11 ]
  br label %for.cond.cleanup10

for.cond.cleanup10:                               ; preds = %for.cond.cleanup10.loopexit, %for.body
  %ofmCoords.1.lcssa = phi <5 x i32> [ %vecins7, %for.body ], [ %.lcssa93, %for.cond.cleanup10.loopexit ]
  %ifmCoords.1.lcssa = phi <5 x i32> [ %vecins6, %for.body ], [ %.lcssa94, %for.cond.cleanup10.loopexit ]
  %vecins19 = insertelement <5 x i32> %ifmCoords.1.lcssa, i32 %mul, i32 1
  %vecins20 = insertelement <5 x i32> %ofmCoords.1.lcssa, i32 %mul, i32 1
  %add22 = add i32 %h.075, 1
  %exitcond77 = icmp eq i32 %add22, %vecext4
  br i1 %exitcond77, label %for.cond.cleanup.loopexit, label %for.body

for.body11:                                       ; preds = %for.body11.preheader85, %for.body11
  %w.070 = phi i32 [ %add18.2, %for.body11 ], [ %w.070.ph, %for.body11.preheader85 ]
  %ifmCoords.169 = phi <5 x i32> [ %26, %for.body11 ], [ %ifmCoords.169.ph, %for.body11.preheader85 ]
  %ofmCoords.168 = phi <5 x i32> [ %29, %for.body11 ], [ %ofmCoords.168.ph, %for.body11.preheader85 ]
  %12 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.169, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %13 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.169, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %14 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.169, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.169, i1 true, i1 false)
  %15 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %12, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %16 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %12, <64 x float> %13, i8 0, i32 0, <64 x float> %12, <256 x i1> %15, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.168, i8 2, <64 x float> %16, i32 0, i1 true, i1 false)
  %17 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.168, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.168, i1 true, i1 false)
  %18 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %14, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %19 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %14, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %20 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %14, i32 1, i32 2, i8 2, i32 0, <5 x i32> %14, i1 true, i1 false)
  %21 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %18, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %22 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %18, <64 x float> %19, i8 0, i32 0, <64 x float> %18, <256 x i1> %21, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %17, i8 2, <64 x float> %22, i32 0, i1 true, i1 false)
  %23 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %17, i32 1, i32 2, i8 2, i32 0, <5 x i32> %17, i1 true, i1 false)
  %24 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %20, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %25 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %20, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %26 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %20, i32 1, i32 2, i8 2, i32 0, <5 x i32> %20, i1 true, i1 false)
  %27 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %24, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %28 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %24, <64 x float> %25, i8 0, i32 0, <64 x float> %24, <256 x i1> %27, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %23, i8 2, <64 x float> %28, i32 0, i1 true, i1 false)
  %29 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %23, i32 1, i32 2, i8 2, i32 0, <5 x i32> %23, i1 true, i1 false)
  %add18.2 = add i32 %w.070, 3
  %exitcond.2 = icmp eq i32 %add18.2, %mul2
  br i1 %exitcond.2, label %for.cond.cleanup10.loopexit, label %for.body11, !llvm.loop !6
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float>, float, i8, i32, <256 x i1>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, <256 x i1>, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4, !5}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!"llvm.loop.unroll.remainderloop.marker", i32 0}
!6 = distinct !{!6, !4}
