; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind
define dso_local void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[TMP2:%.*]] = tail call i32 @llvm.tpc.ld.l.i32(i32 1040, i32 1, i32 undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 1
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 1
; CHECK-NEXT:    [[TMP3:%.*]] = tail call <256 x i8> @llvm.tpc.ld.tnsr.v256i8.i1(<5 x i32> zeroinitializer, i8 2, i32 0, <256 x i8> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP4:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256>, <5 x i32> zeroinitializer, i32 1, i8 2, i32 0, <5 x i32> zeroinitializer, i1 true, i1 false)
; CHECK-NEXT:    [[TMP5:%.*]] = tail call <256 x i8> @llvm.tpc.ld.tnsr.v256i8.i1(<5 x i32> [[TMP4]], i8 2, i32 0, <256 x i8> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256>, <5 x i32> [[TMP4]], i32 1, i8 2, i32 0, <5 x i32> [[TMP4]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <256 x i8> @llvm.tpc.ld.tnsr.v256i8.i1(<5 x i32> [[TMP6]], i8 2, i32 0, <256 x i8> undef, i1 true, i1 false)
; CHECK-NEXT:    [[CMP61:%.*]] = icmp slt i32 [[VECEXT]], [[VECEXT1]]
; CHECK-NEXT:    br i1 [[CMP61]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP656:%.*]] = icmp sgt i32 [[TMP2]], 0
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP2]], -1
; CHECK-NEXT:    [[TMP9:%.*]] = lshr i32 [[TMP8]], 6
; CHECK-NEXT:    [[TMP10:%.*]] = add nuw nsw i32 [[TMP9]], 1
; CHECK-NEXT:    [[XTRAITER:%.*]] = and i32 [[TMP10]], 3
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ult i32 [[TMP8]], 192
; CHECK-NEXT:    [[UNROLL_ITER:%.*]] = sub nsw i32 [[TMP10]], [[XTRAITER]]
; CHECK-NEXT:    [[LCMP_MOD:%.*]] = icmp eq i32 [[XTRAITER]], 0
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[W_063:%.*]] = phi i32 [ [[VECEXT]], [[FOR_BODY_LR_PH]] ], [ [[ADD15:%.*]], [[FOR_COND_CLEANUP7:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS0_062:%.*]] = phi <5 x i32> [ undef, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS0_1_LCSSA:%.*]], [[FOR_COND_CLEANUP7]] ]
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <5 x i32> [[IFMCOORDS0_062]], i32 0, i32 0
; CHECK-NEXT:    [[VECINS3:%.*]] = insertelement <5 x i32> [[TMP12]], i32 [[W_063]], i32 1
; CHECK-NEXT:    [[VECINS4:%.*]] = insertelement <5 x i32> [[VECINS3]], i32 0, i32 0
; CHECK-NEXT:    br i1 [[CMP656]], label [[FOR_BODY8_PREHEADER:%.*]], label [[FOR_COND_CLEANUP7]]
; CHECK:       for.body8.preheader:
; CHECK-NEXT:    br i1 [[TMP11]], label [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA:%.*]], label [[FOR_BODY8_PREHEADER81:%.*]]
; CHECK:       for.body8.preheader81:
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ [[UNROLL_ITER]], [[FOR_BODY8_PREHEADER]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi <5 x i32> [ [[VECINS4]], [[FOR_BODY8_PREHEADER]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP14]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP16:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP14]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[TMP14]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP16]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP16]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[TMP16]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP19:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP18]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP18]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[TMP18]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP20]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP20]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[TMP20]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP23:%.*]] = add i32 [[TMP13]], -4
; CHECK-NEXT:    [[TMP24:%.*]] = icmp eq i32 [[TMP23]], 0
; CHECK-NEXT:    br i1 [[TMP24]], label [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA_LOOPEXIT:%.*]], label [[FOR_BODY8:%.*]]
; CHECK:       for.cond.cleanup7.loopexit.unr-lcssa.loopexit:
; CHECK-NEXT:    [[DOTLCSSA82:%.*]] = phi <64 x float> [ [[TMP85:%.*]], [[FOR_BODY8]] ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <5 x i32> [ [[TMP86:%.*]], [[FOR_BODY8]] ], [ [[TMP22]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP25:%.*]] = phi <64 x float> [ [[TMP67:%.*]], [[FOR_BODY8]] ], [ [[TMP15]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP26:%.*]] = phi <64 x float> [ [[TMP72:%.*]], [[FOR_BODY8]] ], [ [[TMP17]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP27:%.*]] = phi <64 x float> [ [[TMP77:%.*]], [[FOR_BODY8]] ], [ [[TMP19]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP28:%.*]] = phi <64 x float> [ [[TMP82:%.*]], [[FOR_BODY8]] ], [ [[TMP21]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP29:%.*]] = bitcast <64 x float> [[TMP25]] to <64 x i32>
; CHECK-NEXT:    [[TMP30:%.*]] = and <64 x i32> [[TMP29]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP31:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[TMP30]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP25]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP32:%.*]] = fmul <64 x float> [[DOTLCSSA82]], [[TMP31]]
; CHECK-NEXT:    [[TMP33:%.*]] = bitcast <64 x float> [[TMP26]] to <64 x i32>
; CHECK-NEXT:    [[TMP34:%.*]] = and <64 x i32> [[TMP33]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP35:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[TMP34]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP26]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP36:%.*]] = fmul <64 x float> [[TMP32]], [[TMP35]]
; CHECK-NEXT:    [[TMP37:%.*]] = bitcast <64 x float> [[TMP27]] to <64 x i32>
; CHECK-NEXT:    [[TMP38:%.*]] = and <64 x i32> [[TMP37]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP39:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[TMP38]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP27]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP40:%.*]] = fmul <64 x float> [[TMP36]], [[TMP39]]
; CHECK-NEXT:    [[TMP41:%.*]] = bitcast <64 x float> [[TMP28]] to <64 x i32>
; CHECK-NEXT:    [[TMP42:%.*]] = and <64 x i32> [[TMP41]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP43:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[TMP42]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP28]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP44:%.*]] = fmul <64 x float> [[TMP40]], [[TMP43]]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA]]
; CHECK:       for.cond.cleanup7.loopexit.unr-lcssa:
; CHECK-NEXT:    [[DOTLCSSA64_PH:%.*]] = phi <64 x float> [ undef, [[FOR_BODY8_PREHEADER]] ], [ [[TMP44]], [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA_PH:%.*]] = phi <5 x i32> [ undef, [[FOR_BODY8_PREHEADER]] ], [ [[DOTLCSSA]], [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMVALUE0_058_UNR:%.*]] = phi <64 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, [[FOR_BODY8_PREHEADER]] ], [ [[TMP44]], [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS0_157_UNR:%.*]] = phi <5 x i32> [ [[VECINS4]], [[FOR_BODY8_PREHEADER]] ], [ [[DOTLCSSA]], [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA_LOOPEXIT]] ]
; CHECK-NEXT:    br i1 [[LCMP_MOD]], label [[FOR_COND_CLEANUP7]], label [[FOR_BODY8_EPIL_PREHEADER:%.*]]
; CHECK:       for.body8.epil.preheader:
; CHECK-NEXT:    br label [[FOR_BODY8_EPIL:%.*]]
; CHECK:       for.body8.epil:
; CHECK-NEXT:    [[OFMVALUE0_058_EPIL:%.*]] = phi <64 x float> [ [[TMP48:%.*]], [[FOR_BODY8_EPIL]] ], [ [[OFMVALUE0_058_UNR]], [[FOR_BODY8_EPIL_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS0_157_EPIL:%.*]] = phi <5 x i32> [ [[TMP49:%.*]], [[FOR_BODY8_EPIL]] ], [ [[IFMCOORDS0_157_UNR]], [[FOR_BODY8_EPIL_PREHEADER]] ]
; CHECK-NEXT:    [[EPIL_ITER:%.*]] = phi i32 [ [[EPIL_ITER_SUB:%.*]], [[FOR_BODY8_EPIL]] ], [ [[XTRAITER]], [[FOR_BODY8_EPIL_PREHEADER]] ]
; CHECK-NEXT:    [[TMP45:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS0_157_EPIL]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP46:%.*]] = bitcast <64 x float> [[TMP45]] to <64 x i32>
; CHECK-NEXT:    [[AND_EPIL:%.*]] = and <64 x i32> [[TMP46]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP47:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[AND_EPIL]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP45]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP48]] = fmul <64 x float> [[OFMVALUE0_058_EPIL]], [[TMP47]]
; CHECK-NEXT:    [[TMP49]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS0_157_EPIL]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[IFMCOORDS0_157_EPIL]], i1 true, i1 false)
; CHECK-NEXT:    [[EPIL_ITER_SUB]] = add i32 [[EPIL_ITER]], -1
; CHECK-NEXT:    [[EPIL_ITER_CMP:%.*]] = icmp eq i32 [[EPIL_ITER_SUB]], 0
; CHECK-NEXT:    br i1 [[EPIL_ITER_CMP]], label [[FOR_COND_CLEANUP7_LOOPEXIT:%.*]], label [[FOR_BODY8_EPIL]], !llvm.loop !3
; CHECK:       for.cond.cleanup7.loopexit:
; CHECK-NEXT:    [[DOTLCSSA84:%.*]] = phi <64 x float> [ [[TMP48]], [[FOR_BODY8_EPIL]] ]
; CHECK-NEXT:    [[DOTLCSSA83:%.*]] = phi <5 x i32> [ [[TMP49]], [[FOR_BODY8_EPIL]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP7]]
; CHECK:       for.cond.cleanup7:
; CHECK-NEXT:    [[IFMCOORDS0_1_LCSSA]] = phi <5 x i32> [ [[VECINS4]], [[FOR_BODY]] ], [ [[DOTLCSSA_PH]], [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA]] ], [ [[DOTLCSSA83]], [[FOR_COND_CLEANUP7_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMVALUE0_0_LCSSA:%.*]] = phi <64 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, [[FOR_BODY]] ], [ [[DOTLCSSA64_PH]], [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA]] ], [ [[DOTLCSSA84]], [[FOR_COND_CLEANUP7_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP50:%.*]] = tail call <64 x float> @llvm.tpc.mov.dual.group.v64f32.i1(<64 x float> [[OFMVALUE0_0_LCSSA]], i32 -1, i32 0, i32 12544, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP51:%.*]] = tail call <64 x float> @llvm.tpc.mov.dual.group.v64f32.i1(<64 x float> [[OFMVALUE0_0_LCSSA]], i32 -1, i32 0, i32 15104, <64 x float> [[TMP50]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP52:%.*]] = fmul <64 x float> [[OFMVALUE0_0_LCSSA]], [[TMP51]]
; CHECK-NEXT:    [[TMP53:%.*]] = tail call <64 x float> @llvm.tpc.mov.dual.group.v64f32.i1(<64 x float> [[TMP52]], i32 -1, i32 0, i32 12800, <64 x float> [[TMP51]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP54:%.*]] = fmul <64 x float> [[TMP52]], [[TMP53]]
; CHECK-NEXT:    [[TMP55:%.*]] = tail call <64 x float> @llvm.tpc.mov.group.v64f32.v64f32.i1(<64 x float> [[TMP54]], i32 -1, i32 63, <64 x float> [[TMP53]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP56:%.*]] = fmul <64 x float> [[TMP54]], [[TMP55]]
; CHECK-NEXT:    [[TMP57:%.*]] = tail call <64 x float> @llvm.tpc.shuffle.v64f32.i1(<64 x float> [[TMP56]], <256 x i8> [[TMP3]], i8 0, i32 0, <64 x float> [[TMP55]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP58:%.*]] = fmul <64 x float> [[TMP56]], [[TMP57]]
; CHECK-NEXT:    [[TMP59:%.*]] = tail call <64 x float> @llvm.tpc.shuffle.v64f32.i1(<64 x float> [[TMP58]], <256 x i8> [[TMP5]], i8 0, i32 0, <64 x float> [[TMP57]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP60:%.*]] = fmul <64 x float> [[TMP58]], [[TMP59]]
; CHECK-NEXT:    [[TMP61:%.*]] = tail call <64 x float> @llvm.tpc.shuffle.v64f32.i1(<64 x float> [[TMP60]], <256 x i8> [[TMP7]], i8 0, i32 0, <64 x float> [[TMP59]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP62:%.*]] = fmul <64 x float> [[TMP60]], [[TMP61]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS3]], i8 1, <64 x float> [[TMP62]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[ADD15]] = add i32 [[W_063]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[ADD15]], [[VECEXT1]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop !6
; CHECK:       for.body8:
; CHECK-NEXT:    [[TMP63:%.*]] = phi <64 x float> [ [[TMP67]], [[FOR_BODY8]] ], [ [[TMP15]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP64:%.*]] = phi <64 x float> [ [[TMP72]], [[FOR_BODY8]] ], [ [[TMP17]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP65:%.*]] = phi <64 x float> [ [[TMP77]], [[FOR_BODY8]] ], [ [[TMP19]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP66:%.*]] = phi <64 x float> [ [[TMP82]], [[FOR_BODY8]] ], [ [[TMP21]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[OFMVALUE0_058:%.*]] = phi <64 x float> [ [[TMP85]], [[FOR_BODY8]] ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[IFMCOORDS0_157:%.*]] = phi <5 x i32> [ [[TMP86]], [[FOR_BODY8]] ], [ [[TMP22]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[NITER:%.*]] = phi i32 [ [[NITER_NSUB_3:%.*]], [[FOR_BODY8]] ], [ [[TMP23]], [[FOR_BODY8_PREHEADER81]] ]
; CHECK-NEXT:    [[TMP67]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS0_157]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP68:%.*]] = bitcast <64 x float> [[TMP63]] to <64 x i32>
; CHECK-NEXT:    [[AND:%.*]] = and <64 x i32> [[TMP68]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP69:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[AND]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP63]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP70:%.*]] = fmul <64 x float> [[OFMVALUE0_058]], [[TMP69]]
; CHECK-NEXT:    [[TMP71:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS0_157]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[IFMCOORDS0_157]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP72]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP71]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP73:%.*]] = bitcast <64 x float> [[TMP64]] to <64 x i32>
; CHECK-NEXT:    [[AND_1:%.*]] = and <64 x i32> [[TMP73]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP74:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[AND_1]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP64]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP75:%.*]] = fmul <64 x float> [[TMP70]], [[TMP74]]
; CHECK-NEXT:    [[TMP76:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP71]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[TMP71]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP77]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP76]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP78:%.*]] = bitcast <64 x float> [[TMP65]] to <64 x i32>
; CHECK-NEXT:    [[AND_2:%.*]] = and <64 x i32> [[TMP78]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP79:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[AND_2]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP65]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP80:%.*]] = fmul <64 x float> [[TMP75]], [[TMP79]]
; CHECK-NEXT:    [[TMP81:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP76]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[TMP76]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP82]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP81]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP83:%.*]] = bitcast <64 x float> [[TMP66]] to <64 x i32>
; CHECK-NEXT:    [[AND_3:%.*]] = and <64 x i32> [[TMP83]], <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
; CHECK-NEXT:    [[TMP84:%.*]] = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> [[AND_3]], i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> [[TMP66]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP85]] = fmul <64 x float> [[TMP80]], [[TMP84]]
; CHECK-NEXT:    [[TMP86]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP81]], i32 64, i32 1, i8 2, i32 0, <5 x i32> [[TMP81]], i1 true, i1 false)
; CHECK-NEXT:    [[NITER_NSUB_3]] = add i32 [[NITER]], -4
; CHECK-NEXT:    [[NITER_NCMP_3:%.*]] = icmp eq i32 [[NITER_NSUB_3]], 0
; CHECK-NEXT:    br i1 [[NITER_NCMP_3]], label [[FOR_COND_CLEANUP7_LOOPEXIT_UNR_LCSSA_LOOPEXIT]], label [[FOR_BODY8]], !llvm.loop !8
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %2 = tail call i32 @llvm.tpc.ld.l.i32(i32 1040, i32 1, i32 undef, i1 true, i1 false) #4
  %vecext = extractelement <5 x i32> %0, i32 1
  %vecext1 = extractelement <5 x i32> %add, i32 1
  %3 = tail call <256 x i8> @llvm.tpc.ld.tnsr.v256i8.i1(<5 x i32> zeroinitializer, i8 2, i32 0, <256 x i8> undef, i1 true, i1 false)
  %4 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256>, <5 x i32> zeroinitializer, i32 1, i8 2, i32 0, <5 x i32> zeroinitializer, i1 true, i1 false)
  %5 = tail call <256 x i8> @llvm.tpc.ld.tnsr.v256i8.i1(<5 x i32> %4, i8 2, i32 0, <256 x i8> undef, i1 true, i1 false)
  %6 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256>, <5 x i32> %4, i32 1, i8 2, i32 0, <5 x i32> %4, i1 true, i1 false)
  %7 = tail call <256 x i8> @llvm.tpc.ld.tnsr.v256i8.i1(<5 x i32> %6, i8 2, i32 0, <256 x i8> undef, i1 true, i1 false)
  %cmp61 = icmp slt i32 %vecext, %vecext1
  br i1 %cmp61, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp656 = icmp sgt i32 %2, 0
  %8 = add i32 %2, -1
  %9 = lshr i32 %8, 6
  %10 = add nuw nsw i32 %9, 1
  %xtraiter = and i32 %10, 3
  %11 = icmp ult i32 %8, 192
  %unroll_iter = sub nsw i32 %10, %xtraiter
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup7
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.cond.cleanup7, %for.body.lr.ph
  %w.063 = phi i32 [ %vecext, %for.body.lr.ph ], [ %add15, %for.cond.cleanup7 ]
  %ifmCoords0.062 = phi <5 x i32> [ undef, %for.body.lr.ph ], [ %ifmCoords0.1.lcssa, %for.cond.cleanup7 ]
  %12 = insertelement <5 x i32> %ifmCoords0.062, i32 0, i32 0
  %vecins3 = insertelement <5 x i32> %12, i32 %w.063, i32 1
  %vecins4 = insertelement <5 x i32> %vecins3, i32 0, i32 0
  br i1 %cmp656, label %for.body8.preheader, label %for.cond.cleanup7

for.body8.preheader:                              ; preds = %for.body
  br i1 %11, label %for.cond.cleanup7.loopexit.unr-lcssa, label %for.body8.preheader81

for.body8.preheader81:                            ; preds = %for.body8.preheader
  br label %for.body8

for.cond.cleanup7.loopexit.unr-lcssa.loopexit:    ; preds = %for.body8
  %.lcssa82 = phi <64 x float> [ %49, %for.body8 ]
  %.lcssa = phi <5 x i32> [ %50, %for.body8 ]
  br label %for.cond.cleanup7.loopexit.unr-lcssa

for.cond.cleanup7.loopexit.unr-lcssa:             ; preds = %for.cond.cleanup7.loopexit.unr-lcssa.loopexit, %for.body8.preheader
  %.lcssa64.ph = phi <64 x float> [ undef, %for.body8.preheader ], [ %.lcssa82, %for.cond.cleanup7.loopexit.unr-lcssa.loopexit ]
  %.lcssa.ph = phi <5 x i32> [ undef, %for.body8.preheader ], [ %.lcssa, %for.cond.cleanup7.loopexit.unr-lcssa.loopexit ]
  %ofmValue0.058.unr = phi <64 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %for.body8.preheader ], [ %.lcssa82, %for.cond.cleanup7.loopexit.unr-lcssa.loopexit ]
  %ifmCoords0.157.unr = phi <5 x i32> [ %vecins4, %for.body8.preheader ], [ %.lcssa, %for.cond.cleanup7.loopexit.unr-lcssa.loopexit ]
  br i1 %lcmp.mod, label %for.cond.cleanup7, label %for.body8.epil.preheader

for.body8.epil.preheader:                         ; preds = %for.cond.cleanup7.loopexit.unr-lcssa
  br label %for.body8.epil

for.body8.epil:                                   ; preds = %for.body8.epil.preheader, %for.body8.epil
  %ofmValue0.058.epil = phi <64 x float> [ %16, %for.body8.epil ], [ %ofmValue0.058.unr, %for.body8.epil.preheader ]
  %ifmCoords0.157.epil = phi <5 x i32> [ %17, %for.body8.epil ], [ %ifmCoords0.157.unr, %for.body8.epil.preheader ]
  %epil.iter = phi i32 [ %epil.iter.sub, %for.body8.epil ], [ %xtraiter, %for.body8.epil.preheader ]
  %13 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords0.157.epil, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %14 = bitcast <64 x float> %13 to <64 x i32>
  %and.epil = and <64 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %15 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %and.epil, i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> %13, i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
  %16 = fmul <64 x float> %ofmValue0.058.epil, %15
  %17 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords0.157.epil, i32 64, i32 1, i8 2, i32 0, <5 x i32> %ifmCoords0.157.epil, i1 true, i1 false)
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %for.cond.cleanup7.loopexit, label %for.body8.epil, !llvm.loop !3

for.cond.cleanup7.loopexit:                       ; preds = %for.body8.epil
  %.lcssa84 = phi <64 x float> [ %16, %for.body8.epil ]
  %.lcssa83 = phi <5 x i32> [ %17, %for.body8.epil ]
  br label %for.cond.cleanup7

for.cond.cleanup7:                                ; preds = %for.cond.cleanup7.loopexit, %for.cond.cleanup7.loopexit.unr-lcssa, %for.body
  %ifmCoords0.1.lcssa = phi <5 x i32> [ %vecins4, %for.body ], [ %.lcssa.ph, %for.cond.cleanup7.loopexit.unr-lcssa ], [ %.lcssa83, %for.cond.cleanup7.loopexit ]
  %ofmValue0.0.lcssa = phi <64 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %for.body ], [ %.lcssa64.ph, %for.cond.cleanup7.loopexit.unr-lcssa ], [ %.lcssa84, %for.cond.cleanup7.loopexit ]
  %18 = tail call <64 x float> @llvm.tpc.mov.dual.group.v64f32.i1(<64 x float> %ofmValue0.0.lcssa, i32 -1, i32 0, i32 12544, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i1 true, i1 false) #4
  %19 = tail call <64 x float> @llvm.tpc.mov.dual.group.v64f32.i1(<64 x float> %ofmValue0.0.lcssa, i32 -1, i32 0, i32 15104, <64 x float> %18, i1 true, i1 false) #4
  %20 = fmul <64 x float> %ofmValue0.0.lcssa, %19
  %21 = tail call <64 x float> @llvm.tpc.mov.dual.group.v64f32.i1(<64 x float> %20, i32 -1, i32 0, i32 12800, <64 x float> %19, i1 true, i1 false) #4
  %22 = fmul <64 x float> %20, %21
  %23 = tail call <64 x float> @llvm.tpc.mov.group.v64f32.v64f32.i1(<64 x float> %22, i32 -1, i32 63, <64 x float> %21, i1 true, i1 false) #4
  %24 = fmul <64 x float> %22, %23
  %25 = tail call <64 x float> @llvm.tpc.shuffle.v64f32.i1(<64 x float> %24, <256 x i8> %3, i8 0, i32 0, <64 x float> %23, i1 true, i1 false) #4
  %26 = fmul <64 x float> %24, %25
  %27 = tail call <64 x float> @llvm.tpc.shuffle.v64f32.i1(<64 x float> %26, <256 x i8> %5, i8 0, i32 0, <64 x float> %25, i1 true, i1 false) #4
  %28 = fmul <64 x float> %26, %27
  %29 = tail call <64 x float> @llvm.tpc.shuffle.v64f32.i1(<64 x float> %28, <256 x i8> %7, i8 0, i32 0, <64 x float> %27, i1 true, i1 false) #4
  %30 = fmul <64 x float> %28, %29
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins3, i8 1, <64 x float> %30, i32 0, i1 true, i1 false)
  %add15 = add i32 %w.063, 1
  %exitcond = icmp eq i32 %add15, %vecext1
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !6

for.body8:                                        ; preds = %for.body8.preheader81, %for.body8
  %ofmValue0.058 = phi <64 x float> [ %49, %for.body8 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %for.body8.preheader81 ]
  %ifmCoords0.157 = phi <5 x i32> [ %50, %for.body8 ], [ %vecins4, %for.body8.preheader81 ]
  %niter = phi i32 [ %niter.nsub.3, %for.body8 ], [ %unroll_iter, %for.body8.preheader81 ]
  %31 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords0.157, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %32 = bitcast <64 x float> %31 to <64 x i32>
  %and = and <64 x i32> %32, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %33 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %and, i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> %31, i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
  %34 = fmul <64 x float> %ofmValue0.058, %33
  %35 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords0.157, i32 64, i32 1, i8 2, i32 0, <5 x i32> %ifmCoords0.157, i1 true, i1 false)
  %36 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %35, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %37 = bitcast <64 x float> %36 to <64 x i32>
  %and.1 = and <64 x i32> %37, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %38 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %and.1, i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> %36, i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
  %39 = fmul <64 x float> %34, %38
  %40 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %35, i32 64, i32 1, i8 2, i32 0, <5 x i32> %35, i1 true, i1 false)
  %41 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %40, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %42 = bitcast <64 x float> %41 to <64 x i32>
  %and.2 = and <64 x i32> %42, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %43 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %and.2, i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> %41, i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
  %44 = fmul <64 x float> %39, %43
  %45 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %40, i32 64, i32 1, i8 2, i32 0, <5 x i32> %40, i1 true, i1 false)
  %46 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %45, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %47 = bitcast <64 x float> %46 to <64 x i32>
  %and.3 = and <64 x i32> %47, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %48 = tail call <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32> %and.3, i32 2139095040, <64 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <64 x float> %46, i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
  %49 = fmul <64 x float> %44, %48
  %50 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %45, i32 64, i32 1, i8 2, i32 0, <5 x i32> %45, i1 true, i1 false)
  %niter.nsub.3 = add i32 %niter, -4
  %niter.ncmp.3 = icmp eq i32 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.cond.cleanup7.loopexit.unr-lcssa.loopexit, label %for.body8, !llvm.loop !8
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <256 x i8> @llvm.tpc.ld.tnsr.v256i8.i1(<5 x i32>, i8, i32, <256 x i8>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32>, <5 x i32>, i32, i8, i32, <5 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.sel.grt.v64f32.v64i32.i32.v64f32.v64f32.i1(<64 x i32>, i32, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readonly
declare i32 @llvm.tpc.ld.l.i32(i32, i32, i32, i1, i1) #3

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mov.dual.group.v64f32.i1(<64 x float>, i32, i32, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mov.group.v64f32.v64f32.i1(<64 x float>, i32, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.shuffle.v64f32.i1(<64 x float>, <256 x i8>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind readonly }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4, !5}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!"llvm.loop.unroll.remainderloop.marker", i32 0}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.taken", i1 true}
!8 = distinct !{!8, !4}
