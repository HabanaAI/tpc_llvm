; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind
define dso_local void @main(float %momentum, float %eps, float %instanceSizeReciprocal) local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 0
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[VECEXT]], 6
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 0
; CHECK-NEXT:    [[MUL2:%.*]] = shl nsw i32 [[VECEXT1]], 6
; CHECK-NEXT:    [[TMP2:%.*]] = tail call i32 @llvm.tpc.ld.l.i32(i32 1048, i32 1, i32 undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP3:%.*]] = tail call i32 @llvm.tpc.ld.l.i32(i32 1056, i32 1, i32 undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP4:%.*]] = tail call i32 @llvm.tpc.ld.l.i32(i32 1064, i32 1, i32 undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[VECINIT8:%.*]] = insertelement <5 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0>, i32 [[MUL]], i32 0
; CHECK-NEXT:    [[SPLAT_SPLATINSERT:%.*]] = insertelement <64 x float> undef, float [[INSTANCESIZERECIPROCAL:%.*]], i32 0
; CHECK-NEXT:    [[SPLAT_SPLAT:%.*]] = shufflevector <64 x float> [[SPLAT_SPLATINSERT]], <64 x float> undef, <64 x i32> zeroinitializer
; CHECK-NEXT:    [[CMP352:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    br i1 [[CMP352]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP11344:%.*]] = icmp sgt i32 [[TMP4]], 0
; CHECK-NEXT:    [[CMP17310:%.*]] = icmp sgt i32 [[TMP3]], 0
; CHECK-NEXT:    [[CMP25291:%.*]] = icmp sgt i32 [[TMP2]], 0
; CHECK-NEXT:    [[SPLAT_SPLATINSERT45:%.*]] = insertelement <64 x float> undef, float [[EPS:%.*]], i32 0
; CHECK-NEXT:    [[SPLAT_SPLAT46:%.*]] = shufflevector <64 x float> [[SPLAT_SPLATINSERT45]], <64 x float> undef, <64 x i32> zeroinitializer
; CHECK-NEXT:    [[SUB:%.*]] = fsub float 1.000000e+00, [[MOMENTUM:%.*]]
; CHECK-NEXT:    [[SPLAT_SPLATINSERT53:%.*]] = insertelement <64 x float> undef, float [[SUB]], i32 0
; CHECK-NEXT:    [[SPLAT_SPLAT54:%.*]] = shufflevector <64 x float> [[SPLAT_SPLATINSERT53]], <64 x float> undef, <64 x i32> zeroinitializer
; CHECK-NEXT:    [[SPLAT_SPLATINSERT55:%.*]] = insertelement <64 x float> undef, float [[MOMENTUM]], i32 0
; CHECK-NEXT:    [[SPLAT_SPLAT56:%.*]] = shufflevector <64 x float> [[SPLAT_SPLATINSERT55]], <64 x float> undef, <64 x i32> zeroinitializer
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[IFMCOORDS_0357:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP12:%.*]] ]
; CHECK-NEXT:    [[OFMCOORDS_0356:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[OFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP12]] ]
; CHECK-NEXT:    [[DEPTHCOORDS_0355:%.*]] = phi <5 x i32> [ [[VECINIT8]], [[FOR_BODY_LR_PH]] ], [ [[DEPTHCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP12]] ]
; CHECK-NEXT:    [[D_0353:%.*]] = phi i32 [ [[MUL]], [[FOR_BODY_LR_PH]] ], [ [[ADD112:%.*]], [[FOR_COND_CLEANUP12]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[IFMCOORDS_0357]], i32 [[D_0353]], i32 0
; CHECK-NEXT:    [[VECINS9:%.*]] = insertelement <5 x i32> [[OFMCOORDS_0356]], i32 [[D_0353]], i32 0
; CHECK-NEXT:    br i1 [[CMP11344]], label [[FOR_BODY13_LR_PH:%.*]], label [[FOR_COND_CLEANUP12]]
; CHECK:       for.body13.lr.ph:
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <5 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 0>, i32 [[D_0353]], i32 0
; CHECK-NEXT:    br label [[FOR_BODY13:%.*]]
; CHECK:       for.cond.cleanup12.loopexit:
; CHECK-NEXT:    [[OFMCOORDS_3_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[OFMCOORDS_3_LCSSA:%.*]], [[FOR_COND_CLEANUP67:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_4_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[IFMCOORDS_4_LCSSA:%.*]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    [[VECINS44_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS44:%.*]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP12]]
; CHECK:       for.cond.cleanup12:
; CHECK-NEXT:    [[DEPTHCOORDS_1_LCSSA]] = phi <5 x i32> [ [[DEPTHCOORDS_0355]], [[FOR_BODY]] ], [ [[VECINS44_LCSSA]], [[FOR_COND_CLEANUP12_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[OFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS9]], [[FOR_BODY]] ], [ [[OFMCOORDS_3_LCSSA_LCSSA]], [[FOR_COND_CLEANUP12_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ], [ [[IFMCOORDS_4_LCSSA_LCSSA]], [[FOR_COND_CLEANUP12_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD112]] = add nsw i32 [[D_0353]], 64
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[ADD112]], [[MUL2]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]], !llvm.loop !3
; CHECK:       for.body13:
; CHECK-NEXT:    [[IFMCOORDS_1348:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY13_LR_PH]] ], [ [[IFMCOORDS_4_LCSSA]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    [[OFMCOORDS_1347:%.*]] = phi <5 x i32> [ [[VECINS9]], [[FOR_BODY13_LR_PH]] ], [ [[OFMCOORDS_3_LCSSA]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    [[DEPTHCOORDS_1346:%.*]] = phi <5 x i32> [ [[DEPTHCOORDS_0355]], [[FOR_BODY13_LR_PH]] ], [ [[VECINS44]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    [[B_0345:%.*]] = phi i32 [ 0, [[FOR_BODY13_LR_PH]] ], [ [[ADD109:%.*]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    [[VECINS14:%.*]] = insertelement <5 x i32> [[IFMCOORDS_1348]], i32 [[B_0345]], i32 3
; CHECK-NEXT:    [[VECINS15:%.*]] = insertelement <5 x i32> [[OFMCOORDS_1347]], i32 [[B_0345]], i32 3
; CHECK-NEXT:    br i1 [[CMP17310]], label [[FOR_BODY19_PREHEADER:%.*]], label [[FOR_COND_CLEANUP18:%.*]]
; CHECK:       for.body19.preheader:
; CHECK-NEXT:    br label [[FOR_BODY19:%.*]]
; CHECK:       for.cond.cleanup18.loopexit:
; CHECK-NEXT:    [[MEAN_V_0_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[MEAN_V_0_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26:%.*]] ]
; CHECK-NEXT:    [[MEAN_V_1_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[MEAN_V_1_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[MEAN_V_2_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[MEAN_V_2_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[MEAN_V_3_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[MEAN_V_3_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[VAR_V_0_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[VAR_V_0_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[VAR_V_1_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[VAR_V_1_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[VAR_V_2_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[VAR_V_2_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[VAR_V_3_1_LCSSA_LCSSA:%.*]] = phi <64 x float> [ [[VAR_V_3_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[IFMCOORDS_3_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[IFMCOORDS_3_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[VECINS23_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS23:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP18]]
; CHECK:       for.cond.cleanup18:
; CHECK-NEXT:    [[MEAN_V_0_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[MEAN_V_0_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[MEAN_V_1_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[MEAN_V_1_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[MEAN_V_2_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[MEAN_V_2_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[MEAN_V_3_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[MEAN_V_3_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_0_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[VAR_V_0_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_1_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[VAR_V_1_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_2_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[VAR_V_2_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_3_0_LCSSA:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY13]] ], [ [[VAR_V_3_1_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMCOORDS_2_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS15]], [[FOR_BODY13]] ], [ [[VECINS23_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS_2_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS14]], [[FOR_BODY13]] ], [ [[IFMCOORDS_3_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[VECINS44]] = insertelement <5 x i32> [[DEPTHCOORDS_1346]], i32 [[D_0353]], i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = fadd <64 x float> [[MEAN_V_0_0_LCSSA]], [[MEAN_V_1_0_LCSSA]]
; CHECK-NEXT:    [[TMP7:%.*]] = fadd <64 x float> [[MEAN_V_2_0_LCSSA]], [[MEAN_V_3_0_LCSSA]]
; CHECK-NEXT:    [[TMP8:%.*]] = fadd <64 x float> [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = fadd <64 x float> [[VAR_V_0_0_LCSSA]], [[VAR_V_1_0_LCSSA]]
; CHECK-NEXT:    [[TMP10:%.*]] = fadd <64 x float> [[VAR_V_2_0_LCSSA]], [[VAR_V_3_0_LCSSA]]
; CHECK-NEXT:    [[TMP11:%.*]] = fadd <64 x float> [[TMP9]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = fmul <64 x float> [[SPLAT_SPLAT]], [[TMP8]]
; CHECK-NEXT:    [[TMP13:%.*]] = fmul <64 x float> [[SPLAT_SPLAT]], [[TMP11]]
; CHECK-NEXT:    [[TMP14:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP12]], <64 x float> [[TMP12]], i8 0, i32 2, <64 x float> [[TMP13]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP15:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS44]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP16:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS44]], i8 2, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = fadd <64 x float> [[SPLAT_SPLAT46]], [[TMP14]]
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <64 x i32> @llvm.tpc.extract.exp.v64i32.v64f32.i1(<64 x float> [[TMP17]], i8 0, i32 0, <64 x i32> undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[AND_I_I:%.*]] = and <64 x i32> [[TMP18]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast <64 x i32> [[AND_I_I]] to <256 x i8>
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> [[TMP19]], <64 x float> [[TMP17]], <64 x float> [[TMP17]], i8 0, i32 2304, <64 x float> undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <128 x i32> @llvm.tpc.get.lut.entry.v128i32.v64f32.i1(<64 x float> [[TMP20]], i8 16, i8 0, i32 16384, <128 x i32> undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP22:%.*]] = shufflevector <128 x i32> [[TMP21]], <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <128 x i32> [[TMP21]], <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <64 x i32> [[TMP23]] to <64 x float>
; CHECK-NEXT:    [[SUB_I_I:%.*]] = fsub <64 x float> [[TMP20]], [[TMP24]]
; CHECK-NEXT:    [[TMP25:%.*]] = tail call <64 x float> @llvm.tpc.lookup.1c.v64f32.v64i32(<64 x i32> [[TMP22]], i32 1, i32 0, <64 x float> undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP26:%.*]] = tail call <128 x float> @llvm.tpc.lookup.2c.v128f32.v64i32(<64 x i32> [[TMP22]], i32 1, i32 0, <128 x float> undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP27:%.*]] = shufflevector <128 x float> [[TMP26]], <128 x float> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
; CHECK-NEXT:    [[TMP28:%.*]] = shufflevector <128 x float> [[TMP26]], <128 x float> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
; CHECK-NEXT:    [[TMP29:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP28]], <64 x float> [[SUB_I_I]], i8 0, i32 0, <64 x float> [[TMP27]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP30:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP29]], <64 x float> [[SUB_I_I]], i8 0, i32 0, <64 x float> [[TMP25]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP31:%.*]] = bitcast <64 x float> [[TMP30]] to <64 x i32>
; CHECK-NEXT:    [[TMP32:%.*]] = lshr <64 x i32> [[TMP18]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[SHL_I_I:%.*]] = shl <64 x i32> [[TMP32]], <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
; CHECK-NEXT:    [[SUB4_I_I:%.*]] = sub <64 x i32> [[TMP31]], [[SHL_I_I]]
; CHECK-NEXT:    [[TMP33:%.*]] = bitcast <64 x i32> [[SUB4_I_I]] to <64 x float>
; CHECK-NEXT:    [[TMP34:%.*]] = tail call <64 x float> @llvm.tpc.fclass.v64f32.i1(<64 x float> [[TMP17]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP35:%.*]] = tail call <64 x float> @llvm.tpc.calc.fp.special.v64f32.i1(<64 x float> [[TMP34]], <64 x float> undef, i8 0, i32 1, <64 x float> [[TMP33]], i1 true, i1 false) #4
; CHECK-NEXT:    [[TMP36:%.*]] = fmul <64 x float> [[TMP16]], [[TMP35]]
; CHECK-NEXT:    [[TMP37:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP36]], <64 x float> [[TMP12]], i8 0, i32 2, <64 x float> [[TMP15]], i1 true, i1 false)
; CHECK-NEXT:    [[VECINIT52:%.*]] = insertelement <5 x i32> [[TMP5]], i32 [[B_0345]], i32 1
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINIT52]], i8 7, <64 x float> [[TMP35]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINIT52]], i8 6, <64 x float> [[TMP12]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP38:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS44]], i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP39:%.*]] = fmul <64 x float> [[SPLAT_SPLAT54]], [[TMP38]]
; CHECK-NEXT:    [[TMP40:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP12]], <64 x float> [[SPLAT_SPLAT56]], i8 0, i32 0, <64 x float> [[TMP39]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS44]], i8 8, <64 x float> [[TMP40]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP41:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS44]], i8 4, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP42:%.*]] = fmul <64 x float> [[SPLAT_SPLAT54]], [[TMP41]]
; CHECK-NEXT:    [[TMP43:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP14]], <64 x float> [[SPLAT_SPLAT56]], i8 0, i32 0, <64 x float> [[TMP42]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[VECINS44]], i8 9, <64 x float> [[TMP43]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[VECINS62:%.*]] = insertelement <5 x i32> [[IFMCOORDS_2_LCSSA]], i32 [[B_0345]], i32 3
; CHECK-NEXT:    [[VECINS63:%.*]] = insertelement <5 x i32> [[OFMCOORDS_2_LCSSA]], i32 [[B_0345]], i32 3
; CHECK-NEXT:    br i1 [[CMP17310]], label [[FOR_BODY68_PREHEADER:%.*]], label [[FOR_COND_CLEANUP67]]
; CHECK:       for.body68.preheader:
; CHECK-NEXT:    br label [[FOR_BODY68:%.*]]
; CHECK:       for.body19:
; CHECK-NEXT:    [[IFMCOORDS_2321:%.*]] = phi <5 x i32> [ [[IFMCOORDS_3_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[VECINS14]], [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_2320:%.*]] = phi <5 x i32> [ [[VECINS23]], [[FOR_COND_CLEANUP26]] ], [ [[VECINS15]], [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[H_0319:%.*]] = phi i32 [ [[ADD42:%.*]], [[FOR_COND_CLEANUP26]] ], [ 0, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[VAR_V_3_0318:%.*]] = phi <64 x float> [ [[VAR_V_3_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[VAR_V_2_0317:%.*]] = phi <64 x float> [ [[VAR_V_2_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[VAR_V_1_0316:%.*]] = phi <64 x float> [ [[VAR_V_1_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[VAR_V_0_0315:%.*]] = phi <64 x float> [ [[VAR_V_0_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[MEAN_V_3_0314:%.*]] = phi <64 x float> [ [[MEAN_V_3_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[MEAN_V_2_0313:%.*]] = phi <64 x float> [ [[MEAN_V_2_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[MEAN_V_1_0312:%.*]] = phi <64 x float> [ [[MEAN_V_1_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[MEAN_V_0_0311:%.*]] = phi <64 x float> [ [[MEAN_V_0_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ zeroinitializer, [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <5 x i32> [[IFMCOORDS_2321]], i32 0, i32 1
; CHECK-NEXT:    [[VECINS22:%.*]] = insertelement <5 x i32> [[TMP44]], i32 [[H_0319]], i32 2
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <5 x i32> [[OFMCOORDS_2320]], i32 0, i32 1
; CHECK-NEXT:    [[VECINS23]] = insertelement <5 x i32> [[TMP45]], i32 [[H_0319]], i32 2
; CHECK-NEXT:    br i1 [[CMP25291]], label [[FOR_BODY27_PREHEADER:%.*]], label [[FOR_COND_CLEANUP26]]
; CHECK:       for.body27.preheader:
; CHECK-NEXT:    [[TMP46:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS22]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP47:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS22]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[VECINS22]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP48:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP47]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP49:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP47]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP47]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP50:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP49]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP51:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP49]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP49]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP52:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP51]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP53:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP51]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP51]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i32 4, [[TMP2]]
; CHECK-NEXT:    br i1 [[TMP54]], label [[FOR_COND_CLEANUP26_LOOPEXIT:%.*]], label [[FOR_BODY27_PREHEADER411:%.*]]
; CHECK:       for.body27.preheader411:
; CHECK-NEXT:    br label [[FOR_BODY27:%.*]]
; CHECK:       for.cond.cleanup26.loopexit.loopexit:
; CHECK-NEXT:    [[DOTLCSSA424:%.*]] = phi <64 x float> [ [[TMP71:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA423:%.*]] = phi <64 x float> [ [[TMP73:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA422:%.*]] = phi <64 x float> [ [[TMP75:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA421:%.*]] = phi <64 x float> [ [[TMP77:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA420:%.*]] = phi <5 x i32> [ [[TMP78:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA419:%.*]] = phi <64 x float> [ [[TMP79:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA418:%.*]] = phi <64 x float> [ [[TMP80:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA417:%.*]] = phi <64 x float> [ [[TMP81:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA416:%.*]] = phi <64 x float> [ [[TMP82:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA415:%.*]] = phi <64 x float> [ [[TMP83:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA414:%.*]] = phi <64 x float> [ [[TMP84:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA413:%.*]] = phi <64 x float> [ [[TMP85:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[DOTLCSSA412:%.*]] = phi <64 x float> [ [[TMP86:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP26_LOOPEXIT]]
; CHECK:       for.cond.cleanup26.loopexit:
; CHECK-NEXT:    [[DOTLCSSA407:%.*]] = phi <5 x i32> [ [[TMP53]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA420]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[DOTLCSSA406:%.*]] = phi <64 x float> [ [[MEAN_V_0_0311]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA419]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA405:%.*]] = phi <64 x float> [ [[MEAN_V_1_0312]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA418]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA404:%.*]] = phi <64 x float> [ [[MEAN_V_2_0313]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA417]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA403:%.*]] = phi <64 x float> [ [[MEAN_V_3_0314]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA416]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA402:%.*]] = phi <64 x float> [ [[VAR_V_0_0315]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA415]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA401:%.*]] = phi <64 x float> [ [[VAR_V_1_0316]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA414]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA400:%.*]] = phi <64 x float> [ [[VAR_V_2_0317]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA413]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <64 x float> [ [[VAR_V_3_0318]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA412]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP55:%.*]] = phi <64 x float> [ [[TMP46]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA424]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP56:%.*]] = phi <64 x float> [ [[TMP48]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA423]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP57:%.*]] = phi <64 x float> [ [[TMP50]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA422]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP58:%.*]] = phi <64 x float> [ [[TMP52]], [[FOR_BODY27_PREHEADER]] ], [ [[DOTLCSSA421]], [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP59:%.*]] = fadd <64 x float> [[DOTLCSSA406]], [[TMP55]]
; CHECK-NEXT:    [[TMP60:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP55]], <64 x float> [[TMP55]], i8 0, i32 0, <64 x float> [[DOTLCSSA402]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP61:%.*]] = fadd <64 x float> [[DOTLCSSA405]], [[TMP56]]
; CHECK-NEXT:    [[TMP62:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP56]], <64 x float> [[TMP56]], i8 0, i32 0, <64 x float> [[DOTLCSSA401]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP63:%.*]] = fadd <64 x float> [[DOTLCSSA404]], [[TMP57]]
; CHECK-NEXT:    [[TMP64:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP57]], <64 x float> [[TMP57]], i8 0, i32 0, <64 x float> [[DOTLCSSA400]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP65:%.*]] = fadd <64 x float> [[DOTLCSSA403]], [[TMP58]]
; CHECK-NEXT:    [[TMP66:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP58]], <64 x float> [[TMP58]], i8 0, i32 0, <64 x float> [[DOTLCSSA]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP26]]
; CHECK:       for.cond.cleanup26:
; CHECK-NEXT:    [[MEAN_V_0_1_LCSSA]] = phi <64 x float> [ [[MEAN_V_0_0311]], [[FOR_BODY19]] ], [ [[TMP59]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[MEAN_V_1_1_LCSSA]] = phi <64 x float> [ [[MEAN_V_1_0312]], [[FOR_BODY19]] ], [ [[TMP61]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[MEAN_V_2_1_LCSSA]] = phi <64 x float> [ [[MEAN_V_2_0313]], [[FOR_BODY19]] ], [ [[TMP63]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[MEAN_V_3_1_LCSSA]] = phi <64 x float> [ [[MEAN_V_3_0314]], [[FOR_BODY19]] ], [ [[TMP65]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_0_1_LCSSA]] = phi <64 x float> [ [[VAR_V_0_0315]], [[FOR_BODY19]] ], [ [[TMP60]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_1_1_LCSSA]] = phi <64 x float> [ [[VAR_V_1_0316]], [[FOR_BODY19]] ], [ [[TMP62]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_2_1_LCSSA]] = phi <64 x float> [ [[VAR_V_2_0317]], [[FOR_BODY19]] ], [ [[TMP64]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[VAR_V_3_1_LCSSA]] = phi <64 x float> [ [[VAR_V_3_0318]], [[FOR_BODY19]] ], [ [[TMP66]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS_3_LCSSA]] = phi <5 x i32> [ [[VECINS22]], [[FOR_BODY19]] ], [ [[DOTLCSSA407]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD42]] = add nuw nsw i32 [[H_0319]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[ADD42]], [[TMP3]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP18_LOOPEXIT]], label [[FOR_BODY19]], !llvm.loop !5
; CHECK:       for.body27:
; CHECK-NEXT:    [[TMP67:%.*]] = phi <64 x float> [ [[TMP71]], [[FOR_BODY27]] ], [ [[TMP46]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[TMP68:%.*]] = phi <64 x float> [ [[TMP73]], [[FOR_BODY27]] ], [ [[TMP48]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[TMP69:%.*]] = phi <64 x float> [ [[TMP75]], [[FOR_BODY27]] ], [ [[TMP50]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[TMP70:%.*]] = phi <64 x float> [ [[TMP77]], [[FOR_BODY27]] ], [ [[TMP52]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[IFMCOORDS_3301:%.*]] = phi <5 x i32> [ [[TMP78]], [[FOR_BODY27]] ], [ [[TMP53]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[W_0300:%.*]] = phi i32 [ [[ADD40:%.*]], [[FOR_BODY27]] ], [ 4, [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[VAR_V_3_1299:%.*]] = phi <64 x float> [ [[TMP86]], [[FOR_BODY27]] ], [ [[VAR_V_3_0318]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[VAR_V_2_1298:%.*]] = phi <64 x float> [ [[TMP85]], [[FOR_BODY27]] ], [ [[VAR_V_2_0317]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[VAR_V_1_1297:%.*]] = phi <64 x float> [ [[TMP84]], [[FOR_BODY27]] ], [ [[VAR_V_1_0316]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[VAR_V_0_1296:%.*]] = phi <64 x float> [ [[TMP83]], [[FOR_BODY27]] ], [ [[VAR_V_0_0315]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[MEAN_V_3_1295:%.*]] = phi <64 x float> [ [[TMP82]], [[FOR_BODY27]] ], [ [[MEAN_V_3_0314]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[MEAN_V_2_1294:%.*]] = phi <64 x float> [ [[TMP81]], [[FOR_BODY27]] ], [ [[MEAN_V_2_0313]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[MEAN_V_1_1293:%.*]] = phi <64 x float> [ [[TMP80]], [[FOR_BODY27]] ], [ [[MEAN_V_1_0312]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[MEAN_V_0_1292:%.*]] = phi <64 x float> [ [[TMP79]], [[FOR_BODY27]] ], [ [[MEAN_V_0_0311]], [[FOR_BODY27_PREHEADER411]] ]
; CHECK-NEXT:    [[TMP71]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_3301]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP72:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_3301]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_3301]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP73]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP72]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP74:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP72]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP72]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP75]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP74]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP76:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP74]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP74]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP77]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP76]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP78]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP76]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP76]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP79]] = fadd <64 x float> [[MEAN_V_0_1292]], [[TMP67]]
; CHECK-NEXT:    [[TMP80]] = fadd <64 x float> [[MEAN_V_1_1293]], [[TMP68]]
; CHECK-NEXT:    [[TMP81]] = fadd <64 x float> [[MEAN_V_2_1294]], [[TMP69]]
; CHECK-NEXT:    [[TMP82]] = fadd <64 x float> [[MEAN_V_3_1295]], [[TMP70]]
; CHECK-NEXT:    [[TMP83]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP67]], <64 x float> [[TMP67]], i8 0, i32 0, <64 x float> [[VAR_V_0_1296]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP84]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP68]], <64 x float> [[TMP68]], i8 0, i32 0, <64 x float> [[VAR_V_1_1297]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP85]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP69]], <64 x float> [[TMP69]], i8 0, i32 0, <64 x float> [[VAR_V_2_1298]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP86]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP70]], <64 x float> [[TMP70]], i8 0, i32 0, <64 x float> [[VAR_V_3_1299]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD40]] = add nuw nsw i32 [[W_0300]], 4
; CHECK-NEXT:    [[CMP25:%.*]] = icmp slt i32 [[ADD40]], [[TMP2]]
; CHECK-NEXT:    br i1 [[CMP25]], label [[FOR_BODY27]], label [[FOR_COND_CLEANUP26_LOOPEXIT_LOOPEXIT]], !llvm.loop !6
; CHECK:       for.cond.cleanup67.loopexit:
; CHECK-NEXT:    [[OFMCOORDS_4_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[OFMCOORDS_4_LCSSA:%.*]], [[FOR_COND_CLEANUP76:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_5_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[IFMCOORDS_5_LCSSA:%.*]], [[FOR_COND_CLEANUP76]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP67]]
; CHECK:       for.cond.cleanup67:
; CHECK-NEXT:    [[OFMCOORDS_3_LCSSA]] = phi <5 x i32> [ [[VECINS63]], [[FOR_COND_CLEANUP18]] ], [ [[OFMCOORDS_4_LCSSA_LCSSA]], [[FOR_COND_CLEANUP67_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_4_LCSSA]] = phi <5 x i32> [ [[VECINS62]], [[FOR_COND_CLEANUP18]] ], [ [[IFMCOORDS_5_LCSSA_LCSSA]], [[FOR_COND_CLEANUP67_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD109]] = add nuw nsw i32 [[B_0345]], 1
; CHECK-NEXT:    [[EXITCOND369:%.*]] = icmp eq i32 [[ADD109]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND369]], label [[FOR_COND_CLEANUP12_LOOPEXIT]], label [[FOR_BODY13]], !llvm.loop !8
; CHECK:       for.body68:
; CHECK-NEXT:    [[H64_0341:%.*]] = phi i32 [ [[ADD106:%.*]], [[FOR_COND_CLEANUP76]] ], [ 0, [[FOR_BODY68_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_4340:%.*]] = phi <5 x i32> [ [[IFMCOORDS_5_LCSSA]], [[FOR_COND_CLEANUP76]] ], [ [[VECINS62]], [[FOR_BODY68_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_3339:%.*]] = phi <5 x i32> [ [[OFMCOORDS_4_LCSSA]], [[FOR_COND_CLEANUP76]] ], [ [[VECINS63]], [[FOR_BODY68_PREHEADER]] ]
; CHECK-NEXT:    [[TMP87:%.*]] = insertelement <5 x i32> [[IFMCOORDS_4340]], i32 0, i32 1
; CHECK-NEXT:    [[VECINS71:%.*]] = insertelement <5 x i32> [[TMP87]], i32 [[H64_0341]], i32 2
; CHECK-NEXT:    [[TMP88:%.*]] = insertelement <5 x i32> [[OFMCOORDS_3339]], i32 0, i32 1
; CHECK-NEXT:    [[VECINS72:%.*]] = insertelement <5 x i32> [[TMP88]], i32 [[H64_0341]], i32 2
; CHECK-NEXT:    br i1 [[CMP25291]], label [[FOR_BODY77_PREHEADER:%.*]], label [[FOR_COND_CLEANUP76]]
; CHECK:       for.body77.preheader:
; CHECK-NEXT:    [[TMP89:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS71]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP90:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS71]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[VECINS71]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP91:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP90]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP92:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP90]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP90]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP93:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP92]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP94:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP92]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP92]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP95:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP94]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP96:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP94]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP94]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP97:%.*]] = icmp slt i32 4, [[TMP2]]
; CHECK-NEXT:    br i1 [[TMP97]], label [[FOR_COND_CLEANUP76_LOOPEXIT:%.*]], label [[FOR_BODY77_PREHEADER410:%.*]]
; CHECK:       for.body77.preheader410:
; CHECK-NEXT:    br label [[FOR_BODY77:%.*]]
; CHECK:       for.cond.cleanup76.loopexit.loopexit:
; CHECK-NEXT:    [[DOTLCSSA430:%.*]] = phi <64 x float> [ [[TMP113:%.*]], [[FOR_BODY77]] ]
; CHECK-NEXT:    [[DOTLCSSA429:%.*]] = phi <64 x float> [ [[TMP115:%.*]], [[FOR_BODY77]] ]
; CHECK-NEXT:    [[DOTLCSSA428:%.*]] = phi <64 x float> [ [[TMP117:%.*]], [[FOR_BODY77]] ]
; CHECK-NEXT:    [[DOTLCSSA427:%.*]] = phi <64 x float> [ [[TMP119:%.*]], [[FOR_BODY77]] ]
; CHECK-NEXT:    [[DOTLCSSA426:%.*]] = phi <5 x i32> [ [[TMP120:%.*]], [[FOR_BODY77]] ]
; CHECK-NEXT:    [[DOTLCSSA425:%.*]] = phi <5 x i32> [ [[TMP128:%.*]], [[FOR_BODY77]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP76_LOOPEXIT]]
; CHECK:       for.cond.cleanup76.loopexit:
; CHECK-NEXT:    [[DOTLCSSA409:%.*]] = phi <5 x i32> [ [[TMP96]], [[FOR_BODY77_PREHEADER]] ], [ [[DOTLCSSA426]], [[FOR_COND_CLEANUP76_LOOPEXIT_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[DOTLCSSA408:%.*]] = phi <5 x i32> [ [[VECINS72]], [[FOR_BODY77_PREHEADER]] ], [ [[DOTLCSSA425]], [[FOR_COND_CLEANUP76_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP98:%.*]] = phi <64 x float> [ [[TMP89]], [[FOR_BODY77_PREHEADER]] ], [ [[DOTLCSSA430]], [[FOR_COND_CLEANUP76_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP99:%.*]] = phi <64 x float> [ [[TMP91]], [[FOR_BODY77_PREHEADER]] ], [ [[DOTLCSSA429]], [[FOR_COND_CLEANUP76_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP100:%.*]] = phi <64 x float> [ [[TMP93]], [[FOR_BODY77_PREHEADER]] ], [ [[DOTLCSSA428]], [[FOR_COND_CLEANUP76_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP101:%.*]] = phi <64 x float> [ [[TMP95]], [[FOR_BODY77_PREHEADER]] ], [ [[DOTLCSSA427]], [[FOR_COND_CLEANUP76_LOOPEXIT_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP102:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP98]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[DOTLCSSA408]], i8 5, <64 x float> [[TMP102]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP103:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP99]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP104:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[DOTLCSSA408]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[DOTLCSSA408]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP104]], i8 5, <64 x float> [[TMP103]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP105:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP100]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP106:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP104]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP104]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP106]], i8 5, <64 x float> [[TMP105]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP107:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP101]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP108:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP106]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP106]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP108]], i8 5, <64 x float> [[TMP107]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP76]]
; CHECK:       for.cond.cleanup76:
; CHECK-NEXT:    [[OFMCOORDS_4_LCSSA]] = phi <5 x i32> [ [[VECINS72]], [[FOR_BODY68]] ], [ [[DOTLCSSA408]], [[FOR_COND_CLEANUP76_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS_5_LCSSA]] = phi <5 x i32> [ [[VECINS71]], [[FOR_BODY68]] ], [ [[DOTLCSSA409]], [[FOR_COND_CLEANUP76_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD106]] = add nuw nsw i32 [[H64_0341]], 1
; CHECK-NEXT:    [[EXITCOND368:%.*]] = icmp eq i32 [[ADD106]], [[TMP3]]
; CHECK-NEXT:    br i1 [[EXITCOND368]], label [[FOR_COND_CLEANUP67_LOOPEXIT]], label [[FOR_BODY68]], !llvm.loop !9
; CHECK:       for.body77:
; CHECK-NEXT:    [[TMP109:%.*]] = phi <64 x float> [ [[TMP113]], [[FOR_BODY77]] ], [ [[TMP89]], [[FOR_BODY77_PREHEADER410]] ]
; CHECK-NEXT:    [[TMP110:%.*]] = phi <64 x float> [ [[TMP115]], [[FOR_BODY77]] ], [ [[TMP91]], [[FOR_BODY77_PREHEADER410]] ]
; CHECK-NEXT:    [[TMP111:%.*]] = phi <64 x float> [ [[TMP117]], [[FOR_BODY77]] ], [ [[TMP93]], [[FOR_BODY77_PREHEADER410]] ]
; CHECK-NEXT:    [[TMP112:%.*]] = phi <64 x float> [ [[TMP119]], [[FOR_BODY77]] ], [ [[TMP95]], [[FOR_BODY77_PREHEADER410]] ]
; CHECK-NEXT:    [[W73_0335:%.*]] = phi i32 [ [[ADD103:%.*]], [[FOR_BODY77]] ], [ 4, [[FOR_BODY77_PREHEADER410]] ]
; CHECK-NEXT:    [[IFMCOORDS_5334:%.*]] = phi <5 x i32> [ [[TMP120]], [[FOR_BODY77]] ], [ [[TMP96]], [[FOR_BODY77_PREHEADER410]] ]
; CHECK-NEXT:    [[OFMCOORDS_4333:%.*]] = phi <5 x i32> [ [[TMP128]], [[FOR_BODY77]] ], [ [[VECINS72]], [[FOR_BODY77_PREHEADER410]] ]
; CHECK-NEXT:    [[TMP113]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_5334]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP114:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_5334]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_5334]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP115]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP114]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP116:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP114]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP114]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP117]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP116]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP118:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP116]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP116]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP119]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP118]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP120]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP118]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP118]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP121:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP109]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP122:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP110]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP123:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP111]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP124:%.*]] = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> [[TMP112]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_4333]], i8 5, <64 x float> [[TMP121]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP125:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_4333]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_4333]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP125]], i8 5, <64 x float> [[TMP122]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP126:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP125]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP125]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP126]], i8 5, <64 x float> [[TMP123]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP127:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP126]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP126]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP127]], i8 5, <64 x float> [[TMP124]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP128]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP127]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP127]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD103]] = add nuw nsw i32 [[W73_0335]], 4
; CHECK-NEXT:    [[CMP75:%.*]] = icmp slt i32 [[ADD103]], [[TMP2]]
; CHECK-NEXT:    br i1 [[CMP75]], label [[FOR_BODY77]], label [[FOR_COND_CLEANUP76_LOOPEXIT_LOOPEXIT]], !llvm.loop !10
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 0
  %mul = shl nsw i32 %vecext, 6
  %vecext1 = extractelement <5 x i32> %add, i32 0
  %mul2 = shl nsw i32 %vecext1, 6
  %2 = tail call i32 @llvm.tpc.ld.l.i32(i32 1048, i32 1, i32 undef, i1 true, i1 false) #4
  %3 = tail call i32 @llvm.tpc.ld.l.i32(i32 1056, i32 1, i32 undef, i1 true, i1 false) #4
  %4 = tail call i32 @llvm.tpc.ld.l.i32(i32 1064, i32 1, i32 undef, i1 true, i1 false) #4
  %vecinit8 = insertelement <5 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0>, i32 %mul, i32 0
  %splat.splatinsert = insertelement <64 x float> undef, float %instanceSizeReciprocal, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> undef, <64 x i32> zeroinitializer
  %cmp352 = icmp slt i32 %mul, %mul2
  br i1 %cmp352, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp11344 = icmp sgt i32 %4, 0
  %cmp17310 = icmp sgt i32 %3, 0
  %cmp25291 = icmp sgt i32 %2, 0
  %splat.splatinsert45 = insertelement <64 x float> undef, float %eps, i32 0
  %splat.splat46 = shufflevector <64 x float> %splat.splatinsert45, <64 x float> undef, <64 x i32> zeroinitializer
  %sub = fsub float 1.000000e+00, %momentum
  %splat.splatinsert53 = insertelement <64 x float> undef, float %sub, i32 0
  %splat.splat54 = shufflevector <64 x float> %splat.splatinsert53, <64 x float> undef, <64 x i32> zeroinitializer
  %splat.splatinsert55 = insertelement <64 x float> undef, float %momentum, i32 0
  %splat.splat56 = shufflevector <64 x float> %splat.splatinsert55, <64 x float> undef, <64 x i32> zeroinitializer
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup12
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup12
  %ifmCoords.0357 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ifmCoords.1.lcssa, %for.cond.cleanup12 ]
  %ofmCoords.0356 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %ofmCoords.1.lcssa, %for.cond.cleanup12 ]
  %depthCoords.0355 = phi <5 x i32> [ %vecinit8, %for.body.lr.ph ], [ %depthCoords.1.lcssa, %for.cond.cleanup12 ]
  %d.0353 = phi i32 [ %mul, %for.body.lr.ph ], [ %add112, %for.cond.cleanup12 ]
  %vecins = insertelement <5 x i32> %ifmCoords.0357, i32 %d.0353, i32 0
  %vecins9 = insertelement <5 x i32> %ofmCoords.0356, i32 %d.0353, i32 0
  br i1 %cmp11344, label %for.body13.lr.ph, label %for.cond.cleanup12

for.body13.lr.ph:                                 ; preds = %for.body
  %5 = insertelement <5 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 0>, i32 %d.0353, i32 0
  br label %for.body13

for.cond.cleanup12.loopexit:                      ; preds = %for.cond.cleanup67
  %ofmCoords.3.lcssa.lcssa = phi <5 x i32> [ %ofmCoords.3.lcssa, %for.cond.cleanup67 ]
  %ifmCoords.4.lcssa.lcssa = phi <5 x i32> [ %ifmCoords.4.lcssa, %for.cond.cleanup67 ]
  %vecins44.lcssa = phi <5 x i32> [ %vecins44, %for.cond.cleanup67 ]
  br label %for.cond.cleanup12

for.cond.cleanup12:                               ; preds = %for.cond.cleanup12.loopexit, %for.body
  %depthCoords.1.lcssa = phi <5 x i32> [ %depthCoords.0355, %for.body ], [ %vecins44.lcssa, %for.cond.cleanup12.loopexit ]
  %ofmCoords.1.lcssa = phi <5 x i32> [ %vecins9, %for.body ], [ %ofmCoords.3.lcssa.lcssa, %for.cond.cleanup12.loopexit ]
  %ifmCoords.1.lcssa = phi <5 x i32> [ %vecins, %for.body ], [ %ifmCoords.4.lcssa.lcssa, %for.cond.cleanup12.loopexit ]
  %add112 = add nsw i32 %d.0353, 64
  %cmp = icmp slt i32 %add112, %mul2
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit, !llvm.loop !3

for.body13:                                       ; preds = %for.cond.cleanup67, %for.body13.lr.ph
  %ifmCoords.1348 = phi <5 x i32> [ %vecins, %for.body13.lr.ph ], [ %ifmCoords.4.lcssa, %for.cond.cleanup67 ]
  %ofmCoords.1347 = phi <5 x i32> [ %vecins9, %for.body13.lr.ph ], [ %ofmCoords.3.lcssa, %for.cond.cleanup67 ]
  %depthCoords.1346 = phi <5 x i32> [ %depthCoords.0355, %for.body13.lr.ph ], [ %vecins44, %for.cond.cleanup67 ]
  %b.0345 = phi i32 [ 0, %for.body13.lr.ph ], [ %add109, %for.cond.cleanup67 ]
  %vecins14 = insertelement <5 x i32> %ifmCoords.1348, i32 %b.0345, i32 3
  %vecins15 = insertelement <5 x i32> %ofmCoords.1347, i32 %b.0345, i32 3
  br i1 %cmp17310, label %for.body19.preheader, label %for.cond.cleanup18

for.body19.preheader:                             ; preds = %for.body13
  br label %for.body19

for.cond.cleanup18.loopexit:                      ; preds = %for.cond.cleanup26
  %mean_v_0.1.lcssa.lcssa = phi <64 x float> [ %mean_v_0.1.lcssa, %for.cond.cleanup26 ]
  %mean_v_1.1.lcssa.lcssa = phi <64 x float> [ %mean_v_1.1.lcssa, %for.cond.cleanup26 ]
  %mean_v_2.1.lcssa.lcssa = phi <64 x float> [ %mean_v_2.1.lcssa, %for.cond.cleanup26 ]
  %mean_v_3.1.lcssa.lcssa = phi <64 x float> [ %mean_v_3.1.lcssa, %for.cond.cleanup26 ]
  %var_v_0.1.lcssa.lcssa = phi <64 x float> [ %var_v_0.1.lcssa, %for.cond.cleanup26 ]
  %var_v_1.1.lcssa.lcssa = phi <64 x float> [ %var_v_1.1.lcssa, %for.cond.cleanup26 ]
  %var_v_2.1.lcssa.lcssa = phi <64 x float> [ %var_v_2.1.lcssa, %for.cond.cleanup26 ]
  %var_v_3.1.lcssa.lcssa = phi <64 x float> [ %var_v_3.1.lcssa, %for.cond.cleanup26 ]
  %ifmCoords.3.lcssa.lcssa = phi <5 x i32> [ %ifmCoords.3.lcssa, %for.cond.cleanup26 ]
  %vecins23.lcssa = phi <5 x i32> [ %vecins23, %for.cond.cleanup26 ]
  br label %for.cond.cleanup18

for.cond.cleanup18:                               ; preds = %for.cond.cleanup18.loopexit, %for.body13
  %mean_v_0.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %mean_v_0.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %mean_v_1.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %mean_v_1.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %mean_v_2.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %mean_v_2.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %mean_v_3.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %mean_v_3.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %var_v_0.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %var_v_0.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %var_v_1.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %var_v_1.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %var_v_2.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %var_v_2.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %var_v_3.0.lcssa = phi <64 x float> [ zeroinitializer, %for.body13 ], [ %var_v_3.1.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %ofmCoords.2.lcssa = phi <5 x i32> [ %vecins15, %for.body13 ], [ %vecins23.lcssa, %for.cond.cleanup18.loopexit ]
  %ifmCoords.2.lcssa = phi <5 x i32> [ %vecins14, %for.body13 ], [ %ifmCoords.3.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %vecins44 = insertelement <5 x i32> %depthCoords.1346, i32 %d.0353, i32 0
  %6 = fadd <64 x float> %mean_v_0.0.lcssa, %mean_v_1.0.lcssa
  %7 = fadd <64 x float> %mean_v_2.0.lcssa, %mean_v_3.0.lcssa
  %8 = fadd <64 x float> %6, %7
  %9 = fadd <64 x float> %var_v_0.0.lcssa, %var_v_1.0.lcssa
  %10 = fadd <64 x float> %var_v_2.0.lcssa, %var_v_3.0.lcssa
  %11 = fadd <64 x float> %9, %10
  %12 = fmul <64 x float> %splat.splat, %8
  %13 = fmul <64 x float> %splat.splat, %11
  %14 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %12, <64 x float> %12, i8 0, i32 2, <64 x float> %13, i1 true, i1 false)
  %15 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins44, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %16 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins44, i8 2, i32 0, <64 x float> undef, i1 true, i1 false)
  %17 = fadd <64 x float> %splat.splat46, %14
  %18 = tail call <64 x i32> @llvm.tpc.extract.exp.v64i32.v64f32.i1(<64 x float> %17, i8 0, i32 0, <64 x i32> undef, i1 true, i1 false) #4
  %and.i.i = and <64 x i32> %18, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %19 = bitcast <64 x i32> %and.i.i to <256 x i8>
  %20 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %19, <64 x float> %17, <64 x float> %17, i8 0, i32 2304, <64 x float> undef, i1 true, i1 false) #4
  %21 = tail call <128 x i32> @llvm.tpc.get.lut.entry.v128i32.v64f32.i1(<64 x float> %20, i8 16, i8 0, i32 16384, <128 x i32> undef, i1 true, i1 false) #4
  %22 = shufflevector <128 x i32> %21, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %23 = shufflevector <128 x i32> %21, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %24 = bitcast <64 x i32> %23 to <64 x float>
  %sub.i.i = fsub <64 x float> %20, %24
  %25 = tail call <64 x float> @llvm.tpc.lookup.1c.v64f32.v64i32(<64 x i32> %22, i32 1, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %26 = tail call <128 x float> @llvm.tpc.lookup.2c.v128f32.v64i32(<64 x i32> %22, i32 1, i32 0, <128 x float> undef, i1 true, i1 false) #4
  %27 = shufflevector <128 x float> %26, <128 x float> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %28 = shufflevector <128 x float> %26, <128 x float> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %29 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %28, <64 x float> %sub.i.i, i8 0, i32 0, <64 x float> %27, i1 true, i1 false) #4
  %30 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %29, <64 x float> %sub.i.i, i8 0, i32 0, <64 x float> %25, i1 true, i1 false) #4
  %31 = bitcast <64 x float> %30 to <64 x i32>
  %32 = lshr <64 x i32> %18, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %shl.i.i = shl <64 x i32> %32, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %sub4.i.i = sub <64 x i32> %31, %shl.i.i
  %33 = bitcast <64 x i32> %sub4.i.i to <64 x float>
  %34 = tail call <64 x float> @llvm.tpc.fclass.v64f32.i1(<64 x float> %17, i8 0, i32 0, <64 x float> undef, i1 true, i1 false) #4
  %35 = tail call <64 x float> @llvm.tpc.calc.fp.special.v64f32.i1(<64 x float> %34, <64 x float> undef, i8 0, i32 1, <64 x float> %33, i1 true, i1 false) #4
  %36 = fmul <64 x float> %16, %35
  %37 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %36, <64 x float> %12, i8 0, i32 2, <64 x float> %15, i1 true, i1 false)
  %vecinit52 = insertelement <5 x i32> %5, i32 %b.0345, i32 1
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecinit52, i8 7, <64 x float> %35, i32 0, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecinit52, i8 6, <64 x float> %12, i32 0, i1 true, i1 false)
  %38 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins44, i8 3, i32 0, <64 x float> undef, i1 true, i1 false)
  %39 = fmul <64 x float> %splat.splat54, %38
  %40 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %12, <64 x float> %splat.splat56, i8 0, i32 0, <64 x float> %39, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins44, i8 8, <64 x float> %40, i32 0, i1 true, i1 false)
  %41 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins44, i8 4, i32 0, <64 x float> undef, i1 true, i1 false)
  %42 = fmul <64 x float> %splat.splat54, %41
  %43 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %14, <64 x float> %splat.splat56, i8 0, i32 0, <64 x float> %42, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %vecins44, i8 9, <64 x float> %43, i32 0, i1 true, i1 false)
  %vecins62 = insertelement <5 x i32> %ifmCoords.2.lcssa, i32 %b.0345, i32 3
  %vecins63 = insertelement <5 x i32> %ofmCoords.2.lcssa, i32 %b.0345, i32 3
  br i1 %cmp17310, label %for.body68.preheader, label %for.cond.cleanup67

for.body68.preheader:                             ; preds = %for.cond.cleanup18
  br label %for.body68

for.body19:                                       ; preds = %for.body19.preheader, %for.cond.cleanup26
  %ifmCoords.2321 = phi <5 x i32> [ %ifmCoords.3.lcssa, %for.cond.cleanup26 ], [ %vecins14, %for.body19.preheader ]
  %ofmCoords.2320 = phi <5 x i32> [ %vecins23, %for.cond.cleanup26 ], [ %vecins15, %for.body19.preheader ]
  %h.0319 = phi i32 [ %add42, %for.cond.cleanup26 ], [ 0, %for.body19.preheader ]
  %var_v_3.0318 = phi <64 x float> [ %var_v_3.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %var_v_2.0317 = phi <64 x float> [ %var_v_2.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %var_v_1.0316 = phi <64 x float> [ %var_v_1.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %var_v_0.0315 = phi <64 x float> [ %var_v_0.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %mean_v_3.0314 = phi <64 x float> [ %mean_v_3.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %mean_v_2.0313 = phi <64 x float> [ %mean_v_2.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %mean_v_1.0312 = phi <64 x float> [ %mean_v_1.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %mean_v_0.0311 = phi <64 x float> [ %mean_v_0.1.lcssa, %for.cond.cleanup26 ], [ zeroinitializer, %for.body19.preheader ]
  %44 = insertelement <5 x i32> %ifmCoords.2321, i32 0, i32 1
  %vecins22 = insertelement <5 x i32> %44, i32 %h.0319, i32 2
  %45 = insertelement <5 x i32> %ofmCoords.2320, i32 0, i32 1
  %vecins23 = insertelement <5 x i32> %45, i32 %h.0319, i32 2
  br i1 %cmp25291, label %for.body27.preheader, label %for.cond.cleanup26

for.body27.preheader:                             ; preds = %for.body19
  %46 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins22, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %47 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %vecins22, i32 1, i32 2, i8 2, i32 0, <5 x i32> %vecins22, i1 true, i1 false)
  %48 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %47, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %49 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %47, i32 1, i32 2, i8 2, i32 0, <5 x i32> %47, i1 true, i1 false)
  %50 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %49, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %51 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %49, i32 1, i32 2, i8 2, i32 0, <5 x i32> %49, i1 true, i1 false)
  %52 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %51, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %53 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %51, i32 1, i32 2, i8 2, i32 0, <5 x i32> %51, i1 true, i1 false)
  %54 = icmp slt i32 4, %2
  br i1 %54, label %for.cond.cleanup26.loopexit, label %for.body27.preheader411

for.body27.preheader411:                          ; preds = %for.body27.preheader
  br label %for.body27

for.cond.cleanup26.loopexit.loopexit:             ; preds = %for.body27
  %.lcssa424 = phi <64 x float> [ %71, %for.body27 ]
  %.lcssa423 = phi <64 x float> [ %73, %for.body27 ]
  %.lcssa422 = phi <64 x float> [ %75, %for.body27 ]
  %.lcssa421 = phi <64 x float> [ %77, %for.body27 ]
  %.lcssa420 = phi <5 x i32> [ %78, %for.body27 ]
  %.lcssa419 = phi <64 x float> [ %79, %for.body27 ]
  %.lcssa418 = phi <64 x float> [ %80, %for.body27 ]
  %.lcssa417 = phi <64 x float> [ %81, %for.body27 ]
  %.lcssa416 = phi <64 x float> [ %82, %for.body27 ]
  %.lcssa415 = phi <64 x float> [ %83, %for.body27 ]
  %.lcssa414 = phi <64 x float> [ %84, %for.body27 ]
  %.lcssa413 = phi <64 x float> [ %85, %for.body27 ]
  %.lcssa412 = phi <64 x float> [ %86, %for.body27 ]
  br label %for.cond.cleanup26.loopexit

for.cond.cleanup26.loopexit:                      ; preds = %for.cond.cleanup26.loopexit.loopexit, %for.body27.preheader
  %.lcssa407 = phi <5 x i32> [ %53, %for.body27.preheader ], [ %.lcssa420, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa406 = phi <64 x float> [ %mean_v_0.0311, %for.body27.preheader ], [ %.lcssa419, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa405 = phi <64 x float> [ %mean_v_1.0312, %for.body27.preheader ], [ %.lcssa418, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa404 = phi <64 x float> [ %mean_v_2.0313, %for.body27.preheader ], [ %.lcssa417, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa403 = phi <64 x float> [ %mean_v_3.0314, %for.body27.preheader ], [ %.lcssa416, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa402 = phi <64 x float> [ %var_v_0.0315, %for.body27.preheader ], [ %.lcssa415, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa401 = phi <64 x float> [ %var_v_1.0316, %for.body27.preheader ], [ %.lcssa414, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa400 = phi <64 x float> [ %var_v_2.0317, %for.body27.preheader ], [ %.lcssa413, %for.cond.cleanup26.loopexit.loopexit ]
  %.lcssa = phi <64 x float> [ %var_v_3.0318, %for.body27.preheader ], [ %.lcssa412, %for.cond.cleanup26.loopexit.loopexit ]
  %55 = phi <64 x float> [ %46, %for.body27.preheader ], [ %.lcssa424, %for.cond.cleanup26.loopexit.loopexit ]
  %56 = phi <64 x float> [ %48, %for.body27.preheader ], [ %.lcssa423, %for.cond.cleanup26.loopexit.loopexit ]
  %57 = phi <64 x float> [ %50, %for.body27.preheader ], [ %.lcssa422, %for.cond.cleanup26.loopexit.loopexit ]
  %58 = phi <64 x float> [ %52, %for.body27.preheader ], [ %.lcssa421, %for.cond.cleanup26.loopexit.loopexit ]
  %59 = fadd <64 x float> %.lcssa406, %55
  %60 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %55, <64 x float> %55, i8 0, i32 0, <64 x float> %.lcssa402, i1 true, i1 false)
  %61 = fadd <64 x float> %.lcssa405, %56
  %62 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %56, <64 x float> %56, i8 0, i32 0, <64 x float> %.lcssa401, i1 true, i1 false)
  %63 = fadd <64 x float> %.lcssa404, %57
  %64 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %57, <64 x float> %57, i8 0, i32 0, <64 x float> %.lcssa400, i1 true, i1 false)
  %65 = fadd <64 x float> %.lcssa403, %58
  %66 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %58, <64 x float> %58, i8 0, i32 0, <64 x float> %.lcssa, i1 true, i1 false)
  br label %for.cond.cleanup26

for.cond.cleanup26:                               ; preds = %for.cond.cleanup26.loopexit, %for.body19
  %mean_v_0.1.lcssa = phi <64 x float> [ %mean_v_0.0311, %for.body19 ], [ %59, %for.cond.cleanup26.loopexit ]
  %mean_v_1.1.lcssa = phi <64 x float> [ %mean_v_1.0312, %for.body19 ], [ %61, %for.cond.cleanup26.loopexit ]
  %mean_v_2.1.lcssa = phi <64 x float> [ %mean_v_2.0313, %for.body19 ], [ %63, %for.cond.cleanup26.loopexit ]
  %mean_v_3.1.lcssa = phi <64 x float> [ %mean_v_3.0314, %for.body19 ], [ %65, %for.cond.cleanup26.loopexit ]
  %var_v_0.1.lcssa = phi <64 x float> [ %var_v_0.0315, %for.body19 ], [ %60, %for.cond.cleanup26.loopexit ]
  %var_v_1.1.lcssa = phi <64 x float> [ %var_v_1.0316, %for.body19 ], [ %62, %for.cond.cleanup26.loopexit ]
  %var_v_2.1.lcssa = phi <64 x float> [ %var_v_2.0317, %for.body19 ], [ %64, %for.cond.cleanup26.loopexit ]
  %var_v_3.1.lcssa = phi <64 x float> [ %var_v_3.0318, %for.body19 ], [ %66, %for.cond.cleanup26.loopexit ]
  %ifmCoords.3.lcssa = phi <5 x i32> [ %vecins22, %for.body19 ], [ %.lcssa407, %for.cond.cleanup26.loopexit ]
  %add42 = add nuw nsw i32 %h.0319, 1
  %exitcond = icmp eq i32 %add42, %3
  br i1 %exitcond, label %for.cond.cleanup18.loopexit, label %for.body19, !llvm.loop !5

for.body27:                                       ; preds = %for.body27.preheader411, %for.body27
  %67 = phi <64 x float> [ %71, %for.body27 ], [ %46, %for.body27.preheader411 ]
  %68 = phi <64 x float> [ %73, %for.body27 ], [ %48, %for.body27.preheader411 ]
  %69 = phi <64 x float> [ %75, %for.body27 ], [ %50, %for.body27.preheader411 ]
  %70 = phi <64 x float> [ %77, %for.body27 ], [ %52, %for.body27.preheader411 ]
  %ifmCoords.3301 = phi <5 x i32> [ %78, %for.body27 ], [ %53, %for.body27.preheader411 ]
  %w.0300 = phi i32 [ %add40, %for.body27 ], [ 4, %for.body27.preheader411 ]
  %var_v_3.1299 = phi <64 x float> [ %86, %for.body27 ], [ %var_v_3.0318, %for.body27.preheader411 ]
  %var_v_2.1298 = phi <64 x float> [ %85, %for.body27 ], [ %var_v_2.0317, %for.body27.preheader411 ]
  %var_v_1.1297 = phi <64 x float> [ %84, %for.body27 ], [ %var_v_1.0316, %for.body27.preheader411 ]
  %var_v_0.1296 = phi <64 x float> [ %83, %for.body27 ], [ %var_v_0.0315, %for.body27.preheader411 ]
  %mean_v_3.1295 = phi <64 x float> [ %82, %for.body27 ], [ %mean_v_3.0314, %for.body27.preheader411 ]
  %mean_v_2.1294 = phi <64 x float> [ %81, %for.body27 ], [ %mean_v_2.0313, %for.body27.preheader411 ]
  %mean_v_1.1293 = phi <64 x float> [ %80, %for.body27 ], [ %mean_v_1.0312, %for.body27.preheader411 ]
  %mean_v_0.1292 = phi <64 x float> [ %79, %for.body27 ], [ %mean_v_0.0311, %for.body27.preheader411 ]
  %71 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.3301, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %72 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.3301, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.3301, i1 true, i1 false)
  %73 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %72, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %74 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %72, i32 1, i32 2, i8 2, i32 0, <5 x i32> %72, i1 true, i1 false)
  %75 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %74, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %76 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %74, i32 1, i32 2, i8 2, i32 0, <5 x i32> %74, i1 true, i1 false)
  %77 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %76, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %78 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %76, i32 1, i32 2, i8 2, i32 0, <5 x i32> %76, i1 true, i1 false)
  %79 = fadd <64 x float> %mean_v_0.1292, %67
  %80 = fadd <64 x float> %mean_v_1.1293, %68
  %81 = fadd <64 x float> %mean_v_2.1294, %69
  %82 = fadd <64 x float> %mean_v_3.1295, %70
  %83 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %67, <64 x float> %67, i8 0, i32 0, <64 x float> %var_v_0.1296, i1 true, i1 false)
  %84 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %68, <64 x float> %68, i8 0, i32 0, <64 x float> %var_v_1.1297, i1 true, i1 false)
  %85 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %69, <64 x float> %69, i8 0, i32 0, <64 x float> %var_v_2.1298, i1 true, i1 false)
  %86 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %70, <64 x float> %70, i8 0, i32 0, <64 x float> %var_v_3.1299, i1 true, i1 false)
  %add40 = add nuw nsw i32 %w.0300, 4
  %cmp25 = icmp slt i32 %add40, %2
  br i1 %cmp25, label %for.body27, label %for.cond.cleanup26.loopexit.loopexit, !llvm.loop !6

for.cond.cleanup67.loopexit:                      ; preds = %for.cond.cleanup76
  %ofmCoords.4.lcssa.lcssa = phi <5 x i32> [ %ofmCoords.4.lcssa, %for.cond.cleanup76 ]
  %ifmCoords.5.lcssa.lcssa = phi <5 x i32> [ %ifmCoords.5.lcssa, %for.cond.cleanup76 ]
  br label %for.cond.cleanup67

for.cond.cleanup67:                               ; preds = %for.cond.cleanup67.loopexit, %for.cond.cleanup18
  %ofmCoords.3.lcssa = phi <5 x i32> [ %vecins63, %for.cond.cleanup18 ], [ %ofmCoords.4.lcssa.lcssa, %for.cond.cleanup67.loopexit ]
  %ifmCoords.4.lcssa = phi <5 x i32> [ %vecins62, %for.cond.cleanup18 ], [ %ifmCoords.5.lcssa.lcssa, %for.cond.cleanup67.loopexit ]
  %add109 = add nuw nsw i32 %b.0345, 1
  %exitcond369 = icmp eq i32 %add109, %4
  br i1 %exitcond369, label %for.cond.cleanup12.loopexit, label %for.body13, !llvm.loop !8

for.body68:                                       ; preds = %for.body68.preheader, %for.cond.cleanup76
  %h64.0341 = phi i32 [ %add106, %for.cond.cleanup76 ], [ 0, %for.body68.preheader ]
  %ifmCoords.4340 = phi <5 x i32> [ %ifmCoords.5.lcssa, %for.cond.cleanup76 ], [ %vecins62, %for.body68.preheader ]
  %ofmCoords.3339 = phi <5 x i32> [ %ofmCoords.4.lcssa, %for.cond.cleanup76 ], [ %vecins63, %for.body68.preheader ]
  %87 = insertelement <5 x i32> %ifmCoords.4340, i32 0, i32 1
  %vecins71 = insertelement <5 x i32> %87, i32 %h64.0341, i32 2
  %88 = insertelement <5 x i32> %ofmCoords.3339, i32 0, i32 1
  %vecins72 = insertelement <5 x i32> %88, i32 %h64.0341, i32 2
  br i1 %cmp25291, label %for.body77.preheader, label %for.cond.cleanup76

for.body77.preheader:                             ; preds = %for.body68
  %89 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins71, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %90 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %vecins71, i32 1, i32 2, i8 2, i32 0, <5 x i32> %vecins71, i1 true, i1 false)
  %91 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %90, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %92 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %90, i32 1, i32 2, i8 2, i32 0, <5 x i32> %90, i1 true, i1 false)
  %93 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %92, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %94 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %92, i32 1, i32 2, i8 2, i32 0, <5 x i32> %92, i1 true, i1 false)
  %95 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %94, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %96 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %94, i32 1, i32 2, i8 2, i32 0, <5 x i32> %94, i1 true, i1 false)
  %97 = icmp slt i32 4, %2
  br i1 %97, label %for.cond.cleanup76.loopexit, label %for.body77.preheader410

for.body77.preheader410:                          ; preds = %for.body77.preheader
  br label %for.body77

for.cond.cleanup76.loopexit.loopexit:             ; preds = %for.body77
  %.lcssa430 = phi <64 x float> [ %113, %for.body77 ]
  %.lcssa429 = phi <64 x float> [ %115, %for.body77 ]
  %.lcssa428 = phi <64 x float> [ %117, %for.body77 ]
  %.lcssa427 = phi <64 x float> [ %119, %for.body77 ]
  %.lcssa426 = phi <5 x i32> [ %120, %for.body77 ]
  %.lcssa425 = phi <5 x i32> [ %128, %for.body77 ]
  br label %for.cond.cleanup76.loopexit

for.cond.cleanup76.loopexit:                      ; preds = %for.cond.cleanup76.loopexit.loopexit, %for.body77.preheader
  %.lcssa409 = phi <5 x i32> [ %96, %for.body77.preheader ], [ %.lcssa426, %for.cond.cleanup76.loopexit.loopexit ]
  %.lcssa408 = phi <5 x i32> [ %vecins72, %for.body77.preheader ], [ %.lcssa425, %for.cond.cleanup76.loopexit.loopexit ]
  %98 = phi <64 x float> [ %89, %for.body77.preheader ], [ %.lcssa430, %for.cond.cleanup76.loopexit.loopexit ]
  %99 = phi <64 x float> [ %91, %for.body77.preheader ], [ %.lcssa429, %for.cond.cleanup76.loopexit.loopexit ]
  %100 = phi <64 x float> [ %93, %for.body77.preheader ], [ %.lcssa428, %for.cond.cleanup76.loopexit.loopexit ]
  %101 = phi <64 x float> [ %95, %for.body77.preheader ], [ %.lcssa427, %for.cond.cleanup76.loopexit.loopexit ]
  %102 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %98, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %.lcssa408, i8 5, <64 x float> %102, i32 0, i1 true, i1 false)
  %103 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %99, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  %104 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %.lcssa408, i32 1, i32 2, i8 2, i32 0, <5 x i32> %.lcssa408, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %104, i8 5, <64 x float> %103, i32 0, i1 true, i1 false)
  %105 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %100, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  %106 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %104, i32 1, i32 2, i8 2, i32 0, <5 x i32> %104, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %106, i8 5, <64 x float> %105, i32 0, i1 true, i1 false)
  %107 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %101, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  %108 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %106, i32 1, i32 2, i8 2, i32 0, <5 x i32> %106, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %108, i8 5, <64 x float> %107, i32 0, i1 true, i1 false)
  br label %for.cond.cleanup76

for.cond.cleanup76:                               ; preds = %for.cond.cleanup76.loopexit, %for.body68
  %ofmCoords.4.lcssa = phi <5 x i32> [ %vecins72, %for.body68 ], [ %.lcssa408, %for.cond.cleanup76.loopexit ]
  %ifmCoords.5.lcssa = phi <5 x i32> [ %vecins71, %for.body68 ], [ %.lcssa409, %for.cond.cleanup76.loopexit ]
  %add106 = add nuw nsw i32 %h64.0341, 1
  %exitcond368 = icmp eq i32 %add106, %3
  br i1 %exitcond368, label %for.cond.cleanup67.loopexit, label %for.body68, !llvm.loop !9

for.body77:                                       ; preds = %for.body77.preheader410, %for.body77
  %109 = phi <64 x float> [ %113, %for.body77 ], [ %89, %for.body77.preheader410 ]
  %110 = phi <64 x float> [ %115, %for.body77 ], [ %91, %for.body77.preheader410 ]
  %111 = phi <64 x float> [ %117, %for.body77 ], [ %93, %for.body77.preheader410 ]
  %112 = phi <64 x float> [ %119, %for.body77 ], [ %95, %for.body77.preheader410 ]
  %w73.0335 = phi i32 [ %add103, %for.body77 ], [ 4, %for.body77.preheader410 ]
  %ifmCoords.5334 = phi <5 x i32> [ %120, %for.body77 ], [ %96, %for.body77.preheader410 ]
  %ofmCoords.4333 = phi <5 x i32> [ %128, %for.body77 ], [ %vecins72, %for.body77.preheader410 ]
  %113 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.5334, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %114 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.5334, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.5334, i1 true, i1 false)
  %115 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %114, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %116 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %114, i32 1, i32 2, i8 2, i32 0, <5 x i32> %114, i1 true, i1 false)
  %117 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %116, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %118 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %116, i32 1, i32 2, i8 2, i32 0, <5 x i32> %116, i1 true, i1 false)
  %119 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %118, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %120 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %118, i32 1, i32 2, i8 2, i32 0, <5 x i32> %118, i1 true, i1 false)
  %121 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %109, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  %122 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %110, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  %123 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %111, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  %124 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %112, <64 x float> %36, i8 0, i32 0, <64 x float> %37, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.4333, i8 5, <64 x float> %121, i32 0, i1 true, i1 false)
  %125 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.4333, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.4333, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %125, i8 5, <64 x float> %122, i32 0, i1 true, i1 false)
  %126 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %125, i32 1, i32 2, i8 2, i32 0, <5 x i32> %125, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %126, i8 5, <64 x float> %123, i32 0, i1 true, i1 false)
  %127 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %126, i32 1, i32 2, i8 2, i32 0, <5 x i32> %126, i1 true, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %127, i8 5, <64 x float> %124, i32 0, i1 true, i1 false)
  %128 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %127, i32 1, i32 2, i8 2, i32 0, <5 x i32> %127, i1 true, i1 false)
  %add103 = add nuw nsw i32 %w73.0335, 4
  %cmp75 = icmp slt i32 %add103, %2
  br i1 %cmp75, label %for.body77, label %for.cond.cleanup76.loopexit.loopexit, !llvm.loop !10
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readonly
declare i32 @llvm.tpc.ld.l.i32(i32, i32, i32, i1, i1) #3

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.fclass.v64f32.i1(<64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.calc.fp.special.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.extract.exp.v64i32.v64f32.i1(<64 x float>, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x i32> @llvm.tpc.get.lut.entry.v128i32.v64f32.i1(<64 x float>, i8, i8, i32, <128 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.lookup.1c.v64f32.v64i32(<64 x i32>, i32, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x float> @llvm.tpc.lookup.2c.v128f32.v64i32(<64 x i32>, i32, i32, <128 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind readonly }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.taken", i1 true}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4, !7}
!7 = !{!"llvm.loop.ir.pipeline", i1 true}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !4, !7}
