; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind writeonly
define dso_local void @main() local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT:%.*]] = extractelement <5 x i32> [[TMP0]], i32 0
; CHECK-NEXT:    [[MUL:%.*]] = shl nsw i32 [[VECEXT]], 6
; CHECK-NEXT:    [[VECEXT1:%.*]] = extractelement <5 x i32> [[ADD]], i32 0
; CHECK-NEXT:    [[MUL2:%.*]] = shl nsw i32 [[VECEXT1]], 6
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 1
; CHECK-NEXT:    [[MUL4:%.*]] = shl nsw i32 [[VECEXT3]], 2
; CHECK-NEXT:    [[VECEXT5:%.*]] = extractelement <5 x i32> [[ADD]], i32 1
; CHECK-NEXT:    [[MUL6:%.*]] = shl nsw i32 [[VECEXT5]], 2
; CHECK-NEXT:    [[VECEXT7:%.*]] = extractelement <5 x i32> [[TMP0]], i32 2
; CHECK-NEXT:    [[VECEXT8:%.*]] = extractelement <5 x i32> [[ADD]], i32 2
; CHECK-NEXT:    [[VECEXT9:%.*]] = extractelement <5 x i32> [[TMP0]], i32 3
; CHECK-NEXT:    [[VECEXT10:%.*]] = extractelement <5 x i32> [[ADD]], i32 3
; CHECK-NEXT:    [[VECEXT11:%.*]] = extractelement <5 x i32> [[TMP0]], i32 4
; CHECK-NEXT:    [[VECEXT12:%.*]] = extractelement <5 x i32> [[ADD]], i32 4
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> <i32 0, i32 undef, i32 0, i32 0, i32 0>, i32 [[MUL4]], i32 1
; CHECK-NEXT:    [[CMP311:%.*]] = icmp slt i32 [[MUL]], [[MUL2]]
; CHECK-NEXT:    br i1 [[CMP311]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP17305:%.*]] = icmp slt i32 [[VECEXT11]], [[VECEXT12]]
; CHECK-NEXT:    [[CMP23299:%.*]] = icmp slt i32 [[VECEXT9]], [[VECEXT10]]
; CHECK-NEXT:    [[CMP29293:%.*]] = icmp slt i32 [[VECEXT7]], [[VECEXT8]]
; CHECK-NEXT:    [[W_0275:%.*]] = add nsw i32 [[MUL4]], 4
; CHECK-NEXT:    [[CMP45276:%.*]] = icmp slt i32 [[W_0275]], [[MUL6]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond.cleanup.loopexit:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    ret void
; CHECK:       for.body:
; CHECK-NEXT:    [[D_0314:%.*]] = phi i32 [ [[MUL]], [[FOR_BODY_LR_PH]] ], [ [[ADD100:%.*]], [[FOR_COND_CLEANUP18:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_0313:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY_LR_PH]] ], [ [[IFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP18]] ]
; CHECK-NEXT:    [[OFMCOORDS_0312:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY_LR_PH]] ], [ [[OFMCOORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP18]] ]
; CHECK-NEXT:    [[VECINS14:%.*]] = insertelement <5 x i32> [[IFMCOORDS_0313]], i32 [[D_0314]], i32 0
; CHECK-NEXT:    [[VECINS15:%.*]] = insertelement <5 x i32> [[OFMCOORDS_0312]], i32 [[D_0314]], i32 0
; CHECK-NEXT:    br i1 [[CMP17305]], label [[FOR_BODY19_PREHEADER:%.*]], label [[FOR_COND_CLEANUP18]]
; CHECK:       for.body19.preheader:
; CHECK-NEXT:    br label [[FOR_BODY19:%.*]]
; CHECK:       for.cond.cleanup18.loopexit:
; CHECK-NEXT:    [[OFMCOORDS_2_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[OFMCOORDS_2_LCSSA:%.*]], [[FOR_COND_CLEANUP24:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_2_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[IFMCOORDS_2_LCSSA:%.*]], [[FOR_COND_CLEANUP24]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP18]]
; CHECK:       for.cond.cleanup18:
; CHECK-NEXT:    [[OFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS15]], [[FOR_BODY]] ], [ [[OFMCOORDS_2_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_1_LCSSA]] = phi <5 x i32> [ [[VECINS14]], [[FOR_BODY]] ], [ [[IFMCOORDS_2_LCSSA_LCSSA]], [[FOR_COND_CLEANUP18_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD100]] = add nsw i32 [[D_0314]], 64
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[ADD100]], [[MUL2]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP_LOOPEXIT:%.*]]
; CHECK:       for.body19:
; CHECK-NEXT:    [[F_0308:%.*]] = phi i32 [ [[ADD97:%.*]], [[FOR_COND_CLEANUP24]] ], [ [[VECEXT11]], [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_1307:%.*]] = phi <5 x i32> [ [[IFMCOORDS_2_LCSSA]], [[FOR_COND_CLEANUP24]] ], [ [[VECINS14]], [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_1306:%.*]] = phi <5 x i32> [ [[OFMCOORDS_2_LCSSA]], [[FOR_COND_CLEANUP24]] ], [ [[VECINS15]], [[FOR_BODY19_PREHEADER]] ]
; CHECK-NEXT:    [[VECINS20:%.*]] = insertelement <5 x i32> [[IFMCOORDS_1307]], i32 [[F_0308]], i32 4
; CHECK-NEXT:    [[VECINS21:%.*]] = insertelement <5 x i32> [[OFMCOORDS_1306]], i32 [[F_0308]], i32 4
; CHECK-NEXT:    br i1 [[CMP23299]], label [[FOR_BODY25_PREHEADER:%.*]], label [[FOR_COND_CLEANUP24]]
; CHECK:       for.body25.preheader:
; CHECK-NEXT:    br label [[FOR_BODY25:%.*]]
; CHECK:       for.cond.cleanup24.loopexit:
; CHECK-NEXT:    [[OFMCOORDS_3_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[OFMCOORDS_3_LCSSA:%.*]], [[FOR_COND_CLEANUP30:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_3_LCSSA_LCSSA:%.*]] = phi <5 x i32> [ [[IFMCOORDS_3_LCSSA:%.*]], [[FOR_COND_CLEANUP30]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP24]]
; CHECK:       for.cond.cleanup24:
; CHECK-NEXT:    [[OFMCOORDS_2_LCSSA]] = phi <5 x i32> [ [[VECINS21]], [[FOR_BODY19]] ], [ [[OFMCOORDS_3_LCSSA_LCSSA]], [[FOR_COND_CLEANUP24_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_2_LCSSA]] = phi <5 x i32> [ [[VECINS20]], [[FOR_BODY19]] ], [ [[IFMCOORDS_3_LCSSA_LCSSA]], [[FOR_COND_CLEANUP24_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD97]] = add i32 [[F_0308]], 1
; CHECK-NEXT:    [[EXITCOND323:%.*]] = icmp eq i32 [[ADD97]], [[VECEXT12]]
; CHECK-NEXT:    br i1 [[EXITCOND323]], label [[FOR_COND_CLEANUP18_LOOPEXIT]], label [[FOR_BODY19]]
; CHECK:       for.body25:
; CHECK-NEXT:    [[B_0302:%.*]] = phi i32 [ [[ADD94:%.*]], [[FOR_COND_CLEANUP30]] ], [ [[VECEXT9]], [[FOR_BODY25_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_2301:%.*]] = phi <5 x i32> [ [[IFMCOORDS_3_LCSSA]], [[FOR_COND_CLEANUP30]] ], [ [[VECINS20]], [[FOR_BODY25_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_2300:%.*]] = phi <5 x i32> [ [[OFMCOORDS_3_LCSSA]], [[FOR_COND_CLEANUP30]] ], [ [[VECINS21]], [[FOR_BODY25_PREHEADER]] ]
; CHECK-NEXT:    [[VECINS26:%.*]] = insertelement <5 x i32> [[IFMCOORDS_2301]], i32 [[B_0302]], i32 3
; CHECK-NEXT:    [[VECINS27:%.*]] = insertelement <5 x i32> [[OFMCOORDS_2300]], i32 [[B_0302]], i32 3
; CHECK-NEXT:    br i1 [[CMP29293]], label [[FOR_BODY31_PREHEADER:%.*]], label [[FOR_COND_CLEANUP30]]
; CHECK:       for.body31.preheader:
; CHECK-NEXT:    br label [[FOR_BODY31:%.*]]
; CHECK:       for.cond.cleanup30.loopexit:
; CHECK-NEXT:    [[VECINS88_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS88:%.*]], [[FOR_COND_CLEANUP46:%.*]] ]
; CHECK-NEXT:    [[VECINS89_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS89:%.*]], [[FOR_COND_CLEANUP46]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP30]]
; CHECK:       for.cond.cleanup30:
; CHECK-NEXT:    [[OFMCOORDS_3_LCSSA]] = phi <5 x i32> [ [[VECINS27]], [[FOR_BODY25]] ], [ [[VECINS89_LCSSA]], [[FOR_COND_CLEANUP30_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IFMCOORDS_3_LCSSA]] = phi <5 x i32> [ [[VECINS26]], [[FOR_BODY25]] ], [ [[VECINS88_LCSSA]], [[FOR_COND_CLEANUP30_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD94]] = add i32 [[B_0302]], 1
; CHECK-NEXT:    [[EXITCOND322:%.*]] = icmp eq i32 [[ADD94]], [[VECEXT10]]
; CHECK-NEXT:    br i1 [[EXITCOND322]], label [[FOR_COND_CLEANUP24_LOOPEXIT]], label [[FOR_BODY25]]
; CHECK:       for.body31:
; CHECK-NEXT:    [[H_0296:%.*]] = phi i32 [ [[ADD91:%.*]], [[FOR_COND_CLEANUP46]] ], [ [[VECEXT7]], [[FOR_BODY31_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_3295:%.*]] = phi <5 x i32> [ [[VECINS88]], [[FOR_COND_CLEANUP46]] ], [ [[VECINS26]], [[FOR_BODY31_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_3294:%.*]] = phi <5 x i32> [ [[VECINS89]], [[FOR_COND_CLEANUP46]] ], [ [[VECINS27]], [[FOR_BODY31_PREHEADER]] ]
; CHECK-NEXT:    [[VECINS32:%.*]] = insertelement <5 x i32> [[IFMCOORDS_3295]], i32 [[H_0296]], i32 2
; CHECK-NEXT:    [[VECINS33:%.*]] = insertelement <5 x i32> [[OFMCOORDS_3294]], i32 [[H_0296]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS32]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP3:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[VECINS32]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP4:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[VECINS32]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[VECINS32]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP5:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP4]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP4]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP4]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP4]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP8:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP7]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP9:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP7]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP10:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP7]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP7]], i1 true, i1 false)
; CHECK-NEXT:    br i1 [[CMP45276]], label [[FOR_BODY47_PREHEADER:%.*]], label [[FOR_COND_CLEANUP46]]
; CHECK:       for.body47.preheader:
; CHECK-NEXT:    br label [[FOR_BODY47:%.*]]
; CHECK:       for.cond.cleanup46.loopexit:
; CHECK-NEXT:    [[DOTLCSSA358:%.*]] = phi <5 x i32> [ [[TMP40:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    [[DOTLCSSA357:%.*]] = phi <64 x float> [ [[TMP41:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    [[DOTLCSSA356:%.*]] = phi <64 x float> [ [[TMP42:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    [[DOTLCSSA355:%.*]] = phi <64 x float> [ [[TMP44:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    [[DOTLCSSA354:%.*]] = phi <64 x float> [ [[TMP45:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    [[DOTLCSSA353:%.*]] = phi <64 x float> [ [[TMP47:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    [[DOTLCSSA352:%.*]] = phi <64 x float> [ [[TMP48:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <5 x i32> [ [[TMP49:%.*]], [[FOR_BODY47]] ]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP46]]
; CHECK:       for.cond.cleanup46:
; CHECK-NEXT:    [[IN_A2_0_LCSSA:%.*]] = phi <64 x float> [ [[TMP9]], [[FOR_BODY31]] ], [ [[DOTLCSSA352]], [[FOR_COND_CLEANUP46_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[IN_0_0_LCSSA:%.*]] = phi <64 x float> [ [[TMP2]], [[FOR_BODY31]] ], [ [[DOTLCSSA357]], [[FOR_COND_CLEANUP46_LOOPEXIT]] ]
; CHECK-NEXT:    [[IN_1_0_LCSSA:%.*]] = phi <64 x float> [ [[TMP5]], [[FOR_BODY31]] ], [ [[DOTLCSSA355]], [[FOR_COND_CLEANUP46_LOOPEXIT]] ]
; CHECK-NEXT:    [[IN_2_0_LCSSA:%.*]] = phi <64 x float> [ [[TMP8]], [[FOR_BODY31]] ], [ [[DOTLCSSA353]], [[FOR_COND_CLEANUP46_LOOPEXIT]] ]
; CHECK-NEXT:    [[IN_A1_0_LCSSA:%.*]] = phi <64 x float> [ [[TMP6]], [[FOR_BODY31]] ], [ [[DOTLCSSA354]], [[FOR_COND_CLEANUP46_LOOPEXIT]] ]
; CHECK-NEXT:    [[IN_A0_0_LCSSA:%.*]] = phi <64 x float> [ [[TMP3]], [[FOR_BODY31]] ], [ [[DOTLCSSA356]], [[FOR_COND_CLEANUP46_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMCOORDS_4_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS33]], [[FOR_BODY31]] ], [ [[DOTLCSSA358]], [[FOR_COND_CLEANUP46_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFMCOORDS_4_LCSSA:%.*]] = phi <5 x i32> [ [[TMP10]], [[FOR_BODY31]] ], [ [[DOTLCSSA]], [[FOR_COND_CLEANUP46_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP11:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[IN_0_0_LCSSA]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP12:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[IN_0_0_LCSSA]], <64 x float> [[IN_A0_0_LCSSA]], i8 0, i32 0, <64 x float> [[IN_0_0_LCSSA]], <256 x i1> [[TMP11]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_4_LCSSA]], i8 2, <64 x float> [[TMP12]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP13:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_4_LCSSA]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_4_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP14:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[IN_1_0_LCSSA]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP15:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[IN_1_0_LCSSA]], <64 x float> [[IN_A1_0_LCSSA]], i8 0, i32 0, <64 x float> [[IN_1_0_LCSSA]], <256 x i1> [[TMP14]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP13]], i8 2, <64 x float> [[TMP15]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP16:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP13]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP13]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[IN_2_0_LCSSA]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[IN_2_0_LCSSA]], <64 x float> [[IN_A2_0_LCSSA]], i8 0, i32 0, <64 x float> [[IN_2_0_LCSSA]], <256 x i1> [[TMP17]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP16]], i8 2, <64 x float> [[TMP18]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP19:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP16]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP16]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_4_LCSSA]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_4_LCSSA]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_4_LCSSA]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_4_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP23:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP20]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP24:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP20]], <64 x float> [[TMP21]], i8 0, i32 0, <64 x float> [[TMP20]], <256 x i1> [[TMP23]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP19]], i8 2, <64 x float> [[TMP24]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP25:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP19]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP19]], i1 true, i1 false)
; CHECK-NEXT:    [[VECINS88]] = insertelement <5 x i32> [[TMP22]], i32 [[MUL4]], i32 1
; CHECK-NEXT:    [[VECINS89]] = insertelement <5 x i32> [[TMP25]], i32 [[MUL4]], i32 1
; CHECK-NEXT:    [[ADD91]] = add i32 [[H_0296]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[ADD91]], [[VECEXT8]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_COND_CLEANUP30_LOOPEXIT]], label [[FOR_BODY31]]
; CHECK:       for.body47:
; CHECK-NEXT:    [[W_0285:%.*]] = phi i32 [ [[W_0:%.*]], [[FOR_BODY47]] ], [ [[W_0275]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[IFMCOORDS_4284:%.*]] = phi <5 x i32> [ [[TMP49]], [[FOR_BODY47]] ], [ [[TMP10]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_4283:%.*]] = phi <5 x i32> [ [[TMP40]], [[FOR_BODY47]] ], [ [[VECINS33]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[IN_A0_0282:%.*]] = phi <64 x float> [ [[TMP42]], [[FOR_BODY47]] ], [ [[TMP3]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[IN_A1_0281:%.*]] = phi <64 x float> [ [[TMP45]], [[FOR_BODY47]] ], [ [[TMP6]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[IN_2_0280:%.*]] = phi <64 x float> [ [[TMP47]], [[FOR_BODY47]] ], [ [[TMP8]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[IN_1_0279:%.*]] = phi <64 x float> [ [[TMP44]], [[FOR_BODY47]] ], [ [[TMP5]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[IN_0_0278:%.*]] = phi <64 x float> [ [[TMP41]], [[FOR_BODY47]] ], [ [[TMP2]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[IN_A2_0277:%.*]] = phi <64 x float> [ [[TMP48]], [[FOR_BODY47]] ], [ [[TMP9]], [[FOR_BODY47_PREHEADER]] ]
; CHECK-NEXT:    [[TMP26:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[IN_0_0278]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP27:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[IN_0_0278]], <64 x float> [[IN_A0_0282]], i8 0, i32 0, <64 x float> [[IN_0_0278]], <256 x i1> [[TMP26]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_4283]], i8 2, <64 x float> [[TMP27]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP28:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_4283]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_4283]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP29:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[IN_1_0279]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP30:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[IN_1_0279]], <64 x float> [[IN_A1_0281]], i8 0, i32 0, <64 x float> [[IN_1_0279]], <256 x i1> [[TMP29]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP28]], i8 2, <64 x float> [[TMP30]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP31:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP28]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP28]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP32:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[IN_2_0280]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP33:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[IN_2_0280]], <64 x float> [[IN_A2_0277]], i8 0, i32 0, <64 x float> [[IN_2_0280]], <256 x i1> [[TMP32]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP31]], i8 2, <64 x float> [[TMP33]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP34:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP31]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP31]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP35:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_4284]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP36:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFMCOORDS_4284]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP37:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[IFMCOORDS_4284]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[IFMCOORDS_4284]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP38:%.*]] = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> [[TMP35]], float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP39:%.*]] = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> [[TMP35]], <64 x float> [[TMP36]], i8 0, i32 0, <64 x float> [[TMP35]], <256 x i1> [[TMP38]], i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP34]], i8 2, <64 x float> [[TMP39]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP40]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP34]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP34]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP41]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP37]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP42]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP37]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP43:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP37]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP37]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP44]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP43]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP45]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP43]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP46:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP43]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP43]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP47]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP46]], i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP48]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP46]], i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP49]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP46]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP46]], i1 true, i1 false)
; CHECK-NEXT:    [[W_0]] = add nsw i32 [[W_0285]], 4
; CHECK-NEXT:    [[CMP45:%.*]] = icmp slt i32 [[W_0]], [[MUL6]]
; CHECK-NEXT:    br i1 [[CMP45]], label [[FOR_BODY47]], label [[FOR_COND_CLEANUP46_LOOPEXIT]]
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext = extractelement <5 x i32> %0, i32 0
  %mul = shl nsw i32 %vecext, 6
  %vecext1 = extractelement <5 x i32> %add, i32 0
  %mul2 = shl nsw i32 %vecext1, 6
  %vecext3 = extractelement <5 x i32> %0, i32 1
  %mul4 = shl nsw i32 %vecext3, 2
  %vecext5 = extractelement <5 x i32> %add, i32 1
  %mul6 = shl nsw i32 %vecext5, 2
  %vecext7 = extractelement <5 x i32> %0, i32 2
  %vecext8 = extractelement <5 x i32> %add, i32 2
  %vecext9 = extractelement <5 x i32> %0, i32 3
  %vecext10 = extractelement <5 x i32> %add, i32 3
  %vecext11 = extractelement <5 x i32> %0, i32 4
  %vecext12 = extractelement <5 x i32> %add, i32 4
  %vecins = insertelement <5 x i32> <i32 0, i32 undef, i32 0, i32 0, i32 0>, i32 %mul4, i32 1
  %cmp311 = icmp slt i32 %mul, %mul2
  br i1 %cmp311, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %cmp17305 = icmp slt i32 %vecext11, %vecext12
  %cmp23299 = icmp slt i32 %vecext9, %vecext10
  %cmp29293 = icmp slt i32 %vecext7, %vecext8
  %w.0275 = add nsw i32 %mul4, 4
  %cmp45276 = icmp slt i32 %w.0275, %mul6
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup18
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.cleanup18
  %d.0314 = phi i32 [ %mul, %for.body.lr.ph ], [ %add100, %for.cond.cleanup18 ]
  %ifmCoords.0313 = phi <5 x i32> [ %vecins, %for.body.lr.ph ], [ %ifmCoords.1.lcssa, %for.cond.cleanup18 ]
  %ofmCoords.0312 = phi <5 x i32> [ %vecins, %for.body.lr.ph ], [ %ofmCoords.1.lcssa, %for.cond.cleanup18 ]
  %vecins14 = insertelement <5 x i32> %ifmCoords.0313, i32 %d.0314, i32 0
  %vecins15 = insertelement <5 x i32> %ofmCoords.0312, i32 %d.0314, i32 0
  br i1 %cmp17305, label %for.body19.preheader, label %for.cond.cleanup18

for.body19.preheader:                             ; preds = %for.body
  br label %for.body19

for.cond.cleanup18.loopexit:                      ; preds = %for.cond.cleanup24
  %ofmCoords.2.lcssa.lcssa = phi <5 x i32> [ %ofmCoords.2.lcssa, %for.cond.cleanup24 ]
  %ifmCoords.2.lcssa.lcssa = phi <5 x i32> [ %ifmCoords.2.lcssa, %for.cond.cleanup24 ]
  br label %for.cond.cleanup18

for.cond.cleanup18:                               ; preds = %for.cond.cleanup18.loopexit, %for.body
  %ofmCoords.1.lcssa = phi <5 x i32> [ %vecins15, %for.body ], [ %ofmCoords.2.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %ifmCoords.1.lcssa = phi <5 x i32> [ %vecins14, %for.body ], [ %ifmCoords.2.lcssa.lcssa, %for.cond.cleanup18.loopexit ]
  %add100 = add nsw i32 %d.0314, 64
  %cmp = icmp slt i32 %add100, %mul2
  br i1 %cmp, label %for.body, label %for.cond.cleanup.loopexit

for.body19:                                       ; preds = %for.body19.preheader, %for.cond.cleanup24
  %f.0308 = phi i32 [ %add97, %for.cond.cleanup24 ], [ %vecext11, %for.body19.preheader ]
  %ifmCoords.1307 = phi <5 x i32> [ %ifmCoords.2.lcssa, %for.cond.cleanup24 ], [ %vecins14, %for.body19.preheader ]
  %ofmCoords.1306 = phi <5 x i32> [ %ofmCoords.2.lcssa, %for.cond.cleanup24 ], [ %vecins15, %for.body19.preheader ]
  %vecins20 = insertelement <5 x i32> %ifmCoords.1307, i32 %f.0308, i32 4
  %vecins21 = insertelement <5 x i32> %ofmCoords.1306, i32 %f.0308, i32 4
  br i1 %cmp23299, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %for.body19
  br label %for.body25

for.cond.cleanup24.loopexit:                      ; preds = %for.cond.cleanup30
  %ofmCoords.3.lcssa.lcssa = phi <5 x i32> [ %ofmCoords.3.lcssa, %for.cond.cleanup30 ]
  %ifmCoords.3.lcssa.lcssa = phi <5 x i32> [ %ifmCoords.3.lcssa, %for.cond.cleanup30 ]
  br label %for.cond.cleanup24

for.cond.cleanup24:                               ; preds = %for.cond.cleanup24.loopexit, %for.body19
  %ofmCoords.2.lcssa = phi <5 x i32> [ %vecins21, %for.body19 ], [ %ofmCoords.3.lcssa.lcssa, %for.cond.cleanup24.loopexit ]
  %ifmCoords.2.lcssa = phi <5 x i32> [ %vecins20, %for.body19 ], [ %ifmCoords.3.lcssa.lcssa, %for.cond.cleanup24.loopexit ]
  %add97 = add i32 %f.0308, 1
  %exitcond323 = icmp eq i32 %add97, %vecext12
  br i1 %exitcond323, label %for.cond.cleanup18.loopexit, label %for.body19

for.body25:                                       ; preds = %for.body25.preheader, %for.cond.cleanup30
  %b.0302 = phi i32 [ %add94, %for.cond.cleanup30 ], [ %vecext9, %for.body25.preheader ]
  %ifmCoords.2301 = phi <5 x i32> [ %ifmCoords.3.lcssa, %for.cond.cleanup30 ], [ %vecins20, %for.body25.preheader ]
  %ofmCoords.2300 = phi <5 x i32> [ %ofmCoords.3.lcssa, %for.cond.cleanup30 ], [ %vecins21, %for.body25.preheader ]
  %vecins26 = insertelement <5 x i32> %ifmCoords.2301, i32 %b.0302, i32 3
  %vecins27 = insertelement <5 x i32> %ofmCoords.2300, i32 %b.0302, i32 3
  br i1 %cmp29293, label %for.body31.preheader, label %for.cond.cleanup30

for.body31.preheader:                             ; preds = %for.body25
  br label %for.body31

for.cond.cleanup30.loopexit:                      ; preds = %for.cond.cleanup46
  %vecins88.lcssa = phi <5 x i32> [ %vecins88, %for.cond.cleanup46 ]
  %vecins89.lcssa = phi <5 x i32> [ %vecins89, %for.cond.cleanup46 ]
  br label %for.cond.cleanup30

for.cond.cleanup30:                               ; preds = %for.cond.cleanup30.loopexit, %for.body25
  %ofmCoords.3.lcssa = phi <5 x i32> [ %vecins27, %for.body25 ], [ %vecins89.lcssa, %for.cond.cleanup30.loopexit ]
  %ifmCoords.3.lcssa = phi <5 x i32> [ %vecins26, %for.body25 ], [ %vecins88.lcssa, %for.cond.cleanup30.loopexit ]
  %add94 = add i32 %b.0302, 1
  %exitcond322 = icmp eq i32 %add94, %vecext10
  br i1 %exitcond322, label %for.cond.cleanup24.loopexit, label %for.body25

for.body31:                                       ; preds = %for.body31.preheader, %for.cond.cleanup46
  %h.0296 = phi i32 [ %add91, %for.cond.cleanup46 ], [ %vecext7, %for.body31.preheader ]
  %ifmCoords.3295 = phi <5 x i32> [ %vecins88, %for.cond.cleanup46 ], [ %vecins26, %for.body31.preheader ]
  %ofmCoords.3294 = phi <5 x i32> [ %vecins89, %for.cond.cleanup46 ], [ %vecins27, %for.body31.preheader ]
  %vecins32 = insertelement <5 x i32> %ifmCoords.3295, i32 %h.0296, i32 2
  %vecins33 = insertelement <5 x i32> %ofmCoords.3294, i32 %h.0296, i32 2
  %2 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins32, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %3 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %vecins32, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %4 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %vecins32, i32 1, i32 2, i8 2, i32 0, <5 x i32> %vecins32, i1 true, i1 false)
  %5 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %4, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %6 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %4, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %7 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %4, i32 1, i32 2, i8 2, i32 0, <5 x i32> %4, i1 true, i1 false)
  %8 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %7, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %9 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %7, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %10 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %7, i32 1, i32 2, i8 2, i32 0, <5 x i32> %7, i1 true, i1 false)
  br i1 %cmp45276, label %for.body47.preheader, label %for.cond.cleanup46

for.body47.preheader:                             ; preds = %for.body31
  br label %for.body47

for.cond.cleanup46.loopexit:                      ; preds = %for.body47
  %.lcssa358 = phi <5 x i32> [ %40, %for.body47 ]
  %.lcssa357 = phi <64 x float> [ %41, %for.body47 ]
  %.lcssa356 = phi <64 x float> [ %42, %for.body47 ]
  %.lcssa355 = phi <64 x float> [ %44, %for.body47 ]
  %.lcssa354 = phi <64 x float> [ %45, %for.body47 ]
  %.lcssa353 = phi <64 x float> [ %47, %for.body47 ]
  %.lcssa352 = phi <64 x float> [ %48, %for.body47 ]
  %.lcssa = phi <5 x i32> [ %49, %for.body47 ]
  br label %for.cond.cleanup46

for.cond.cleanup46:                               ; preds = %for.cond.cleanup46.loopexit, %for.body31
  %in_a2.0.lcssa = phi <64 x float> [ %9, %for.body31 ], [ %.lcssa352, %for.cond.cleanup46.loopexit ]
  %in_0.0.lcssa = phi <64 x float> [ %2, %for.body31 ], [ %.lcssa357, %for.cond.cleanup46.loopexit ]
  %in_1.0.lcssa = phi <64 x float> [ %5, %for.body31 ], [ %.lcssa355, %for.cond.cleanup46.loopexit ]
  %in_2.0.lcssa = phi <64 x float> [ %8, %for.body31 ], [ %.lcssa353, %for.cond.cleanup46.loopexit ]
  %in_a1.0.lcssa = phi <64 x float> [ %6, %for.body31 ], [ %.lcssa354, %for.cond.cleanup46.loopexit ]
  %in_a0.0.lcssa = phi <64 x float> [ %3, %for.body31 ], [ %.lcssa356, %for.cond.cleanup46.loopexit ]
  %ofmCoords.4.lcssa = phi <5 x i32> [ %vecins33, %for.body31 ], [ %.lcssa358, %for.cond.cleanup46.loopexit ]
  %ifmCoords.4.lcssa = phi <5 x i32> [ %10, %for.body31 ], [ %.lcssa, %for.cond.cleanup46.loopexit ]
  %11 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %in_0.0.lcssa, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %12 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %in_0.0.lcssa, <64 x float> %in_a0.0.lcssa, i8 0, i32 0, <64 x float> %in_0.0.lcssa, <256 x i1> %11, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.4.lcssa, i8 2, <64 x float> %12, i32 0, i1 true, i1 false)
  %13 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.4.lcssa, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.4.lcssa, i1 true, i1 false)
  %14 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %in_1.0.lcssa, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %15 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %in_1.0.lcssa, <64 x float> %in_a1.0.lcssa, i8 0, i32 0, <64 x float> %in_1.0.lcssa, <256 x i1> %14, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %13, i8 2, <64 x float> %15, i32 0, i1 true, i1 false)
  %16 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %13, i32 1, i32 2, i8 2, i32 0, <5 x i32> %13, i1 true, i1 false)
  %17 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %in_2.0.lcssa, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %18 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %in_2.0.lcssa, <64 x float> %in_a2.0.lcssa, i8 0, i32 0, <64 x float> %in_2.0.lcssa, <256 x i1> %17, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %16, i8 2, <64 x float> %18, i32 0, i1 true, i1 false)
  %19 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %16, i32 1, i32 2, i8 2, i32 0, <5 x i32> %16, i1 true, i1 false)
  %20 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.4.lcssa, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %21 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.4.lcssa, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %22 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.4.lcssa, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.4.lcssa, i1 true, i1 false)
  %23 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %20, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %24 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %20, <64 x float> %21, i8 0, i32 0, <64 x float> %20, <256 x i1> %23, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %19, i8 2, <64 x float> %24, i32 0, i1 true, i1 false)
  %25 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %19, i32 1, i32 2, i8 2, i32 0, <5 x i32> %19, i1 true, i1 false)
  %vecins88 = insertelement <5 x i32> %22, i32 %mul4, i32 1
  %vecins89 = insertelement <5 x i32> %25, i32 %mul4, i32 1
  %add91 = add i32 %h.0296, 1
  %exitcond = icmp eq i32 %add91, %vecext8
  br i1 %exitcond, label %for.cond.cleanup30.loopexit, label %for.body31

for.body47:                                       ; preds = %for.body47.preheader, %for.body47
  %w.0285 = phi i32 [ %w.0, %for.body47 ], [ %w.0275, %for.body47.preheader ]
  %ifmCoords.4284 = phi <5 x i32> [ %49, %for.body47 ], [ %10, %for.body47.preheader ]
  %ofmCoords.4283 = phi <5 x i32> [ %40, %for.body47 ], [ %vecins33, %for.body47.preheader ]
  %in_a0.0282 = phi <64 x float> [ %42, %for.body47 ], [ %3, %for.body47.preheader ]
  %in_a1.0281 = phi <64 x float> [ %45, %for.body47 ], [ %6, %for.body47.preheader ]
  %in_2.0280 = phi <64 x float> [ %47, %for.body47 ], [ %8, %for.body47.preheader ]
  %in_1.0279 = phi <64 x float> [ %44, %for.body47 ], [ %5, %for.body47.preheader ]
  %in_0.0278 = phi <64 x float> [ %41, %for.body47 ], [ %2, %for.body47.preheader ]
  %in_a2.0277 = phi <64 x float> [ %48, %for.body47 ], [ %9, %for.body47.preheader ]
  %26 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %in_0.0278, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %27 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %in_0.0278, <64 x float> %in_a0.0282, i8 0, i32 0, <64 x float> %in_0.0278, <256 x i1> %26, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.4283, i8 2, <64 x float> %27, i32 0, i1 true, i1 false)
  %28 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.4283, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.4283, i1 true, i1 false)
  %29 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %in_1.0279, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %30 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %in_1.0279, <64 x float> %in_a1.0281, i8 0, i32 0, <64 x float> %in_1.0279, <256 x i1> %29, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %28, i8 2, <64 x float> %30, i32 0, i1 true, i1 false)
  %31 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %28, i32 1, i32 2, i8 2, i32 0, <5 x i32> %28, i1 true, i1 false)
  %32 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %in_2.0280, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %33 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %in_2.0280, <64 x float> %in_a2.0277, i8 0, i32 0, <64 x float> %in_2.0280, <256 x i1> %32, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %31, i8 2, <64 x float> %33, i32 0, i1 true, i1 false)
  %34 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %31, i32 1, i32 2, i8 2, i32 0, <5 x i32> %31, i1 true, i1 false)
  %35 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.4284, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %36 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifmCoords.4284, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %37 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ifmCoords.4284, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ifmCoords.4284, i1 true, i1 false)
  %38 = tail call <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float> %35, float 0.000000e+00, i8 0, i32 0, <256 x i1> undef, i1 true, i1 false)
  %39 = tail call <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float> %35, <64 x float> %36, i8 0, i32 0, <64 x float> %35, <256 x i1> %38, i1 false)
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %34, i8 2, <64 x float> %39, i32 0, i1 true, i1 false)
  %40 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %34, i32 1, i32 2, i8 2, i32 0, <5 x i32> %34, i1 true, i1 false)
  %41 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %37, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %42 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %37, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %43 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %37, i32 1, i32 2, i8 2, i32 0, <5 x i32> %37, i1 true, i1 false)
  %44 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %43, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %45 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %43, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %46 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %43, i32 1, i32 2, i8 2, i32 0, <5 x i32> %43, i1 true, i1 false)
  %47 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %46, i8 0, i32 0, <64 x float> undef, i1 true, i1 false)
  %48 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %46, i8 1, i32 0, <64 x float> undef, i1 true, i1 false)
  %49 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %46, i32 1, i32 2, i8 2, i32 0, <5 x i32> %46, i1 true, i1 false)
  %w.0 = add nsw i32 %w.0285, 4
  %cmp45 = icmp slt i32 %w.0, %mul6
  br i1 %cmp45, label %for.body47, label %for.cond.cleanup46.loopexit
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <256 x i1> @llvm.tpc.cmp.less.v256i1.v64f32.f32.i1(<64 x float>, float, i8, i32, <256 x i1>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mul.v64f32.v64f32.v64f32.v256i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, <256 x i1>, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #2

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
