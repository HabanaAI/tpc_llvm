; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind
define dso_local void @main(i8 signext %ifm0Broadcast, i8 signext %ifm1Broadcast, i8 signext %ifm0Dim0Broadcast, i8 signext %ifm0Dim1Broadcast, i8 signext %ifm0Dim2Broadcast, i8 signext %ifm0Dim3Broadcast, i8 signext %ifm0Dim4Broadcast, i8 signext %ifm1Dim0Broadcast, i8 signext %ifm1Dim1Broadcast, i8 signext %ifm1Dim2Broadcast, i8 signext %ifm1Dim3Broadcast, i8 signext %ifm1Dim4Broadcast, i8 signext %isIfm0Scalar, i8 signext %isIfm1Scalar, i8 signext %isIfm0Vector, i8 signext %isIfm1Vector) local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 1
; CHECK-NEXT:    [[MUL4:%.*]] = shl nsw i32 [[VECEXT3]], 2
; CHECK-NEXT:    [[VECEXT5:%.*]] = extractelement <5 x i32> [[ADD]], i32 1
; CHECK-NEXT:    [[MUL6:%.*]] = shl i32 [[VECEXT5]], 2
; CHECK-NEXT:    [[VECEXT7:%.*]] = extractelement <5 x i32> [[TMP0]], i32 2
; CHECK-NEXT:    [[VECEXT9:%.*]] = extractelement <5 x i32> [[ADD]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = or i8 [[ISIFM1SCALAR:%.*]], [[ISIFM0SCALAR:%.*]]
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i8 [[TMP2]], 0
; CHECK-NEXT:    [[TMP4:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP5:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TOBOOL22:%.*]] = icmp ne i8 [[ISIFM0SCALAR]], 0
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP4]], i32 0, <64 x float> zeroinitializer, i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TOBOOL23:%.*]] = icmp ne i8 [[ISIFM1SCALAR]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP5]], i32 0, <64 x float> zeroinitializer, i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[CMP47212:%.*]] = icmp slt i32 [[VECEXT7]], [[VECEXT9]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[FOR_COND46_PREHEADER:%.*]], label [[FOR_COND_PREHEADER:%.*]]
; CHECK:       for.cond.preheader:
; CHECK-NEXT:    br i1 [[CMP47212]], label [[FOR_BODY_LR_PH:%.*]], label [[IF_END:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP29219:%.*]] = icmp slt i32 [[MUL4]], [[MUL6]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond46.preheader:
; CHECK-NEXT:    br i1 [[CMP47212]], label [[FOR_BODY50_LR_PH:%.*]], label [[IF_END]]
; CHECK:       for.body50.lr.ph:
; CHECK-NEXT:    [[TOBOOL51:%.*]] = icmp ne i8 [[IFM0DIM2BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TOBOOL52:%.*]] = icmp ne i8 [[IFM1DIM2BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TOBOOL55:%.*]] = icmp ne i8 [[IFM0DIM1BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TOBOOL56:%.*]] = icmp ne i8 [[IFM1DIM1BROADCAST:%.*]], 0
; CHECK-NEXT:    [[CMP59201:%.*]] = icmp slt i32 [[MUL4]], [[MUL6]]
; CHECK-NEXT:    [[TOBOOL65:%.*]] = icmp ne i8 [[IFM0DIM0BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TOBOOL66:%.*]] = icmp ne i8 [[IFM1DIM0BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TMP8:%.*]] = or i8 [[ISIFM0VECTOR:%.*]], [[IFM0DIM0BROADCAST]]
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ne i8 [[TMP8]], 0
; CHECK-NEXT:    [[TMP10:%.*]] = or i8 [[ISIFM1VECTOR:%.*]], [[IFM1DIM0BROADCAST]]
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ne i8 [[TMP10]], 0
; CHECK-NEXT:    br label [[FOR_BODY50:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[OFMCOORDS_0231:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[TMP45:%.*]], [[FOR_COND_CLEANUP31:%.*]] ]
; CHECK-NEXT:    [[H_0230:%.*]] = phi i32 [ [[VECEXT7]], [[FOR_BODY_LR_PH]] ], [ [[ADD43:%.*]], [[FOR_COND_CLEANUP31]] ]
; CHECK-NEXT:    [[X1_S_0229:%.*]] = phi <64 x float> [ [[TMP7]], [[FOR_BODY_LR_PH]] ], [ [[X1_S_1_LCSSA:%.*]], [[FOR_COND_CLEANUP31]] ]
; CHECK-NEXT:    [[X0_S_0228:%.*]] = phi <64 x float> [ [[TMP6]], [[FOR_BODY_LR_PH]] ], [ [[X0_S_1_LCSSA:%.*]], [[FOR_COND_CLEANUP31]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[OFMCOORDS_0231]], i32 [[MUL4]], i32 1
; CHECK-NEXT:    br i1 [[CMP29219]], label [[FOR_BODY32_PREHEADER:%.*]], label [[FOR_COND_CLEANUP31]]
; CHECK:       for.body32.preheader:
; CHECK-NEXT:    [[TMP12:%.*]] = phi i32 [ [[MUL4]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = phi <64 x float> [ [[X1_S_0229]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi <64 x float> [ [[X0_S_0228]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP15]], i8 0, i32 0, <64 x float> [[TMP14]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP15]], i8 1, i32 0, <64 x float> [[TMP13]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP15]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP15]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP19:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP18]], i8 0, i32 0, <64 x float> [[TMP16]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP18]], i8 1, i32 0, <64 x float> [[TMP17]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP18]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP18]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP21]], i8 0, i32 0, <64 x float> [[TMP19]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP23:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP21]], i8 1, i32 0, <64 x float> [[TMP20]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP24:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP21]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP21]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP25:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP24]], i8 0, i32 0, <64 x float> [[TMP22]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP26:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP24]], i8 1, i32 0, <64 x float> [[TMP23]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP27:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP24]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP24]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP12]], 4
; CHECK-NEXT:    [[TMP29:%.*]] = icmp eq i32 [[TMP28]], [[MUL6]]
; CHECK-NEXT:    br i1 [[TMP29]], label [[FOR_COND_CLEANUP31_LOOPEXIT:%.*]], label [[FOR_BODY32:%.*]]
; CHECK:       for.cond.cleanup31.loopexit:
; CHECK-NEXT:    [[TMP30:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY32_PREHEADER]] ], [ [[TMP71:%.*]], [[FOR_BODY32]] ]
; CHECK-NEXT:    [[DOTLCSSA281:%.*]] = phi <64 x float> [ [[X0_S_1220:%.*]], [[FOR_BODY32]] ], [ [[TMP25]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA280:%.*]] = phi <64 x float> [ [[X1_S_1221:%.*]], [[FOR_BODY32]] ], [ [[TMP26]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA279:%.*]] = phi <5 x i32> [ [[TMP72:%.*]], [[FOR_BODY32]] ], [ [[TMP27]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP31:%.*]] = phi <64 x float> [ [[TMP53:%.*]], [[FOR_BODY32]] ], [ [[TMP16]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = phi <64 x float> [ [[TMP54:%.*]], [[FOR_BODY32]] ], [ [[TMP17]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = phi <64 x float> [ [[TMP58:%.*]], [[FOR_BODY32]] ], [ [[TMP19]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = phi <64 x float> [ [[TMP59:%.*]], [[FOR_BODY32]] ], [ [[TMP20]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi <64 x float> [ [[TMP63:%.*]], [[FOR_BODY32]] ], [ [[TMP22]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = phi <64 x float> [ [[TMP64:%.*]], [[FOR_BODY32]] ], [ [[TMP23]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = fadd <64 x float> [[TMP31]], [[TMP32]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP30]], i8 2, <64 x float> [[TMP37]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP38:%.*]] = fadd <64 x float> [[TMP33]], [[TMP34]]
; CHECK-NEXT:    [[TMP39:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP30]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP30]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP39]], i8 2, <64 x float> [[TMP38]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP40:%.*]] = fadd <64 x float> [[TMP35]], [[TMP36]]
; CHECK-NEXT:    [[TMP41:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP39]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP39]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP41]], i8 2, <64 x float> [[TMP40]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP42:%.*]] = fadd <64 x float> [[DOTLCSSA281]], [[DOTLCSSA280]]
; CHECK-NEXT:    [[TMP43:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP41]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP41]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP43]], i8 2, <64 x float> [[TMP42]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP44:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP43]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP43]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP31]]
; CHECK:       for.cond.cleanup31:
; CHECK-NEXT:    [[X0_S_1_LCSSA]] = phi <64 x float> [ [[X0_S_0228]], [[FOR_BODY]] ], [ [[DOTLCSSA281]], [[FOR_COND_CLEANUP31_LOOPEXIT]] ]
; CHECK-NEXT:    [[X1_S_1_LCSSA]] = phi <64 x float> [ [[X1_S_0229]], [[FOR_BODY]] ], [ [[DOTLCSSA280]], [[FOR_COND_CLEANUP31_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMCOORDS_1_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ], [ [[DOTLCSSA279]], [[FOR_COND_CLEANUP31_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP45]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_1_LCSSA]], i32 1, i32 4, i8 2, i32 0, <5 x i32> [[OFMCOORDS_1_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD43]] = add i32 [[H_0230]], 1
; CHECK-NEXT:    [[EXITCOND242:%.*]] = icmp eq i32 [[ADD43]], [[VECEXT9]]
; CHECK-NEXT:    br i1 [[EXITCOND242]], label [[IF_END_LOOPEXIT274:%.*]], label [[FOR_BODY]], !llvm.loop !3
; CHECK:       for.body32:
; CHECK-NEXT:    [[TMP46:%.*]] = phi <64 x float> [ [[TMP53]], [[FOR_BODY32]] ], [ [[TMP16]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP47:%.*]] = phi <64 x float> [ [[TMP54]], [[FOR_BODY32]] ], [ [[TMP17]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP48:%.*]] = phi <64 x float> [ [[TMP58]], [[FOR_BODY32]] ], [ [[TMP19]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP49:%.*]] = phi <64 x float> [ [[TMP59]], [[FOR_BODY32]] ], [ [[TMP20]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP50:%.*]] = phi <64 x float> [ [[TMP63]], [[FOR_BODY32]] ], [ [[TMP22]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP51:%.*]] = phi <64 x float> [ [[TMP64]], [[FOR_BODY32]] ], [ [[TMP23]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP52:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY32_PREHEADER]] ], [ [[TMP71]], [[FOR_BODY32]] ]
; CHECK-NEXT:    [[OFMCOORDS_1223:%.*]] = phi <5 x i32> [ [[TMP72]], [[FOR_BODY32]] ], [ [[TMP27]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[W_0222:%.*]] = phi i32 [ [[ADD38_3:%.*]], [[FOR_BODY32]] ], [ [[TMP28]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[X1_S_1221]] = phi <64 x float> [ [[TMP69:%.*]], [[FOR_BODY32]] ], [ [[TMP26]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[X0_S_1220]] = phi <64 x float> [ [[TMP68:%.*]], [[FOR_BODY32]] ], [ [[TMP25]], [[FOR_BODY32_PREHEADER]] ]
; CHECK-NEXT:    [[TMP53]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[OFMCOORDS_1223]], i8 0, i32 0, <64 x float> [[X0_S_1220]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP54]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[OFMCOORDS_1223]], i8 1, i32 0, <64 x float> [[X1_S_1221]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP55:%.*]] = fadd <64 x float> [[TMP46]], [[TMP47]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP52]], i8 2, <64 x float> [[TMP55]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP56:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP52]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP52]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP57:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_1223]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_1223]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP58]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP57]], i8 0, i32 0, <64 x float> [[TMP46]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP59]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP57]], i8 1, i32 0, <64 x float> [[TMP47]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP60:%.*]] = fadd <64 x float> [[TMP48]], [[TMP49]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP56]], i8 2, <64 x float> [[TMP60]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP61:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP56]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP56]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP62:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP57]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP57]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP63]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP62]], i8 0, i32 0, <64 x float> [[TMP48]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP64]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP62]], i8 1, i32 0, <64 x float> [[TMP49]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP65:%.*]] = fadd <64 x float> [[TMP50]], [[TMP51]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP61]], i8 2, <64 x float> [[TMP65]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP66:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP61]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP61]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP67:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP62]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP62]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP68]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP67]], i8 0, i32 0, <64 x float> [[TMP50]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP69]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP67]], i8 1, i32 0, <64 x float> [[TMP51]], i1 [[TOBOOL22]], i1 false)
; CHECK-NEXT:    [[TMP70:%.*]] = fadd <64 x float> [[X0_S_1220]], [[X1_S_1221]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP66]], i8 2, <64 x float> [[TMP70]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP71]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP66]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP66]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP72]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP67]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP67]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD38_3]] = add i32 [[W_0222]], 4
; CHECK-NEXT:    [[EXITCOND241_3:%.*]] = icmp eq i32 [[ADD38_3]], [[MUL6]]
; CHECK-NEXT:    br i1 [[EXITCOND241_3]], label [[FOR_COND_CLEANUP31_LOOPEXIT]], label [[FOR_BODY32]], !llvm.loop !5
; CHECK:       for.body50:
; CHECK-NEXT:    [[IFM0COORDS_0218:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY50_LR_PH]] ], [ [[IFM0COORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP61:%.*]] ]
; CHECK-NEXT:    [[IFM1COORDS_0217:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY50_LR_PH]] ], [ [[IFM1COORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP61]] ]
; CHECK-NEXT:    [[OFMCOORDS_2216:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY50_LR_PH]] ], [ [[OFMCOORDS_3_LCSSA:%.*]], [[FOR_COND_CLEANUP61]] ]
; CHECK-NEXT:    [[X0_0215:%.*]] = phi <64 x float> [ [[TMP6]], [[FOR_BODY50_LR_PH]] ], [ [[X0_1_LCSSA:%.*]], [[FOR_COND_CLEANUP61]] ]
; CHECK-NEXT:    [[H45_0214:%.*]] = phi i32 [ [[VECEXT7]], [[FOR_BODY50_LR_PH]] ], [ [[ADD94:%.*]], [[FOR_COND_CLEANUP61]] ]
; CHECK-NEXT:    [[X1_0213:%.*]] = phi <64 x float> [ [[TMP7]], [[FOR_BODY50_LR_PH]] ], [ [[X1_1_LCSSA:%.*]], [[FOR_COND_CLEANUP61]] ]
; CHECK-NEXT:    [[TMP73:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[IFM0COORDS_0218]], i32 4, i32 [[H45_0214]], i32 0, i1 [[TOBOOL51]], i1 true)
; CHECK-NEXT:    [[TMP74:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[IFM1COORDS_0217]], i32 4, i32 [[H45_0214]], i32 0, i1 [[TOBOOL52]], i1 true)
; CHECK-NEXT:    [[VECINS53:%.*]] = insertelement <5 x i32> [[OFMCOORDS_2216]], i32 [[H45_0214]], i32 2
; CHECK-NEXT:    [[VECINS54:%.*]] = insertelement <5 x i32> [[VECINS53]], i32 [[MUL4]], i32 1
; CHECK-NEXT:    [[TMP75:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[TMP73]], i32 2, i32 [[MUL4]], i32 0, i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP76:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[TMP74]], i32 2, i32 [[MUL4]], i32 0, i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    br i1 [[CMP59201]], label [[FOR_BODY62_PREHEADER:%.*]], label [[FOR_COND_CLEANUP61]]
; CHECK:       for.body62.preheader:
; CHECK-NEXT:    [[TMP77:%.*]] = phi i32 [ [[MUL4]], [[FOR_BODY50]] ]
; CHECK-NEXT:    [[TMP78:%.*]] = phi <64 x float> [ [[X1_0213]], [[FOR_BODY50]] ]
; CHECK-NEXT:    [[TMP79:%.*]] = phi <5 x i32> [ [[TMP76]], [[FOR_BODY50]] ]
; CHECK-NEXT:    [[TMP80:%.*]] = phi <64 x float> [ [[X0_0215]], [[FOR_BODY50]] ]
; CHECK-NEXT:    [[TMP81:%.*]] = phi <5 x i32> [ [[TMP75]], [[FOR_BODY50]] ]
; CHECK-NEXT:    [[TMP82:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP81]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP83:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP82]], i32 0, <64 x float> [[TMP80]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP84:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP81]], i8 0, i32 0, <64 x float> [[TMP83]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP85:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP79]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP86:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP85]], i32 0, <64 x float> [[TMP78]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP87:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP79]], i8 1, i32 0, <64 x float> [[TMP86]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP88:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP81]], i32 2, i8 2, i32 0, <5 x i32> [[TMP81]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP89:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP88]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP90:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP89]], i32 0, <64 x float> [[TMP84]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP91:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP88]], i8 0, i32 0, <64 x float> [[TMP90]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP92:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP79]], i32 2, i8 2, i32 0, <5 x i32> [[TMP79]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP93:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP92]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP94:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP93]], i32 0, <64 x float> [[TMP87]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP95:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP92]], i8 1, i32 0, <64 x float> [[TMP94]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP96:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP88]], i32 2, i8 2, i32 0, <5 x i32> [[TMP88]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP97:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP96]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP98:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP97]], i32 0, <64 x float> [[TMP91]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP99:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP96]], i8 0, i32 0, <64 x float> [[TMP98]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP100:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP92]], i32 2, i8 2, i32 0, <5 x i32> [[TMP92]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP101:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP100]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP102:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP101]], i32 0, <64 x float> [[TMP95]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP103:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP100]], i8 1, i32 0, <64 x float> [[TMP102]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP104:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP96]], i32 2, i8 2, i32 0, <5 x i32> [[TMP96]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP105:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP104]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP106:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP105]], i32 0, <64 x float> [[TMP99]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP107:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP104]], i8 0, i32 0, <64 x float> [[TMP106]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP108:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP100]], i32 2, i8 2, i32 0, <5 x i32> [[TMP100]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP109:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP108]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP110:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP109]], i32 0, <64 x float> [[TMP103]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP111:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP108]], i8 1, i32 0, <64 x float> [[TMP110]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP112:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP104]], i32 2, i8 2, i32 0, <5 x i32> [[TMP104]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP113:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP108]], i32 2, i8 2, i32 0, <5 x i32> [[TMP108]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP114:%.*]] = add i32 [[TMP77]], 4
; CHECK-NEXT:    [[TMP115:%.*]] = icmp eq i32 [[TMP114]], [[MUL6]]
; CHECK-NEXT:    br i1 [[TMP115]], label [[FOR_COND_CLEANUP61_LOOPEXIT:%.*]], label [[FOR_BODY62:%.*]]
; CHECK:       for.cond.cleanup61.loopexit:
; CHECK-NEXT:    [[DOTLCSSA278:%.*]] = phi <64 x float> [ [[X0_1204:%.*]], [[FOR_BODY62]] ], [ [[TMP107]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA277:%.*]] = phi <64 x float> [ [[X1_1202:%.*]], [[FOR_BODY62]] ], [ [[TMP111]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA276:%.*]] = phi <5 x i32> [ [[TMP172:%.*]], [[FOR_BODY62]] ], [ [[TMP112]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA275:%.*]] = phi <5 x i32> [ [[TMP173:%.*]], [[FOR_BODY62]] ], [ [[TMP113]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <5 x i32> [ [[TMP175:%.*]], [[FOR_BODY62]] ], [ [[VECINS54]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP116:%.*]] = phi <64 x float> [ [[TMP140:%.*]], [[FOR_BODY62]] ], [ [[TMP84]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP117:%.*]] = phi <64 x float> [ [[TMP141:%.*]], [[FOR_BODY62]] ], [ [[TMP87]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP118:%.*]] = phi <64 x float> [ [[TMP150:%.*]], [[FOR_BODY62]] ], [ [[TMP91]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP119:%.*]] = phi <64 x float> [ [[TMP151:%.*]], [[FOR_BODY62]] ], [ [[TMP95]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP120:%.*]] = phi <64 x float> [ [[TMP160:%.*]], [[FOR_BODY62]] ], [ [[TMP99]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP121:%.*]] = phi <64 x float> [ [[TMP161:%.*]], [[FOR_BODY62]] ], [ [[TMP103]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP122:%.*]] = fadd <64 x float> [[TMP116]], [[TMP117]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[DOTLCSSA]], i8 2, <64 x float> [[TMP122]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP123:%.*]] = fadd <64 x float> [[TMP118]], [[TMP119]]
; CHECK-NEXT:    [[TMP124:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[DOTLCSSA]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[DOTLCSSA]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP124]], i8 2, <64 x float> [[TMP123]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP125:%.*]] = fadd <64 x float> [[TMP120]], [[TMP121]]
; CHECK-NEXT:    [[TMP126:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP124]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP124]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP126]], i8 2, <64 x float> [[TMP125]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP127:%.*]] = fadd <64 x float> [[DOTLCSSA278]], [[DOTLCSSA277]]
; CHECK-NEXT:    [[TMP128:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP126]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP126]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP128]], i8 2, <64 x float> [[TMP127]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP129:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP128]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP128]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP61]]
; CHECK:       for.cond.cleanup61:
; CHECK-NEXT:    [[X1_1_LCSSA]] = phi <64 x float> [ [[X1_0213]], [[FOR_BODY50]] ], [ [[DOTLCSSA277]], [[FOR_COND_CLEANUP61_LOOPEXIT]] ]
; CHECK-NEXT:    [[X0_1_LCSSA]] = phi <64 x float> [ [[X0_0215]], [[FOR_BODY50]] ], [ [[DOTLCSSA278]], [[FOR_COND_CLEANUP61_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMCOORDS_3_LCSSA]] = phi <5 x i32> [ [[VECINS54]], [[FOR_BODY50]] ], [ [[DOTLCSSA]], [[FOR_COND_CLEANUP61_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFM1COORDS_1_LCSSA]] = phi <5 x i32> [ [[TMP76]], [[FOR_BODY50]] ], [ [[DOTLCSSA275]], [[FOR_COND_CLEANUP61_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFM0COORDS_1_LCSSA]] = phi <5 x i32> [ [[TMP75]], [[FOR_BODY50]] ], [ [[DOTLCSSA276]], [[FOR_COND_CLEANUP61_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD94]] = add i32 [[H45_0214]], 1
; CHECK-NEXT:    [[EXITCOND240:%.*]] = icmp eq i32 [[ADD94]], [[VECEXT9]]
; CHECK-NEXT:    br i1 [[EXITCOND240]], label [[IF_END_LOOPEXIT:%.*]], label [[FOR_BODY50]], !llvm.loop !7
; CHECK:       for.body62:
; CHECK-NEXT:    [[TMP130:%.*]] = phi <64 x float> [ [[TMP140]], [[FOR_BODY62]] ], [ [[TMP84]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP131:%.*]] = phi <64 x float> [ [[TMP141]], [[FOR_BODY62]] ], [ [[TMP87]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP132:%.*]] = phi <64 x float> [ [[TMP150]], [[FOR_BODY62]] ], [ [[TMP91]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP133:%.*]] = phi <64 x float> [ [[TMP151]], [[FOR_BODY62]] ], [ [[TMP95]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP134:%.*]] = phi <64 x float> [ [[TMP160]], [[FOR_BODY62]] ], [ [[TMP99]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP135:%.*]] = phi <64 x float> [ [[TMP161]], [[FOR_BODY62]] ], [ [[TMP103]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[IFM0COORDS_1207:%.*]] = phi <5 x i32> [ [[TMP172]], [[FOR_BODY62]] ], [ [[TMP112]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[IFM1COORDS_1206:%.*]] = phi <5 x i32> [ [[TMP173]], [[FOR_BODY62]] ], [ [[TMP113]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_3205:%.*]] = phi <5 x i32> [ [[TMP175]], [[FOR_BODY62]] ], [ [[VECINS54]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[X0_1204]] = phi <64 x float> [ [[TMP170:%.*]], [[FOR_BODY62]] ], [ [[TMP107]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[W57_0203:%.*]] = phi i32 [ [[ADD91_3:%.*]], [[FOR_BODY62]] ], [ [[TMP114]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[X1_1202]] = phi <64 x float> [ [[TMP171:%.*]], [[FOR_BODY62]] ], [ [[TMP111]], [[FOR_BODY62_PREHEADER]] ]
; CHECK-NEXT:    [[TMP136:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[IFM0COORDS_1207]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP137:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[IFM1COORDS_1206]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP138:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP136]], i32 0, <64 x float> [[X0_1204]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP139:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP137]], i32 0, <64 x float> [[X1_1202]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP140]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFM0COORDS_1207]], i8 0, i32 0, <64 x float> [[TMP138]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP141]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFM1COORDS_1206]], i8 1, i32 0, <64 x float> [[TMP139]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP142:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[IFM0COORDS_1207]], i32 2, i8 2, i32 0, <5 x i32> [[IFM0COORDS_1207]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP143:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[IFM1COORDS_1206]], i32 2, i8 2, i32 0, <5 x i32> [[IFM1COORDS_1206]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP144:%.*]] = fadd <64 x float> [[TMP130]], [[TMP131]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_3205]], i8 2, <64 x float> [[TMP144]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP145:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_3205]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_3205]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP146:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP142]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP147:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP143]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP148:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP146]], i32 0, <64 x float> [[TMP140]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP149:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP147]], i32 0, <64 x float> [[TMP141]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP150]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP142]], i8 0, i32 0, <64 x float> [[TMP148]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP151]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP143]], i8 1, i32 0, <64 x float> [[TMP149]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP152:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP142]], i32 2, i8 2, i32 0, <5 x i32> [[TMP142]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP153:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP143]], i32 2, i8 2, i32 0, <5 x i32> [[TMP143]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP154:%.*]] = fadd <64 x float> [[TMP132]], [[TMP133]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP145]], i8 2, <64 x float> [[TMP154]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP155:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP145]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP145]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP156:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP152]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP157:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP153]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP158:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP156]], i32 0, <64 x float> [[TMP150]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP159:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP157]], i32 0, <64 x float> [[TMP151]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP160]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP152]], i8 0, i32 0, <64 x float> [[TMP158]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP161]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP153]], i8 1, i32 0, <64 x float> [[TMP159]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP162:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP152]], i32 2, i8 2, i32 0, <5 x i32> [[TMP152]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP163:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP153]], i32 2, i8 2, i32 0, <5 x i32> [[TMP153]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP164:%.*]] = fadd <64 x float> [[TMP134]], [[TMP135]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP155]], i8 2, <64 x float> [[TMP164]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP165:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP155]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP155]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP166:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP162]], i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP167:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> [[TMP163]], i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP168:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP166]], i32 0, <64 x float> [[TMP160]], i1 [[TOBOOL65]], i1 false)
; CHECK-NEXT:    [[TMP169:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP167]], i32 0, <64 x float> [[TMP161]], i1 [[TOBOOL66]], i1 false)
; CHECK-NEXT:    [[TMP170]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP162]], i8 0, i32 0, <64 x float> [[TMP168]], i1 [[TMP9]], i1 true)
; CHECK-NEXT:    [[TMP171]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP163]], i8 1, i32 0, <64 x float> [[TMP169]], i1 [[TMP11]], i1 true)
; CHECK-NEXT:    [[TMP172]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP162]], i32 2, i8 2, i32 0, <5 x i32> [[TMP162]], i1 [[TOBOOL55]], i1 true)
; CHECK-NEXT:    [[TMP173]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP163]], i32 2, i8 2, i32 0, <5 x i32> [[TMP163]], i1 [[TOBOOL56]], i1 true)
; CHECK-NEXT:    [[TMP174:%.*]] = fadd <64 x float> [[X0_1204]], [[X1_1202]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP165]], i8 2, <64 x float> [[TMP174]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP175]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP165]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP165]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD91_3]] = add i32 [[W57_0203]], 4
; CHECK-NEXT:    [[EXITCOND_3:%.*]] = icmp eq i32 [[ADD91_3]], [[MUL6]]
; CHECK-NEXT:    br i1 [[EXITCOND_3]], label [[FOR_COND_CLEANUP61_LOOPEXIT]], label [[FOR_BODY62]], !llvm.loop !8
; CHECK:       if.end.loopexit:
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end.loopexit274:
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    ret void
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext3 = extractelement <5 x i32> %0, i32 1
  %mul4 = shl nsw i32 %vecext3, 2
  %vecext5 = extractelement <5 x i32> %add, i32 1
  %mul6 = shl i32 %vecext5, 2
  %vecext7 = extractelement <5 x i32> %0, i32 2
  %vecext9 = extractelement <5 x i32> %add, i32 2
  %2 = or i8 %isIfm1Scalar, %isIfm0Scalar
  %3 = icmp eq i8 %2, 0
  %4 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %5 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %tobool22 = icmp ne i8 %isIfm0Scalar, 0
  %6 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %4, i32 0, <64 x float> zeroinitializer, i1 %tobool22, i1 false)
  %tobool23 = icmp ne i8 %isIfm1Scalar, 0
  %7 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %5, i32 0, <64 x float> zeroinitializer, i1 %tobool23, i1 false)
  %cmp47212 = icmp slt i32 %vecext7, %vecext9
  br i1 %3, label %for.cond46.preheader, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  br i1 %cmp47212, label %for.body.lr.ph, label %if.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %cmp29219 = icmp slt i32 %mul4, %mul6
  br label %for.body

for.cond46.preheader:                             ; preds = %entry
  br i1 %cmp47212, label %for.body50.lr.ph, label %if.end

for.body50.lr.ph:                                 ; preds = %for.cond46.preheader
  %tobool51 = icmp ne i8 %ifm0Dim2Broadcast, 0
  %tobool52 = icmp ne i8 %ifm1Dim2Broadcast, 0
  %tobool55 = icmp ne i8 %ifm0Dim1Broadcast, 0
  %tobool56 = icmp ne i8 %ifm1Dim1Broadcast, 0
  %cmp59201 = icmp slt i32 %mul4, %mul6
  %tobool65 = icmp ne i8 %ifm0Dim0Broadcast, 0
  %tobool66 = icmp ne i8 %ifm1Dim0Broadcast, 0
  %8 = or i8 %isIfm0Vector, %ifm0Dim0Broadcast
  %9 = icmp ne i8 %8, 0
  %10 = or i8 %isIfm1Vector, %ifm1Dim0Broadcast
  %11 = icmp ne i8 %10, 0
  br label %for.body50

for.body:                                         ; preds = %for.cond.cleanup31, %for.body.lr.ph
  %ofmCoords.0231 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %12, %for.cond.cleanup31 ]
  %h.0230 = phi i32 [ %vecext7, %for.body.lr.ph ], [ %add43, %for.cond.cleanup31 ]
  %x1_s.0229 = phi <64 x float> [ %7, %for.body.lr.ph ], [ %x1_s.1.lcssa, %for.cond.cleanup31 ]
  %x0_s.0228 = phi <64 x float> [ %6, %for.body.lr.ph ], [ %x0_s.1.lcssa, %for.cond.cleanup31 ]
  %vecins = insertelement <5 x i32> %ofmCoords.0231, i32 %mul4, i32 1
  br i1 %cmp29219, label %for.body32.preheader, label %for.cond.cleanup31

for.body32.preheader:                             ; preds = %for.body
  br label %for.body32

for.cond.cleanup31.loopexit:                      ; preds = %for.body32
  %.lcssa281 = phi <64 x float> [ %25, %for.body32 ]
  %.lcssa280 = phi <64 x float> [ %26, %for.body32 ]
  %.lcssa279 = phi <5 x i32> [ %28, %for.body32 ]
  br label %for.cond.cleanup31

for.cond.cleanup31:                               ; preds = %for.cond.cleanup31.loopexit, %for.body
  %x0_s.1.lcssa = phi <64 x float> [ %x0_s.0228, %for.body ], [ %.lcssa281, %for.cond.cleanup31.loopexit ]
  %x1_s.1.lcssa = phi <64 x float> [ %x1_s.0229, %for.body ], [ %.lcssa280, %for.cond.cleanup31.loopexit ]
  %ofmCoords.1.lcssa = phi <5 x i32> [ %vecins, %for.body ], [ %.lcssa279, %for.cond.cleanup31.loopexit ]
  %12 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.1.lcssa, i32 1, i32 4, i8 2, i32 0, <5 x i32> %ofmCoords.1.lcssa, i1 true, i1 false)
  %add43 = add i32 %h.0230, 1
  %exitcond242 = icmp eq i32 %add43, %vecext9
  br i1 %exitcond242, label %if.end.loopexit274, label %for.body, !llvm.loop !3

for.body32:                                       ; preds = %for.body32.preheader, %for.body32
  %ofmCoords.1223 = phi <5 x i32> [ %28, %for.body32 ], [ %vecins, %for.body32.preheader ]
  %w.0222 = phi i32 [ %add38.3, %for.body32 ], [ %mul4, %for.body32.preheader ]
  %x1_s.1221 = phi <64 x float> [ %26, %for.body32 ], [ %x1_s.0229, %for.body32.preheader ]
  %x0_s.1220 = phi <64 x float> [ %25, %for.body32 ], [ %x0_s.0228, %for.body32.preheader ]
  %13 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ofmCoords.1223, i8 0, i32 0, <64 x float> %x0_s.1220, i1 %tobool23, i1 false)
  %14 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ofmCoords.1223, i8 1, i32 0, <64 x float> %x1_s.1221, i1 %tobool22, i1 false)
  %15 = fadd <64 x float> %13, %14
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.1223, i8 2, <64 x float> %15, i32 0, i1 true, i1 false)
  %16 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.1223, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.1223, i1 true, i1 false)
  %17 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %16, i8 0, i32 0, <64 x float> %13, i1 %tobool23, i1 false)
  %18 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %16, i8 1, i32 0, <64 x float> %14, i1 %tobool22, i1 false)
  %19 = fadd <64 x float> %17, %18
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %16, i8 2, <64 x float> %19, i32 0, i1 true, i1 false)
  %20 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %16, i32 1, i32 2, i8 2, i32 0, <5 x i32> %16, i1 true, i1 false)
  %21 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %20, i8 0, i32 0, <64 x float> %17, i1 %tobool23, i1 false)
  %22 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %20, i8 1, i32 0, <64 x float> %18, i1 %tobool22, i1 false)
  %23 = fadd <64 x float> %21, %22
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %20, i8 2, <64 x float> %23, i32 0, i1 true, i1 false)
  %24 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %20, i32 1, i32 2, i8 2, i32 0, <5 x i32> %20, i1 true, i1 false)
  %25 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %24, i8 0, i32 0, <64 x float> %21, i1 %tobool23, i1 false)
  %26 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %24, i8 1, i32 0, <64 x float> %22, i1 %tobool22, i1 false)
  %27 = fadd <64 x float> %25, %26
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %24, i8 2, <64 x float> %27, i32 0, i1 true, i1 false)
  %28 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %24, i32 1, i32 2, i8 2, i32 0, <5 x i32> %24, i1 true, i1 false)
  %add38.3 = add i32 %w.0222, 4
  %exitcond241.3 = icmp eq i32 %add38.3, %mul6
  br i1 %exitcond241.3, label %for.cond.cleanup31.loopexit, label %for.body32, !llvm.loop !5

for.body50:                                       ; preds = %for.cond.cleanup61, %for.body50.lr.ph
  %ifm0Coords.0218 = phi <5 x i32> [ zeroinitializer, %for.body50.lr.ph ], [ %ifm0Coords.1.lcssa, %for.cond.cleanup61 ]
  %ifm1Coords.0217 = phi <5 x i32> [ zeroinitializer, %for.body50.lr.ph ], [ %ifm1Coords.1.lcssa, %for.cond.cleanup61 ]
  %ofmCoords.2216 = phi <5 x i32> [ zeroinitializer, %for.body50.lr.ph ], [ %ofmCoords.3.lcssa, %for.cond.cleanup61 ]
  %x0.0215 = phi <64 x float> [ %6, %for.body50.lr.ph ], [ %x0.1.lcssa, %for.cond.cleanup61 ]
  %h45.0214 = phi i32 [ %vecext7, %for.body50.lr.ph ], [ %add94, %for.cond.cleanup61 ]
  %x1.0213 = phi <64 x float> [ %7, %for.body50.lr.ph ], [ %x1.1.lcssa, %for.cond.cleanup61 ]
  %29 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %ifm0Coords.0218, i32 4, i32 %h45.0214, i32 0, i1 %tobool51, i1 true)
  %30 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %ifm1Coords.0217, i32 4, i32 %h45.0214, i32 0, i1 %tobool52, i1 true)
  %vecins53 = insertelement <5 x i32> %ofmCoords.2216, i32 %h45.0214, i32 2
  %vecins54 = insertelement <5 x i32> %vecins53, i32 %mul4, i32 1
  %31 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %29, i32 2, i32 %mul4, i32 0, i1 %tobool55, i1 true)
  %32 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %30, i32 2, i32 %mul4, i32 0, i1 %tobool56, i1 true)
  br i1 %cmp59201, label %for.body62.preheader, label %for.cond.cleanup61

for.body62.preheader:                             ; preds = %for.body50
  br label %for.body62

for.cond.cleanup61.loopexit:                      ; preds = %for.body62
  %.lcssa278 = phi <64 x float> [ %67, %for.body62 ]
  %.lcssa277 = phi <64 x float> [ %68, %for.body62 ]
  %.lcssa276 = phi <5 x i32> [ %69, %for.body62 ]
  %.lcssa275 = phi <5 x i32> [ %70, %for.body62 ]
  %.lcssa = phi <5 x i32> [ %72, %for.body62 ]
  br label %for.cond.cleanup61

for.cond.cleanup61:                               ; preds = %for.cond.cleanup61.loopexit, %for.body50
  %x1.1.lcssa = phi <64 x float> [ %x1.0213, %for.body50 ], [ %.lcssa277, %for.cond.cleanup61.loopexit ]
  %x0.1.lcssa = phi <64 x float> [ %x0.0215, %for.body50 ], [ %.lcssa278, %for.cond.cleanup61.loopexit ]
  %ofmCoords.3.lcssa = phi <5 x i32> [ %vecins54, %for.body50 ], [ %.lcssa, %for.cond.cleanup61.loopexit ]
  %ifm1Coords.1.lcssa = phi <5 x i32> [ %32, %for.body50 ], [ %.lcssa275, %for.cond.cleanup61.loopexit ]
  %ifm0Coords.1.lcssa = phi <5 x i32> [ %31, %for.body50 ], [ %.lcssa276, %for.cond.cleanup61.loopexit ]
  %add94 = add i32 %h45.0214, 1
  %exitcond240 = icmp eq i32 %add94, %vecext9
  br i1 %exitcond240, label %if.end.loopexit, label %for.body50, !llvm.loop !7

for.body62:                                       ; preds = %for.body62.preheader, %for.body62
  %ifm0Coords.1207 = phi <5 x i32> [ %69, %for.body62 ], [ %31, %for.body62.preheader ]
  %ifm1Coords.1206 = phi <5 x i32> [ %70, %for.body62 ], [ %32, %for.body62.preheader ]
  %ofmCoords.3205 = phi <5 x i32> [ %72, %for.body62 ], [ %vecins54, %for.body62.preheader ]
  %x0.1204 = phi <64 x float> [ %67, %for.body62 ], [ %x0.0215, %for.body62.preheader ]
  %w57.0203 = phi i32 [ %add91.3, %for.body62 ], [ %mul4, %for.body62.preheader ]
  %x1.1202 = phi <64 x float> [ %68, %for.body62 ], [ %x1.0213, %for.body62.preheader ]
  %33 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %ifm0Coords.1207, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %34 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %ifm1Coords.1206, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %35 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %33, i32 0, <64 x float> %x0.1204, i1 %tobool65, i1 false)
  %36 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %34, i32 0, <64 x float> %x1.1202, i1 %tobool66, i1 false)
  %37 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifm0Coords.1207, i8 0, i32 0, <64 x float> %35, i1 %9, i1 true)
  %38 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifm1Coords.1206, i8 1, i32 0, <64 x float> %36, i1 %11, i1 true)
  %39 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %ifm0Coords.1207, i32 2, i8 2, i32 0, <5 x i32> %ifm0Coords.1207, i1 %tobool55, i1 true)
  %40 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %ifm1Coords.1206, i32 2, i8 2, i32 0, <5 x i32> %ifm1Coords.1206, i1 %tobool56, i1 true)
  %41 = fadd <64 x float> %37, %38
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.3205, i8 2, <64 x float> %41, i32 0, i1 true, i1 false)
  %42 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.3205, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.3205, i1 true, i1 false)
  %43 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %39, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %44 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %40, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %45 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %43, i32 0, <64 x float> %37, i1 %tobool65, i1 false)
  %46 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %44, i32 0, <64 x float> %38, i1 %tobool66, i1 false)
  %47 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %39, i8 0, i32 0, <64 x float> %45, i1 %9, i1 true)
  %48 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %40, i8 1, i32 0, <64 x float> %46, i1 %11, i1 true)
  %49 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %39, i32 2, i8 2, i32 0, <5 x i32> %39, i1 %tobool55, i1 true)
  %50 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %40, i32 2, i8 2, i32 0, <5 x i32> %40, i1 %tobool56, i1 true)
  %51 = fadd <64 x float> %47, %48
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %42, i8 2, <64 x float> %51, i32 0, i1 true, i1 false)
  %52 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %42, i32 1, i32 2, i8 2, i32 0, <5 x i32> %42, i1 true, i1 false)
  %53 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %49, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %54 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %50, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %55 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %53, i32 0, <64 x float> %47, i1 %tobool65, i1 false)
  %56 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %54, i32 0, <64 x float> %48, i1 %tobool66, i1 false)
  %57 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %49, i8 0, i32 0, <64 x float> %55, i1 %9, i1 true)
  %58 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %50, i8 1, i32 0, <64 x float> %56, i1 %11, i1 true)
  %59 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %49, i32 2, i8 2, i32 0, <5 x i32> %49, i1 %tobool55, i1 true)
  %60 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %50, i32 2, i8 2, i32 0, <5 x i32> %50, i1 %tobool56, i1 true)
  %61 = fadd <64 x float> %57, %58
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %52, i8 2, <64 x float> %61, i32 0, i1 true, i1 false)
  %62 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %52, i32 1, i32 2, i8 2, i32 0, <5 x i32> %52, i1 true, i1 false)
  %63 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %59, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %64 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> %60, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %65 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %63, i32 0, <64 x float> %57, i1 %tobool65, i1 false)
  %66 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %64, i32 0, <64 x float> %58, i1 %tobool66, i1 false)
  %67 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %59, i8 0, i32 0, <64 x float> %65, i1 %9, i1 true)
  %68 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %60, i8 1, i32 0, <64 x float> %66, i1 %11, i1 true)
  %69 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %59, i32 2, i8 2, i32 0, <5 x i32> %59, i1 %tobool55, i1 true)
  %70 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %60, i32 2, i8 2, i32 0, <5 x i32> %60, i1 %tobool56, i1 true)
  %71 = fadd <64 x float> %67, %68
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %62, i8 2, <64 x float> %71, i32 0, i1 true, i1 false)
  %72 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %62, i32 1, i32 2, i8 2, i32 0, <5 x i32> %62, i1 true, i1 false)
  %add91.3 = add i32 %w57.0203, 4
  %exitcond.3 = icmp eq i32 %add91.3, %mul6
  br i1 %exitcond.3, label %for.cond.cleanup61.loopexit, label %for.body62, !llvm.loop !8

if.end.loopexit:                                  ; preds = %for.cond.cleanup61
  br label %if.end

if.end.loopexit274:                               ; preds = %for.cond.cleanup31
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit274, %if.end.loopexit, %for.cond.preheader, %for.cond46.preheader
  ret void
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32>, i8, i32, i8 addrspace(3)*, i1, i1) #1

; Function Attrs: nounwind readonly
declare <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)*, i32, <64 x float>, i1, i1) #2

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #3

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.set.indx(<5 x i32>, i32, i32, i32, i1, i1) #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32>, <5 x i32>, i32, i8, i32, <5 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.taken", i1 true}
!5 = distinct !{!5, !4, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4, !6}
