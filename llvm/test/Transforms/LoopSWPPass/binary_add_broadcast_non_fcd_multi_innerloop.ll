; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -loop-swp -loop-software-pipelining=true | FileCheck %s

target triple = "tpc"

; Function Attrs: nounwind
define dso_local void @main(i8 signext %ifm0Broadcast, i8 signext %ifm1Broadcast, i8 signext %ifm0Dim0Broadcast, i8 signext %ifm0Dim1Broadcast, i8 signext %ifm0Dim2Broadcast, i8 signext %ifm0Dim3Broadcast, i8 signext %ifm0Dim4Broadcast, i8 signext %ifm1Dim0Broadcast, i8 signext %ifm1Dim1Broadcast, i8 signext %ifm1Dim2Broadcast, i8 signext %ifm1Dim3Broadcast, i8 signext %ifm1Dim4Broadcast, i8 signext %isIfm0Scalar, i8 signext %isIfm1Scalar, i8 signext %isIfm0Vector, i8 signext %isIfm1Vector) local_unnamed_addr #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[TMP1:%.*]] = tail call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[ADD:%.*]] = add <5 x i32> [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[VECEXT3:%.*]] = extractelement <5 x i32> [[TMP0]], i32 1
; CHECK-NEXT:    [[MUL4:%.*]] = shl nsw i32 [[VECEXT3]], 2
; CHECK-NEXT:    [[VECEXT5:%.*]] = extractelement <5 x i32> [[ADD]], i32 1
; CHECK-NEXT:    [[MUL6:%.*]] = shl i32 [[VECEXT5]], 2
; CHECK-NEXT:    [[VECEXT7:%.*]] = extractelement <5 x i32> [[TMP0]], i32 2
; CHECK-NEXT:    [[VECEXT9:%.*]] = extractelement <5 x i32> [[ADD]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = or i8 [[ISIFM1SCALAR:%.*]], [[ISIFM0SCALAR:%.*]]
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i8 [[TMP2]], 0
; CHECK-NEXT:    br i1 [[TMP3]], label [[FOR_COND44_PREHEADER:%.*]], label [[IF_THEN:%.*]]
; CHECK:       for.cond44.preheader:
; CHECK-NEXT:    [[CMP45192:%.*]] = icmp slt i32 [[VECEXT7]], [[VECEXT9]]
; CHECK-NEXT:    br i1 [[CMP45192]], label [[FOR_BODY48_LR_PH:%.*]], label [[IF_END:%.*]]
; CHECK:       for.body48.lr.ph:
; CHECK-NEXT:    [[TOBOOL49:%.*]] = icmp ne i8 [[IFM0DIM2BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TOBOOL50:%.*]] = icmp ne i8 [[IFM1DIM2BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TOBOOL53:%.*]] = icmp ne i8 [[IFM0DIM1BROADCAST:%.*]], 0
; CHECK-NEXT:    [[TOBOOL54:%.*]] = icmp ne i8 [[IFM1DIM1BROADCAST:%.*]], 0
; CHECK-NEXT:    [[CMP57181:%.*]] = icmp slt i32 [[MUL4]], [[MUL6]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i8 [[ISIFM0VECTOR:%.*]], [[IFM0DIM0BROADCAST:%.*]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ne i8 [[TMP4]], 0
; CHECK-NEXT:    [[TMP6:%.*]] = or i8 [[ISIFM1VECTOR:%.*]], [[IFM1DIM0BROADCAST:%.*]]
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ne i8 [[TMP6]], 0
; CHECK-NEXT:    br label [[FOR_BODY48:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[TMP8:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP9:%.*]] = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
; CHECK-NEXT:    [[TOBOOL23:%.*]] = icmp ne i8 [[ISIFM0SCALAR]], 0
; CHECK-NEXT:    [[TMP10:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP8]], i32 0, <64 x float> zeroinitializer, i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TOBOOL24:%.*]] = icmp ne i8 [[ISIFM1SCALAR]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* [[TMP9]], i32 0, <64 x float> zeroinitializer, i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[CMP207:%.*]] = icmp slt i32 [[VECEXT7]], [[VECEXT9]]
; CHECK-NEXT:    br i1 [[CMP207]], label [[FOR_BODY_LR_PH:%.*]], label [[IF_END]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP27199:%.*]] = icmp slt i32 [[MUL4]], [[MUL6]]
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[H_0211:%.*]] = phi i32 [ [[VECEXT7]], [[FOR_BODY_LR_PH]] ], [ [[ADD41:%.*]], [[FOR_COND_CLEANUP29:%.*]] ]
; CHECK-NEXT:    [[X1_S_0210:%.*]] = phi <64 x float> [ [[TMP11]], [[FOR_BODY_LR_PH]] ], [ [[X1_S_1_LCSSA:%.*]], [[FOR_COND_CLEANUP29]] ]
; CHECK-NEXT:    [[X0_S_0209:%.*]] = phi <64 x float> [ [[TMP10]], [[FOR_BODY_LR_PH]] ], [ [[X0_S_1_LCSSA:%.*]], [[FOR_COND_CLEANUP29]] ]
; CHECK-NEXT:    [[OFMCOORDS_0208:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY_LR_PH]] ], [ [[TMP45:%.*]], [[FOR_COND_CLEANUP29]] ]
; CHECK-NEXT:    [[VECINS:%.*]] = insertelement <5 x i32> [[OFMCOORDS_0208]], i32 [[MUL4]], i32 1
; CHECK-NEXT:    br i1 [[CMP27199]], label [[FOR_BODY30_PREHEADER:%.*]], label [[FOR_COND_CLEANUP29]]
; CHECK:       for.body30.preheader:
; CHECK-NEXT:    [[TMP12:%.*]] = phi i32 [ [[MUL4]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = phi <64 x float> [ [[X1_S_0210]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = phi <64 x float> [ [[X0_S_0209]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP15]], i8 0, i32 0, <64 x float> [[TMP14]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP17:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP15]], i8 1, i32 0, <64 x float> [[TMP13]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP18:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP15]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP15]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP19:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP18]], i8 0, i32 0, <64 x float> [[TMP16]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP20:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP18]], i8 1, i32 0, <64 x float> [[TMP17]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP21:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP18]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP18]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP22:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP21]], i8 0, i32 0, <64 x float> [[TMP19]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP23:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP21]], i8 1, i32 0, <64 x float> [[TMP20]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP24:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP21]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP21]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP25:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP24]], i8 0, i32 0, <64 x float> [[TMP22]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP26:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP24]], i8 1, i32 0, <64 x float> [[TMP23]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP27:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP24]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP24]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP12]], 4
; CHECK-NEXT:    [[TMP29:%.*]] = icmp eq i32 [[TMP28]], [[MUL6]]
; CHECK-NEXT:    br i1 [[TMP29]], label [[FOR_COND_CLEANUP29_LOOPEXIT:%.*]], label [[FOR_BODY30:%.*]]
; CHECK:       for.cond.cleanup29.loopexit:
; CHECK-NEXT:    [[TMP30:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY30_PREHEADER]] ], [ [[TMP71:%.*]], [[FOR_BODY30]] ]
; CHECK-NEXT:    [[DOTLCSSA261:%.*]] = phi <64 x float> [ [[X0_S_1201:%.*]], [[FOR_BODY30]] ], [ [[TMP25]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA260:%.*]] = phi <64 x float> [ [[X1_S_1202:%.*]], [[FOR_BODY30]] ], [ [[TMP26]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA259:%.*]] = phi <5 x i32> [ [[TMP72:%.*]], [[FOR_BODY30]] ], [ [[TMP27]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP31:%.*]] = phi <64 x float> [ [[TMP53:%.*]], [[FOR_BODY30]] ], [ [[TMP16]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = phi <64 x float> [ [[TMP54:%.*]], [[FOR_BODY30]] ], [ [[TMP17]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = phi <64 x float> [ [[TMP58:%.*]], [[FOR_BODY30]] ], [ [[TMP19]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = phi <64 x float> [ [[TMP59:%.*]], [[FOR_BODY30]] ], [ [[TMP20]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP35:%.*]] = phi <64 x float> [ [[TMP63:%.*]], [[FOR_BODY30]] ], [ [[TMP22]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = phi <64 x float> [ [[TMP64:%.*]], [[FOR_BODY30]] ], [ [[TMP23]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = fadd <64 x float> [[TMP31]], [[TMP32]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP30]], i8 2, <64 x float> [[TMP37]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP38:%.*]] = fadd <64 x float> [[TMP33]], [[TMP34]]
; CHECK-NEXT:    [[TMP39:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP30]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP30]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP39]], i8 2, <64 x float> [[TMP38]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP40:%.*]] = fadd <64 x float> [[TMP35]], [[TMP36]]
; CHECK-NEXT:    [[TMP41:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP39]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP39]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP41]], i8 2, <64 x float> [[TMP40]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP42:%.*]] = fadd <64 x float> [[DOTLCSSA261]], [[DOTLCSSA260]]
; CHECK-NEXT:    [[TMP43:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP41]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP41]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP43]], i8 2, <64 x float> [[TMP42]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP44:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP43]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP43]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP29]]
; CHECK:       for.cond.cleanup29:
; CHECK-NEXT:    [[OFMCOORDS_1_LCSSA:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY]] ], [ [[DOTLCSSA259]], [[FOR_COND_CLEANUP29_LOOPEXIT]] ]
; CHECK-NEXT:    [[X0_S_1_LCSSA]] = phi <64 x float> [ [[X0_S_0209]], [[FOR_BODY]] ], [ [[DOTLCSSA261]], [[FOR_COND_CLEANUP29_LOOPEXIT]] ]
; CHECK-NEXT:    [[X1_S_1_LCSSA]] = phi <64 x float> [ [[X1_S_0210]], [[FOR_BODY]] ], [ [[DOTLCSSA260]], [[FOR_COND_CLEANUP29_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP45]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_1_LCSSA]], i32 1, i32 4, i8 2, i32 0, <5 x i32> [[OFMCOORDS_1_LCSSA]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD41]] = add i32 [[H_0211]], 1
; CHECK-NEXT:    [[EXITCOND222:%.*]] = icmp eq i32 [[ADD41]], [[VECEXT9]]
; CHECK-NEXT:    br i1 [[EXITCOND222]], label [[IF_END_LOOPEXIT254:%.*]], label [[FOR_BODY]], !llvm.loop !3
; CHECK:       for.body30:
; CHECK-NEXT:    [[TMP46:%.*]] = phi <64 x float> [ [[TMP53]], [[FOR_BODY30]] ], [ [[TMP16]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP47:%.*]] = phi <64 x float> [ [[TMP54]], [[FOR_BODY30]] ], [ [[TMP17]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP48:%.*]] = phi <64 x float> [ [[TMP58]], [[FOR_BODY30]] ], [ [[TMP19]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP49:%.*]] = phi <64 x float> [ [[TMP59]], [[FOR_BODY30]] ], [ [[TMP20]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP50:%.*]] = phi <64 x float> [ [[TMP63]], [[FOR_BODY30]] ], [ [[TMP22]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP51:%.*]] = phi <64 x float> [ [[TMP64]], [[FOR_BODY30]] ], [ [[TMP23]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP52:%.*]] = phi <5 x i32> [ [[VECINS]], [[FOR_BODY30_PREHEADER]] ], [ [[TMP71]], [[FOR_BODY30]] ]
; CHECK-NEXT:    [[W_0203:%.*]] = phi i32 [ [[ADD36_3:%.*]], [[FOR_BODY30]] ], [ [[TMP28]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[X1_S_1202]] = phi <64 x float> [ [[TMP69:%.*]], [[FOR_BODY30]] ], [ [[TMP26]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[X0_S_1201]] = phi <64 x float> [ [[TMP68:%.*]], [[FOR_BODY30]] ], [ [[TMP25]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_1200:%.*]] = phi <5 x i32> [ [[TMP72]], [[FOR_BODY30]] ], [ [[TMP27]], [[FOR_BODY30_PREHEADER]] ]
; CHECK-NEXT:    [[TMP53]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[OFMCOORDS_1200]], i8 0, i32 0, <64 x float> [[X0_S_1201]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP54]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[OFMCOORDS_1200]], i8 1, i32 0, <64 x float> [[X1_S_1202]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP55:%.*]] = fadd <64 x float> [[TMP46]], [[TMP47]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP52]], i8 2, <64 x float> [[TMP55]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP56:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP52]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP52]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP57:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_1200]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_1200]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP58]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP57]], i8 0, i32 0, <64 x float> [[TMP46]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP59]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP57]], i8 1, i32 0, <64 x float> [[TMP47]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP60:%.*]] = fadd <64 x float> [[TMP48]], [[TMP49]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP56]], i8 2, <64 x float> [[TMP60]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP61:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP56]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP56]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP62:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP57]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP57]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP63]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP62]], i8 0, i32 0, <64 x float> [[TMP48]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP64]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP62]], i8 1, i32 0, <64 x float> [[TMP49]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP65:%.*]] = fadd <64 x float> [[TMP50]], [[TMP51]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP61]], i8 2, <64 x float> [[TMP65]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP66:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP61]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP61]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP67:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP62]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP62]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP68]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP67]], i8 0, i32 0, <64 x float> [[TMP50]], i1 [[TOBOOL24]], i1 false)
; CHECK-NEXT:    [[TMP69]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP67]], i8 1, i32 0, <64 x float> [[TMP51]], i1 [[TOBOOL23]], i1 false)
; CHECK-NEXT:    [[TMP70:%.*]] = fadd <64 x float> [[X0_S_1201]], [[X1_S_1202]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP66]], i8 2, <64 x float> [[TMP70]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP71]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP66]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP66]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP72]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP67]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP67]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD36_3]] = add i32 [[W_0203]], 4
; CHECK-NEXT:    [[EXITCOND221_3:%.*]] = icmp eq i32 [[ADD36_3]], [[MUL6]]
; CHECK-NEXT:    br i1 [[EXITCOND221_3]], label [[FOR_COND_CLEANUP29_LOOPEXIT]], label [[FOR_BODY30]], !llvm.loop !5
; CHECK:       for.body48:
; CHECK-NEXT:    [[IFM0COORDS_0198:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY48_LR_PH]] ], [ [[IFM0COORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP59:%.*]] ]
; CHECK-NEXT:    [[IFM1COORDS_0197:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY48_LR_PH]] ], [ [[IFM1COORDS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP59]] ]
; CHECK-NEXT:    [[H43_0196:%.*]] = phi i32 [ [[VECEXT7]], [[FOR_BODY48_LR_PH]] ], [ [[ADD88:%.*]], [[FOR_COND_CLEANUP59]] ]
; CHECK-NEXT:    [[OFMCOORDS_2195:%.*]] = phi <5 x i32> [ zeroinitializer, [[FOR_BODY48_LR_PH]] ], [ [[OFMCOORDS_3_LCSSA:%.*]], [[FOR_COND_CLEANUP59]] ]
; CHECK-NEXT:    [[X0_0194:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY48_LR_PH]] ], [ [[X0_1_LCSSA:%.*]], [[FOR_COND_CLEANUP59]] ]
; CHECK-NEXT:    [[X1_0193:%.*]] = phi <64 x float> [ zeroinitializer, [[FOR_BODY48_LR_PH]] ], [ [[X1_1_LCSSA:%.*]], [[FOR_COND_CLEANUP59]] ]
; CHECK-NEXT:    [[TMP73:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[IFM0COORDS_0198]], i32 4, i32 [[H43_0196]], i32 0, i1 [[TOBOOL49]], i1 true)
; CHECK-NEXT:    [[TMP74:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[IFM1COORDS_0197]], i32 4, i32 [[H43_0196]], i32 0, i1 [[TOBOOL50]], i1 true)
; CHECK-NEXT:    [[VECINS51:%.*]] = insertelement <5 x i32> [[OFMCOORDS_2195]], i32 [[H43_0196]], i32 2
; CHECK-NEXT:    [[VECINS52:%.*]] = insertelement <5 x i32> [[VECINS51]], i32 [[MUL4]], i32 1
; CHECK-NEXT:    [[TMP75:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[TMP73]], i32 2, i32 [[MUL4]], i32 0, i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP76:%.*]] = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> [[TMP74]], i32 2, i32 [[MUL4]], i32 0, i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    br i1 [[CMP57181]], label [[FOR_BODY60_PREHEADER:%.*]], label [[FOR_COND_CLEANUP59]]
; CHECK:       for.body60.preheader:
; CHECK-NEXT:    [[TMP77:%.*]] = phi i32 [ [[MUL4]], [[FOR_BODY48]] ]
; CHECK-NEXT:    [[TMP78:%.*]] = phi <64 x float> [ [[X1_0193]], [[FOR_BODY48]] ]
; CHECK-NEXT:    [[TMP79:%.*]] = phi <5 x i32> [ [[TMP76]], [[FOR_BODY48]] ]
; CHECK-NEXT:    [[TMP80:%.*]] = phi <64 x float> [ [[X0_0194]], [[FOR_BODY48]] ]
; CHECK-NEXT:    [[TMP81:%.*]] = phi <5 x i32> [ [[TMP75]], [[FOR_BODY48]] ]
; CHECK-NEXT:    [[TMP82:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP81]], i8 0, i32 0, <64 x float> [[TMP80]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP83:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP79]], i8 1, i32 0, <64 x float> [[TMP78]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP84:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP81]], i32 2, i8 2, i32 0, <5 x i32> [[TMP81]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP85:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP84]], i8 0, i32 0, <64 x float> [[TMP82]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP86:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP79]], i32 2, i8 2, i32 0, <5 x i32> [[TMP79]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP87:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP86]], i8 1, i32 0, <64 x float> [[TMP83]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP88:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP84]], i32 2, i8 2, i32 0, <5 x i32> [[TMP84]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP89:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP88]], i8 0, i32 0, <64 x float> [[TMP85]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP90:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP86]], i32 2, i8 2, i32 0, <5 x i32> [[TMP86]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP91:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP90]], i8 1, i32 0, <64 x float> [[TMP87]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP92:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP88]], i32 2, i8 2, i32 0, <5 x i32> [[TMP88]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP93:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP92]], i8 0, i32 0, <64 x float> [[TMP89]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP94:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP90]], i32 2, i8 2, i32 0, <5 x i32> [[TMP90]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP95:%.*]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP94]], i8 1, i32 0, <64 x float> [[TMP91]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP96:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP92]], i32 2, i8 2, i32 0, <5 x i32> [[TMP92]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP97:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP94]], i32 2, i8 2, i32 0, <5 x i32> [[TMP94]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP98:%.*]] = add i32 [[TMP77]], 4
; CHECK-NEXT:    [[TMP99:%.*]] = icmp eq i32 [[TMP98]], [[MUL6]]
; CHECK-NEXT:    br i1 [[TMP99]], label [[FOR_COND_CLEANUP59_LOOPEXIT:%.*]], label [[FOR_BODY60:%.*]]
; CHECK:       for.cond.cleanup59.loopexit:
; CHECK-NEXT:    [[DOTLCSSA258:%.*]] = phi <64 x float> [ [[X0_1183:%.*]], [[FOR_BODY60]] ], [ [[TMP93]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA257:%.*]] = phi <64 x float> [ [[X1_1182:%.*]], [[FOR_BODY60]] ], [ [[TMP95]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA256:%.*]] = phi <5 x i32> [ [[TMP140:%.*]], [[FOR_BODY60]] ], [ [[TMP96]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA255:%.*]] = phi <5 x i32> [ [[TMP141:%.*]], [[FOR_BODY60]] ], [ [[TMP97]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi <5 x i32> [ [[TMP143:%.*]], [[FOR_BODY60]] ], [ [[VECINS52]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP100:%.*]] = phi <64 x float> [ [[TMP120:%.*]], [[FOR_BODY60]] ], [ [[TMP82]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP101:%.*]] = phi <64 x float> [ [[TMP121:%.*]], [[FOR_BODY60]] ], [ [[TMP83]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP102:%.*]] = phi <64 x float> [ [[TMP126:%.*]], [[FOR_BODY60]] ], [ [[TMP85]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP103:%.*]] = phi <64 x float> [ [[TMP127:%.*]], [[FOR_BODY60]] ], [ [[TMP87]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP104:%.*]] = phi <64 x float> [ [[TMP132:%.*]], [[FOR_BODY60]] ], [ [[TMP89]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP105:%.*]] = phi <64 x float> [ [[TMP133:%.*]], [[FOR_BODY60]] ], [ [[TMP91]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP106:%.*]] = fadd <64 x float> [[TMP100]], [[TMP101]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[DOTLCSSA]], i8 2, <64 x float> [[TMP106]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP107:%.*]] = fadd <64 x float> [[TMP102]], [[TMP103]]
; CHECK-NEXT:    [[TMP108:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[DOTLCSSA]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[DOTLCSSA]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP108]], i8 2, <64 x float> [[TMP107]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP109:%.*]] = fadd <64 x float> [[TMP104]], [[TMP105]]
; CHECK-NEXT:    [[TMP110:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP108]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP108]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP110]], i8 2, <64 x float> [[TMP109]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP111:%.*]] = fadd <64 x float> [[DOTLCSSA258]], [[DOTLCSSA257]]
; CHECK-NEXT:    [[TMP112:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP110]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP110]], i1 true, i1 false)
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP112]], i8 2, <64 x float> [[TMP111]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP113:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP112]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP112]], i1 true, i1 false)
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP59]]
; CHECK:       for.cond.cleanup59:
; CHECK-NEXT:    [[X1_1_LCSSA]] = phi <64 x float> [ [[X1_0193]], [[FOR_BODY48]] ], [ [[DOTLCSSA257]], [[FOR_COND_CLEANUP59_LOOPEXIT]] ]
; CHECK-NEXT:    [[X0_1_LCSSA]] = phi <64 x float> [ [[X0_0194]], [[FOR_BODY48]] ], [ [[DOTLCSSA258]], [[FOR_COND_CLEANUP59_LOOPEXIT]] ]
; CHECK-NEXT:    [[OFMCOORDS_3_LCSSA]] = phi <5 x i32> [ [[VECINS52]], [[FOR_BODY48]] ], [ [[DOTLCSSA]], [[FOR_COND_CLEANUP59_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFM1COORDS_1_LCSSA]] = phi <5 x i32> [ [[TMP76]], [[FOR_BODY48]] ], [ [[DOTLCSSA255]], [[FOR_COND_CLEANUP59_LOOPEXIT]] ]
; CHECK-NEXT:    [[IFM0COORDS_1_LCSSA]] = phi <5 x i32> [ [[TMP75]], [[FOR_BODY48]] ], [ [[DOTLCSSA256]], [[FOR_COND_CLEANUP59_LOOPEXIT]] ]
; CHECK-NEXT:    [[ADD88]] = add i32 [[H43_0196]], 1
; CHECK-NEXT:    [[EXITCOND220:%.*]] = icmp eq i32 [[ADD88]], [[VECEXT9]]
; CHECK-NEXT:    br i1 [[EXITCOND220]], label [[IF_END_LOOPEXIT:%.*]], label [[FOR_BODY48]], !llvm.loop !7
; CHECK:       for.body60:
; CHECK-NEXT:    [[TMP114:%.*]] = phi <64 x float> [ [[TMP120]], [[FOR_BODY60]] ], [ [[TMP82]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP115:%.*]] = phi <64 x float> [ [[TMP121]], [[FOR_BODY60]] ], [ [[TMP83]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP116:%.*]] = phi <64 x float> [ [[TMP126]], [[FOR_BODY60]] ], [ [[TMP85]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP117:%.*]] = phi <64 x float> [ [[TMP127]], [[FOR_BODY60]] ], [ [[TMP87]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP118:%.*]] = phi <64 x float> [ [[TMP132]], [[FOR_BODY60]] ], [ [[TMP89]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP119:%.*]] = phi <64 x float> [ [[TMP133]], [[FOR_BODY60]] ], [ [[TMP91]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[IFM0COORDS_1187:%.*]] = phi <5 x i32> [ [[TMP140]], [[FOR_BODY60]] ], [ [[TMP96]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[IFM1COORDS_1186:%.*]] = phi <5 x i32> [ [[TMP141]], [[FOR_BODY60]] ], [ [[TMP97]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[W55_0185:%.*]] = phi i32 [ [[ADD85_3:%.*]], [[FOR_BODY60]] ], [ [[TMP98]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[OFMCOORDS_3184:%.*]] = phi <5 x i32> [ [[TMP143]], [[FOR_BODY60]] ], [ [[VECINS52]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[X0_1183]] = phi <64 x float> [ [[TMP138:%.*]], [[FOR_BODY60]] ], [ [[TMP93]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[X1_1182]] = phi <64 x float> [ [[TMP139:%.*]], [[FOR_BODY60]] ], [ [[TMP95]], [[FOR_BODY60_PREHEADER]] ]
; CHECK-NEXT:    [[TMP120]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFM0COORDS_1187]], i8 0, i32 0, <64 x float> [[X0_1183]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP121]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[IFM1COORDS_1186]], i8 1, i32 0, <64 x float> [[X1_1182]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP122:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[IFM0COORDS_1187]], i32 2, i8 2, i32 0, <5 x i32> [[IFM0COORDS_1187]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP123:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[IFM1COORDS_1186]], i32 2, i8 2, i32 0, <5 x i32> [[IFM1COORDS_1186]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP124:%.*]] = fadd <64 x float> [[TMP114]], [[TMP115]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[OFMCOORDS_3184]], i8 2, <64 x float> [[TMP124]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP125:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[OFMCOORDS_3184]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[OFMCOORDS_3184]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP126]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP122]], i8 0, i32 0, <64 x float> [[TMP114]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP127]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP123]], i8 1, i32 0, <64 x float> [[TMP115]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP128:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP122]], i32 2, i8 2, i32 0, <5 x i32> [[TMP122]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP129:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP123]], i32 2, i8 2, i32 0, <5 x i32> [[TMP123]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP130:%.*]] = fadd <64 x float> [[TMP116]], [[TMP117]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP125]], i8 2, <64 x float> [[TMP130]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP131:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP125]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP125]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP132]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP128]], i8 0, i32 0, <64 x float> [[TMP116]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP133]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP129]], i8 1, i32 0, <64 x float> [[TMP117]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP134:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP128]], i32 2, i8 2, i32 0, <5 x i32> [[TMP128]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP135:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP129]], i32 2, i8 2, i32 0, <5 x i32> [[TMP129]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP136:%.*]] = fadd <64 x float> [[TMP118]], [[TMP119]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP131]], i8 2, <64 x float> [[TMP136]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP137:%.*]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP131]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP131]], i1 true, i1 false)
; CHECK-NEXT:    [[TMP138]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP134]], i8 0, i32 0, <64 x float> [[TMP118]], i1 [[TMP5]], i1 true)
; CHECK-NEXT:    [[TMP139]] = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> [[TMP135]], i8 1, i32 0, <64 x float> [[TMP119]], i1 [[TMP7]], i1 true)
; CHECK-NEXT:    [[TMP140]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP134]], i32 2, i8 2, i32 0, <5 x i32> [[TMP134]], i1 [[TOBOOL53]], i1 true)
; CHECK-NEXT:    [[TMP141]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> [[TMP135]], i32 2, i8 2, i32 0, <5 x i32> [[TMP135]], i1 [[TOBOOL54]], i1 true)
; CHECK-NEXT:    [[TMP142:%.*]] = fadd <64 x float> [[X0_1183]], [[X1_1182]]
; CHECK-NEXT:    tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> [[TMP137]], i8 2, <64 x float> [[TMP142]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[TMP143]] = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> [[TMP137]], i32 1, i32 2, i8 2, i32 0, <5 x i32> [[TMP137]], i1 true, i1 false)
; CHECK-NEXT:    [[ADD85_3]] = add i32 [[W55_0185]], 4
; CHECK-NEXT:    [[EXITCOND_3:%.*]] = icmp eq i32 [[ADD85_3]], [[MUL6]]
; CHECK-NEXT:    br i1 [[EXITCOND_3]], label [[FOR_COND_CLEANUP59_LOOPEXIT]], label [[FOR_BODY60]], !llvm.loop !8
; CHECK:       if.end.loopexit:
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end.loopexit254:
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    ret void
;
entry:
  %0 = tail call <5 x i32> @llvm.tpc.get.index.space.offset()
  %1 = tail call <5 x i32> @llvm.tpc.get.index.space.size()
  %add = add <5 x i32> %1, %0
  %vecext3 = extractelement <5 x i32> %0, i32 1
  %mul4 = shl nsw i32 %vecext3, 2
  %vecext5 = extractelement <5 x i32> %add, i32 1
  %mul6 = shl i32 %vecext5, 2
  %vecext7 = extractelement <5 x i32> %0, i32 2
  %vecext9 = extractelement <5 x i32> %add, i32 2
  %2 = or i8 %isIfm1Scalar, %isIfm0Scalar
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %for.cond44.preheader, label %if.then

for.cond44.preheader:                             ; preds = %entry
  %cmp45192 = icmp slt i32 %vecext7, %vecext9
  br i1 %cmp45192, label %for.body48.lr.ph, label %if.end

for.body48.lr.ph:                                 ; preds = %for.cond44.preheader
  %tobool49 = icmp ne i8 %ifm0Dim2Broadcast, 0
  %tobool50 = icmp ne i8 %ifm1Dim2Broadcast, 0
  %tobool53 = icmp ne i8 %ifm0Dim1Broadcast, 0
  %tobool54 = icmp ne i8 %ifm1Dim1Broadcast, 0
  %cmp57181 = icmp slt i32 %mul4, %mul6
  %4 = or i8 %isIfm0Vector, %ifm0Dim0Broadcast
  %5 = icmp ne i8 %4, 0
  %6 = or i8 %isIfm1Vector, %ifm1Dim0Broadcast
  %7 = icmp ne i8 %6, 0
  br label %for.body48

if.then:                                          ; preds = %entry
  %8 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 0, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %9 = tail call i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32> zeroinitializer, i8 1, i32 0, i8 addrspace(3)* undef, i1 true, i1 false)
  %tobool23 = icmp ne i8 %isIfm0Scalar, 0
  %10 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %8, i32 0, <64 x float> zeroinitializer, i1 %tobool23, i1 false)
  %tobool24 = icmp ne i8 %isIfm1Scalar, 0
  %11 = tail call <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)* %9, i32 0, <64 x float> zeroinitializer, i1 %tobool24, i1 false)
  %cmp207 = icmp slt i32 %vecext7, %vecext9
  br i1 %cmp207, label %for.body.lr.ph, label %if.end

for.body.lr.ph:                                   ; preds = %if.then
  %cmp27199 = icmp slt i32 %mul4, %mul6
  br label %for.body

for.body:                                         ; preds = %for.cond.cleanup29, %for.body.lr.ph
  %h.0211 = phi i32 [ %vecext7, %for.body.lr.ph ], [ %add41, %for.cond.cleanup29 ]
  %x1_s.0210 = phi <64 x float> [ %11, %for.body.lr.ph ], [ %x1_s.1.lcssa, %for.cond.cleanup29 ]
  %x0_s.0209 = phi <64 x float> [ %10, %for.body.lr.ph ], [ %x0_s.1.lcssa, %for.cond.cleanup29 ]
  %ofmCoords.0208 = phi <5 x i32> [ zeroinitializer, %for.body.lr.ph ], [ %12, %for.cond.cleanup29 ]
  %vecins = insertelement <5 x i32> %ofmCoords.0208, i32 %mul4, i32 1
  br i1 %cmp27199, label %for.body30.preheader, label %for.cond.cleanup29

for.body30.preheader:                             ; preds = %for.body
  br label %for.body30

for.cond.cleanup29.loopexit:                      ; preds = %for.body30
  %.lcssa261 = phi <64 x float> [ %25, %for.body30 ]
  %.lcssa260 = phi <64 x float> [ %26, %for.body30 ]
  %.lcssa259 = phi <5 x i32> [ %28, %for.body30 ]
  br label %for.cond.cleanup29

for.cond.cleanup29:                               ; preds = %for.cond.cleanup29.loopexit, %for.body
  %ofmCoords.1.lcssa = phi <5 x i32> [ %vecins, %for.body ], [ %.lcssa259, %for.cond.cleanup29.loopexit ]
  %x0_s.1.lcssa = phi <64 x float> [ %x0_s.0209, %for.body ], [ %.lcssa261, %for.cond.cleanup29.loopexit ]
  %x1_s.1.lcssa = phi <64 x float> [ %x1_s.0210, %for.body ], [ %.lcssa260, %for.cond.cleanup29.loopexit ]
  %12 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.1.lcssa, i32 1, i32 4, i8 2, i32 0, <5 x i32> %ofmCoords.1.lcssa, i1 true, i1 false)
  %add41 = add i32 %h.0211, 1
  %exitcond222 = icmp eq i32 %add41, %vecext9
  br i1 %exitcond222, label %if.end.loopexit254, label %for.body, !llvm.loop !3

for.body30:                                       ; preds = %for.body30.preheader, %for.body30
  %w.0203 = phi i32 [ %add36.3, %for.body30 ], [ %mul4, %for.body30.preheader ]
  %x1_s.1202 = phi <64 x float> [ %26, %for.body30 ], [ %x1_s.0210, %for.body30.preheader ]
  %x0_s.1201 = phi <64 x float> [ %25, %for.body30 ], [ %x0_s.0209, %for.body30.preheader ]
  %ofmCoords.1200 = phi <5 x i32> [ %28, %for.body30 ], [ %vecins, %for.body30.preheader ]
  %13 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ofmCoords.1200, i8 0, i32 0, <64 x float> %x0_s.1201, i1 %tobool24, i1 false)
  %14 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ofmCoords.1200, i8 1, i32 0, <64 x float> %x1_s.1202, i1 %tobool23, i1 false)
  %15 = fadd <64 x float> %13, %14
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.1200, i8 2, <64 x float> %15, i32 0, i1 true, i1 false)
  %16 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.1200, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.1200, i1 true, i1 false)
  %17 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %16, i8 0, i32 0, <64 x float> %13, i1 %tobool24, i1 false)
  %18 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %16, i8 1, i32 0, <64 x float> %14, i1 %tobool23, i1 false)
  %19 = fadd <64 x float> %17, %18
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %16, i8 2, <64 x float> %19, i32 0, i1 true, i1 false)
  %20 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %16, i32 1, i32 2, i8 2, i32 0, <5 x i32> %16, i1 true, i1 false)
  %21 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %20, i8 0, i32 0, <64 x float> %17, i1 %tobool24, i1 false)
  %22 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %20, i8 1, i32 0, <64 x float> %18, i1 %tobool23, i1 false)
  %23 = fadd <64 x float> %21, %22
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %20, i8 2, <64 x float> %23, i32 0, i1 true, i1 false)
  %24 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %20, i32 1, i32 2, i8 2, i32 0, <5 x i32> %20, i1 true, i1 false)
  %25 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %24, i8 0, i32 0, <64 x float> %21, i1 %tobool24, i1 false)
  %26 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %24, i8 1, i32 0, <64 x float> %22, i1 %tobool23, i1 false)
  %27 = fadd <64 x float> %25, %26
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %24, i8 2, <64 x float> %27, i32 0, i1 true, i1 false)
  %28 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %24, i32 1, i32 2, i8 2, i32 0, <5 x i32> %24, i1 true, i1 false)
  %add36.3 = add i32 %w.0203, 4
  %exitcond221.3 = icmp eq i32 %add36.3, %mul6
  br i1 %exitcond221.3, label %for.cond.cleanup29.loopexit, label %for.body30, !llvm.loop !5

for.body48:                                       ; preds = %for.cond.cleanup59, %for.body48.lr.ph
  %ifm0Coords.0198 = phi <5 x i32> [ zeroinitializer, %for.body48.lr.ph ], [ %ifm0Coords.1.lcssa, %for.cond.cleanup59 ]
  %ifm1Coords.0197 = phi <5 x i32> [ zeroinitializer, %for.body48.lr.ph ], [ %ifm1Coords.1.lcssa, %for.cond.cleanup59 ]
  %h43.0196 = phi i32 [ %vecext7, %for.body48.lr.ph ], [ %add88, %for.cond.cleanup59 ]
  %ofmCoords.2195 = phi <5 x i32> [ zeroinitializer, %for.body48.lr.ph ], [ %ofmCoords.3.lcssa, %for.cond.cleanup59 ]
  %x0.0194 = phi <64 x float> [ zeroinitializer, %for.body48.lr.ph ], [ %x0.1.lcssa, %for.cond.cleanup59 ]
  %x1.0193 = phi <64 x float> [ zeroinitializer, %for.body48.lr.ph ], [ %x1.1.lcssa, %for.cond.cleanup59 ]
  %29 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %ifm0Coords.0198, i32 4, i32 %h43.0196, i32 0, i1 %tobool49, i1 true)
  %30 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %ifm1Coords.0197, i32 4, i32 %h43.0196, i32 0, i1 %tobool50, i1 true)
  %vecins51 = insertelement <5 x i32> %ofmCoords.2195, i32 %h43.0196, i32 2
  %vecins52 = insertelement <5 x i32> %vecins51, i32 %mul4, i32 1
  %31 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %29, i32 2, i32 %mul4, i32 0, i1 %tobool53, i1 true)
  %32 = tail call <5 x i32> @llvm.tpc.set.indx(<5 x i32> %30, i32 2, i32 %mul4, i32 0, i1 %tobool54, i1 true)
  br i1 %cmp57181, label %for.body60.preheader, label %for.cond.cleanup59

for.body60.preheader:                             ; preds = %for.body48
  br label %for.body60

for.cond.cleanup59.loopexit:                      ; preds = %for.body60
  %.lcssa258 = phi <64 x float> [ %51, %for.body60 ]
  %.lcssa257 = phi <64 x float> [ %52, %for.body60 ]
  %.lcssa256 = phi <5 x i32> [ %53, %for.body60 ]
  %.lcssa255 = phi <5 x i32> [ %54, %for.body60 ]
  %.lcssa = phi <5 x i32> [ %56, %for.body60 ]
  br label %for.cond.cleanup59

for.cond.cleanup59:                               ; preds = %for.cond.cleanup59.loopexit, %for.body48
  %x1.1.lcssa = phi <64 x float> [ %x1.0193, %for.body48 ], [ %.lcssa257, %for.cond.cleanup59.loopexit ]
  %x0.1.lcssa = phi <64 x float> [ %x0.0194, %for.body48 ], [ %.lcssa258, %for.cond.cleanup59.loopexit ]
  %ofmCoords.3.lcssa = phi <5 x i32> [ %vecins52, %for.body48 ], [ %.lcssa, %for.cond.cleanup59.loopexit ]
  %ifm1Coords.1.lcssa = phi <5 x i32> [ %32, %for.body48 ], [ %.lcssa255, %for.cond.cleanup59.loopexit ]
  %ifm0Coords.1.lcssa = phi <5 x i32> [ %31, %for.body48 ], [ %.lcssa256, %for.cond.cleanup59.loopexit ]
  %add88 = add i32 %h43.0196, 1
  %exitcond220 = icmp eq i32 %add88, %vecext9
  br i1 %exitcond220, label %if.end.loopexit, label %for.body48, !llvm.loop !7

for.body60:                                       ; preds = %for.body60.preheader, %for.body60
  %ifm0Coords.1187 = phi <5 x i32> [ %53, %for.body60 ], [ %31, %for.body60.preheader ]
  %ifm1Coords.1186 = phi <5 x i32> [ %54, %for.body60 ], [ %32, %for.body60.preheader ]
  %w55.0185 = phi i32 [ %add85.3, %for.body60 ], [ %mul4, %for.body60.preheader ]
  %ofmCoords.3184 = phi <5 x i32> [ %56, %for.body60 ], [ %vecins52, %for.body60.preheader ]
  %x0.1183 = phi <64 x float> [ %51, %for.body60 ], [ %x0.0194, %for.body60.preheader ]
  %x1.1182 = phi <64 x float> [ %52, %for.body60 ], [ %x1.0193, %for.body60.preheader ]
  %33 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifm0Coords.1187, i8 0, i32 0, <64 x float> %x0.1183, i1 %5, i1 true)
  %34 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %ifm1Coords.1186, i8 1, i32 0, <64 x float> %x1.1182, i1 %7, i1 true)
  %35 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %ifm0Coords.1187, i32 2, i8 2, i32 0, <5 x i32> %ifm0Coords.1187, i1 %tobool53, i1 true)
  %36 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %ifm1Coords.1186, i32 2, i8 2, i32 0, <5 x i32> %ifm1Coords.1186, i1 %tobool54, i1 true)
  %37 = fadd <64 x float> %33, %34
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %ofmCoords.3184, i8 2, <64 x float> %37, i32 0, i1 true, i1 false)
  %38 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %ofmCoords.3184, i32 1, i32 2, i8 2, i32 0, <5 x i32> %ofmCoords.3184, i1 true, i1 false)
  %39 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %35, i8 0, i32 0, <64 x float> %33, i1 %5, i1 true)
  %40 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %36, i8 1, i32 0, <64 x float> %34, i1 %7, i1 true)
  %41 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %35, i32 2, i8 2, i32 0, <5 x i32> %35, i1 %tobool53, i1 true)
  %42 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %36, i32 2, i8 2, i32 0, <5 x i32> %36, i1 %tobool54, i1 true)
  %43 = fadd <64 x float> %39, %40
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %38, i8 2, <64 x float> %43, i32 0, i1 true, i1 false)
  %44 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %38, i32 1, i32 2, i8 2, i32 0, <5 x i32> %38, i1 true, i1 false)
  %45 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %41, i8 0, i32 0, <64 x float> %39, i1 %5, i1 true)
  %46 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %42, i8 1, i32 0, <64 x float> %40, i1 %7, i1 true)
  %47 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %41, i32 2, i8 2, i32 0, <5 x i32> %41, i1 %tobool53, i1 true)
  %48 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %42, i32 2, i8 2, i32 0, <5 x i32> %42, i1 %tobool54, i1 true)
  %49 = fadd <64 x float> %45, %46
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %44, i8 2, <64 x float> %49, i32 0, i1 true, i1 false)
  %50 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %44, i32 1, i32 2, i8 2, i32 0, <5 x i32> %44, i1 true, i1 false)
  %51 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %47, i8 0, i32 0, <64 x float> %45, i1 %5, i1 true)
  %52 = tail call <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32> %48, i8 1, i32 0, <64 x float> %46, i1 %7, i1 true)
  %53 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %47, i32 2, i8 2, i32 0, <5 x i32> %47, i1 %tobool53, i1 true)
  %54 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1>, <5 x i32> %48, i32 2, i8 2, i32 0, <5 x i32> %48, i1 %tobool54, i1 true)
  %55 = fadd <64 x float> %51, %52
  tail call void @llvm.tpc.st.tnsr.v64f32(<5 x i32> %50, i8 2, <64 x float> %55, i32 0, i1 true, i1 false)
  %56 = tail call <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32> %50, i32 1, i32 2, i8 2, i32 0, <5 x i32> %50, i1 true, i1 false)
  %add85.3 = add i32 %w55.0185, 4
  %exitcond.3 = icmp eq i32 %add85.3, %mul6
  br i1 %exitcond.3, label %for.cond.cleanup59.loopexit, label %for.body60, !llvm.loop !8

if.end.loopexit:                                  ; preds = %for.cond.cleanup59
  br label %if.end

if.end.loopexit254:                               ; preds = %for.cond.cleanup29
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit254, %if.end.loopexit, %if.then, %for.cond44.preheader
  ret void
}

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.offset() #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.get.index.space.size() #1

; Function Attrs: nounwind readnone
declare i8 addrspace(3)* @llvm.tpc.gen.addr(<5 x i32>, i8, i32, i8 addrspace(3)*, i1, i1) #1

; Function Attrs: nounwind readonly
declare <64 x float> @llvm.tpc.ld.g.v64f32.i1(i8 addrspace(3)*, i32, <64 x float>, i1, i1) #2

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.ld.tnsr.v64f32.i1(<5 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind writeonly
declare void @llvm.tpc.st.tnsr.v64f32(<5 x i32>, i8, <64 x float>, i32, i1, i1) #3

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.set.indx(<5 x i32>, i32, i32, i32, i1, i1) #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.v5i32(<5 x i32>, <5 x i32>, i32, i8, i32, <5 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <5 x i32> @llvm.tpc.add.mask.v5i32.i32(<5 x i32>, i32, i32, i8, i32, <5 x i32>, i1, i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="goya" "target-features"="+dali" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}
!llvm.tpc.scalar_data = !{!2}
!llvm.tpc.vector_data = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (ssh://gerrit:29418/tpc_llvm10 4111c7f125204e995146f7741cc2c3989cfb74d0)"}
!2 = !{i32 0}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.taken", i1 true}
!5 = distinct !{!5, !4, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4, !6}
