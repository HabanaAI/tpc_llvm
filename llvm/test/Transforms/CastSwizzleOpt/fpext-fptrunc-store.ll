; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
;RUN: opt < %s -cast-swizzle-opt -S | FileCheck %s
; ModuleID = 'fused_kernel'
source_filename = "fused_kernel"

declare <128 x bfloat16> @llvm.tpc.ld.tnsr.v128bf16.i1(<5 x i32>, i8, i32, <128 x bfloat16>, i1, i1)

declare void @llvm.tpc.st.tnsr.v128bf16(<5 x i32>, i8, <128 x bfloat16>, i32, i1, i1)

declare <128 x bfloat16> @llvm.tpc.fptrunc.swch.v128bf16.v128f32(<128 x float>, i32)

declare <128 x float> @llvm.tpc.fpext.swch.v128f32.v128bf16(<128 x bfloat16>, i32)

declare <5 x i32> @llvm.tpc.get.index.space.offset()

declare <5 x i32> @llvm.tpc.get.index.space.size()

define void @main() {
; CHECK-LABEL: @main(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I:%.*]] = call <5 x i32> @llvm.tpc.get.index.space.offset()
; CHECK-NEXT:    [[I5:%.*]] = call <5 x i32> @llvm.tpc.get.index.space.size()
; CHECK-NEXT:    [[I6:%.*]] = add <5 x i32> [[I]], [[I5]]
; CHECK-NEXT:    [[I7:%.*]] = extractelement <5 x i32> [[I]], i32 0
; CHECK-NEXT:    [[I8:%.*]] = shl i32 [[I7]], 7
; CHECK-NEXT:    [[I9:%.*]] = extractelement <5 x i32> [[I6]], i32 0
; CHECK-NEXT:    [[I10:%.*]] = shl i32 [[I9]], 7
; CHECK-NEXT:    [[I11:%.*]] = extractelement <5 x i32> [[I]], i32 1
; CHECK-NEXT:    [[I12:%.*]] = extractelement <5 x i32> [[I6]], i32 1
; CHECK-NEXT:    [[I13:%.*]] = extractelement <5 x i32> [[I]], i32 2
; CHECK-NEXT:    [[I14:%.*]] = extractelement <5 x i32> [[I6]], i32 2
; CHECK-NEXT:    br label [[BB15:%.*]]
; CHECK:       bb15:
; CHECK-NEXT:    [[DOTSROA_03_0:%.*]] = phi <5 x i32> [ zeroinitializer, [[BB:%.*]] ], [ [[DOTSROA_03_1:%.*]], [[BB33:%.*]] ]
; CHECK-NEXT:    [[DOTSROA_0_0:%.*]] = phi <5 x i32> [ zeroinitializer, [[BB]] ], [ [[DOTSROA_0_1:%.*]], [[BB33]] ]
; CHECK-NEXT:    [[I16:%.*]] = phi i32 [ [[I34:%.*]], [[BB33]] ], [ [[I13]], [[BB]] ]
; CHECK-NEXT:    [[I17:%.*]] = icmp slt i32 [[I16]], [[I14]]
; CHECK-NEXT:    br i1 [[I17]], label [[BB18:%.*]], label [[BB35:%.*]]
; CHECK:       bb18:
; CHECK-NEXT:    [[DOTSROA_03_8_VEC_INSERT:%.*]] = insertelement <5 x i32> [[DOTSROA_03_0]], i32 [[I16]], i32 2
; CHECK-NEXT:    [[DOTSROA_0_8_VEC_INSERT:%.*]] = insertelement <5 x i32> [[DOTSROA_0_0]], i32 [[I16]], i32 2
; CHECK-NEXT:    br label [[BB19:%.*]]
; CHECK:       bb19:
; CHECK-NEXT:    [[DOTSROA_03_1]] = phi <5 x i32> [ [[DOTSROA_03_8_VEC_INSERT]], [[BB18]] ], [ [[DOTSROA_03_2:%.*]], [[BB31:%.*]] ]
; CHECK-NEXT:    [[DOTSROA_0_1]] = phi <5 x i32> [ [[DOTSROA_0_8_VEC_INSERT]], [[BB18]] ], [ [[DOTSROA_0_2:%.*]], [[BB31]] ]
; CHECK-NEXT:    [[I20:%.*]] = phi i32 [ [[I32:%.*]], [[BB31]] ], [ [[I8]], [[BB18]] ]
; CHECK-NEXT:    [[I21:%.*]] = icmp slt i32 [[I20]], [[I10]]
; CHECK-NEXT:    br i1 [[I21]], label [[BB22:%.*]], label [[BB33]]
; CHECK:       bb22:
; CHECK-NEXT:    [[DOTSROA_03_0_VEC_INSERT:%.*]] = insertelement <5 x i32> [[DOTSROA_03_1]], i32 [[I20]], i32 0
; CHECK-NEXT:    [[DOTSROA_0_0_VEC_INSERT:%.*]] = insertelement <5 x i32> [[DOTSROA_0_1]], i32 [[I20]], i32 0
; CHECK-NEXT:    br label [[BB23:%.*]]
; CHECK:       bb23:
; CHECK-NEXT:    [[DOTSROA_03_2]] = phi <5 x i32> [ [[DOTSROA_03_0_VEC_INSERT]], [[BB22]] ], [ [[DOTSROA_03_4_VEC_INSERT:%.*]], [[BB26:%.*]] ]
; CHECK-NEXT:    [[DOTSROA_0_2]] = phi <5 x i32> [ [[DOTSROA_0_0_VEC_INSERT]], [[BB22]] ], [ [[DOTSROA_0_4_VEC_INSERT:%.*]], [[BB26]] ]
; CHECK-NEXT:    [[I24:%.*]] = phi i32 [ [[I30:%.*]], [[BB26]] ], [ [[I11]], [[BB22]] ]
; CHECK-NEXT:    [[I25:%.*]] = icmp slt i32 [[I24]], [[I12]]
; CHECK-NEXT:    br i1 [[I25]], label [[BB26]], label [[BB31]]
; CHECK:       bb26:
; CHECK-NEXT:    [[DOTSROA_03_4_VEC_INSERT]] = insertelement <5 x i32> [[DOTSROA_03_2]], i32 [[I24]], i32 1
; CHECK-NEXT:    [[DOTSROA_0_4_VEC_INSERT]] = insertelement <5 x i32> [[DOTSROA_0_2]], i32 [[I24]], i32 1
; CHECK-NEXT:    [[I27:%.*]] = call <128 x bfloat> @llvm.tpc.ld.tnsr.v128bf16.i1(<5 x i32> [[DOTSROA_0_4_VEC_INSERT]], i8 0, i32 0, <128 x bfloat> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP0:%.*]] = call <128 x float> @llvm.tpc.convert.v128f32.v128bf16.i1(<128 x bfloat> [[I27]], i8 1, i32 327680, <128 x float> undef, i1 true, i1 false)
; CHECK-NEXT:    [[TMP1:%.*]] = call <128 x bfloat> @llvm.tpc.convert.v128bf16.v128f32.i1(<128 x float> [[TMP0]], i8 0, i32 327940, <128 x bfloat> undef, i1 true, i1 false)
; CHECK-NEXT:    call void @llvm.tpc.st.tnsr.v128bf16(<5 x i32> [[DOTSROA_03_4_VEC_INSERT]], i8 1, <128 x bfloat> [[TMP1]], i32 0, i1 true, i1 false)
; CHECK-NEXT:    [[I30]] = add i32 [[I24]], 1
; CHECK-NEXT:    br label [[BB23]]
; CHECK:       bb31:
; CHECK-NEXT:    [[I32]] = add i32 [[I20]], 128
; CHECK-NEXT:    br label [[BB19]]
; CHECK:       bb33:
; CHECK-NEXT:    [[I34]] = add i32 [[I16]], 1
; CHECK-NEXT:    br label [[BB15]]
; CHECK:       bb35:
; CHECK-NEXT:    ret void
;
bb:
  %i = call <5 x i32> @llvm.tpc.get.index.space.offset()
  %i5 = call <5 x i32> @llvm.tpc.get.index.space.size()
  %i6 = add <5 x i32> %i, %i5
  %i7 = extractelement <5 x i32> %i, i32 0
  %i8 = shl i32 %i7, 7
  %i9 = extractelement <5 x i32> %i6, i32 0
  %i10 = shl i32 %i9, 7
  %i11 = extractelement <5 x i32> %i, i32 1
  %i12 = extractelement <5 x i32> %i6, i32 1
  %i13 = extractelement <5 x i32> %i, i32 2
  %i14 = extractelement <5 x i32> %i6, i32 2
  br label %bb15

bb15:                                             ; preds = %bb33, %bb
  %.sroa.03.0 = phi <5 x i32> [ zeroinitializer, %bb ], [ %.sroa.03.1, %bb33 ]
  %.sroa.0.0 = phi <5 x i32> [ zeroinitializer, %bb ], [ %.sroa.0.1, %bb33 ]
  %i16 = phi i32 [ %i34, %bb33 ], [ %i13, %bb ]
  %i17 = icmp slt i32 %i16, %i14
  br i1 %i17, label %bb18, label %bb35

bb18:                                             ; preds = %bb15
  %.sroa.03.8.vec.insert = insertelement <5 x i32> %.sroa.03.0, i32 %i16, i32 2
  %.sroa.0.8.vec.insert = insertelement <5 x i32> %.sroa.0.0, i32 %i16, i32 2
  br label %bb19

bb19:                                             ; preds = %bb31, %bb18
  %.sroa.03.1 = phi <5 x i32> [ %.sroa.03.8.vec.insert, %bb18 ], [ %.sroa.03.2, %bb31 ]
  %.sroa.0.1 = phi <5 x i32> [ %.sroa.0.8.vec.insert, %bb18 ], [ %.sroa.0.2, %bb31 ]
  %i20 = phi i32 [ %i32, %bb31 ], [ %i8, %bb18 ]
  %i21 = icmp slt i32 %i20, %i10
  br i1 %i21, label %bb22, label %bb33

bb22:                                             ; preds = %bb19
  %.sroa.03.0.vec.insert = insertelement <5 x i32> %.sroa.03.1, i32 %i20, i32 0
  %.sroa.0.0.vec.insert = insertelement <5 x i32> %.sroa.0.1, i32 %i20, i32 0
  br label %bb23

bb23:                                             ; preds = %bb26, %bb22
  %.sroa.03.2 = phi <5 x i32> [ %.sroa.03.0.vec.insert, %bb22 ], [ %.sroa.03.4.vec.insert, %bb26 ]
  %.sroa.0.2 = phi <5 x i32> [ %.sroa.0.0.vec.insert, %bb22 ], [ %.sroa.0.4.vec.insert, %bb26 ]
  %i24 = phi i32 [ %i30, %bb26 ], [ %i11, %bb22 ]
  %i25 = icmp slt i32 %i24, %i12
  br i1 %i25, label %bb26, label %bb31

bb26:                                             ; preds = %bb23
  %.sroa.03.4.vec.insert = insertelement <5 x i32> %.sroa.03.2, i32 %i24, i32 1
  %.sroa.0.4.vec.insert = insertelement <5 x i32> %.sroa.0.2, i32 %i24, i32 1
  %i27 = call <128 x bfloat16> @llvm.tpc.ld.tnsr.v128bf16.i1(<5 x i32> %.sroa.0.4.vec.insert, i8 0, i32 0, <128 x bfloat16> undef, i1 true, i1 false)
  %i28 = call <128 x float> @llvm.tpc.fpext.swch.v128f32.v128bf16(<128 x bfloat16> %i27, i32 0)
  %i29 = call <128 x bfloat16> @llvm.tpc.fptrunc.swch.v128bf16.v128f32(<128 x float> %i28, i32 0)
  call void @llvm.tpc.st.tnsr.v128bf16(<5 x i32> %.sroa.03.4.vec.insert, i8 1, <128 x bfloat16> %i29, i32 0, i1 true, i1 false)
  %i30 = add i32 %i24, 1
  br label %bb23

bb31:                                             ; preds = %bb23
  %i32 = add i32 %i20, 128
  br label %bb19

bb33:                                             ; preds = %bb19
  %i34 = add i32 %i16, 1
  br label %bb15

bb35:                                             ; preds = %bb15
  ret void
}
