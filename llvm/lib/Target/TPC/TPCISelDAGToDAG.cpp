//===------ TPCISelDAGToDAG.cpp - A dag to dag inst selector for TPC ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the TPC target.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/TPCMCTargetDesc.h"
#include "TPC.h"
#include "TPCTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include <sstream>
using namespace llvm;

#define DEBUG_TYPE "tpc-isel"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
/// TPCDAGToDAGISel - TPC specific code to select TPC machine
/// instructions for SelectionDAG operations.
///
namespace {
class TPCDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the TPC Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const TPCSubtarget *Subtarget;

public:
  explicit TPCDAGToDAGISel(TPCTargetMachine &tm, CodeGenOpt::Level OL)
    : SelectionDAGISel(tm, OL), Subtarget(tm.getSubtarget()) {}

  bool doInitialization(Module &M) override {
    return false;
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<TPCSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;


  /// SelectInlineAsmMemoryOperand - Implement addressing mode selection for
  /// inline asm expressions.
  bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                    unsigned ConstraintID,
                                    std::vector<SDValue> &OutOps) override;


  bool SelectAddrRR(SDValue &N, SDValue &R1, SDValue &R2);
  bool SelectAddrRI(SDValue &N, SDValue &Base, SDValue &Offset);

  StringRef getPassName() const override {
    return "TPC DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "TPCGenDAGISel.inc"

};
}  // end anonymous namespace

void TPCDAGToDAGISel::Select(SDNode *N) {
  // Dump information about the Node being selected
  LLVM_DEBUG(errs() << "Selecting: ");
  LLVM_DEBUG(N->dump(CurDAG));
  LLVM_DEBUG(errs() << "\n");

  // If we have a custom node, we already have selected.
  if (N->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; N->dump(CurDAG); errs() << "\n");
    N->setNodeId(-1);
    return;
  }

  SelectCode(N);
}

bool TPCDAGToDAGISel::SelectAddrRR(SDValue &N, SDValue &R1, SDValue &R2) {
  if (N.getOpcode() == ISD::ADD) {
    // Both operands should be regiters
    if (dyn_cast<ConstantSDNode>(N.getOperand(0)) ||
        dyn_cast<ConstantSDNode>(N.getOperand(1))) {
       return false;
    }
    R1 = N.getOperand(0);
    R2 = N.getOperand(1);
    return true;
 }

 return false;
}

bool TPCDAGToDAGISel::SelectAddrRI(SDValue &N, SDValue &Base, SDValue &Offset) {
  // Can't do anything with constant addresses
  if (isa<ConstantSDNode>(N)) {
    return false;
  }

  // Address is formed by addition, just get two summands
  if (N.getOpcode() == ISD::ADD) {
    // Both operands are constants, can't do that
    if (dyn_cast<ConstantSDNode>(N.getOperand(0)) &&
        dyn_cast<ConstantSDNode>(N.getOperand(1))) {
        return false;
    }

    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(N.getOperand(1))) {
      Base = N.getOperand(0);
      Offset = CurDAG->getTargetConstant(CN->getZExtValue(), SDLoc(N), MVT::i32);
      return true;
    } else if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(N.getOperand(0))) {
      Base = N.getOperand(1);
      Offset = CurDAG->getTargetConstant(CN->getZExtValue(), SDLoc(N), MVT::i32);
      return true;
    }

    // Both operads are registers, this should be AddrRR
    return false;
  }
  // Otherwise represent address as Addr + 0
  Base = N;
  Offset = CurDAG->getTargetConstant(0, SDLoc(N), MVT::i32);
  return true;
}

/// SelectInlineAsmMemoryOperand - Implement addressing mode selection for
/// inline asm expressions.
bool
TPCDAGToDAGISel::SelectInlineAsmMemoryOperand(const SDValue &Op,
                                                unsigned ConstraintID,
                                                std::vector<SDValue> &OutOps) {
  return false;
}

namespace llvm {
FunctionPass *createTPCISelDag(TPCTargetMachine &TM, CodeGenOpt::Level OptLevel) {
  return new TPCDAGToDAGISel(TM, OptLevel);
}
} // namespace llvm
