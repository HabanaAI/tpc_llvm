//===-- TPCInstPrinter.h - Convert TPC MCInst to asm syntax -------*- C++ -*--//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints a TPC MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_TPC_INSTPRINTER_TPCINSTPRINTER_H
#define LLVM_LIB_TARGET_TPC_INSTPRINTER_TPCINSTPRINTER_H

#include "llvm/ADT/StringRef.h"
#include "llvm/MC/MCInstPrinter.h"

namespace llvm {

class TPCInstPrinter : public MCInstPrinter {
public:
  static const int InstructionPerLineNoNops;
  static const int InstructionPerLine;
  static const int BundlePerLine;
  static const int TpcAsmParseCompatible;

  TPCInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                 const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}
  ~TPCInstPrinter() {}

  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);

  // Autogenerated by tblgen.
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  bool printAliasInstr(const MCInst *MI, raw_ostream &OS);
  void printCustomAliasOperand(const MCInst *MI, unsigned OpIdx,
                               unsigned PrintMethodIdx, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);
  void printRegName(raw_ostream &OS, unsigned RegNo) const override;

  void printAddrOperand(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printSPredicate(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printVPredicate(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printDataType(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printDimMask(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printSwitchSet(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printComparison(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printAccumulator(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printRhaz(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printRhazRs(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printRhu(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printBothDivMod(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printX2(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printMovDGAll(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printMovDGPack(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printMovDGUnpack(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printJmpLoopTarget(const MCInst *MI, unsigned OpNum, raw_ostream &O);
  void printLoopImm(const MCInst *MI, unsigned OpNum, raw_ostream &O);

  int getFormat() const { return Format; }
  void setFormat(int X) { Format = X; }
  bool getHasPercentPrefix() const { return HasPercentPrefix; }
  void setHasPercentPrefix(bool X) { HasPercentPrefix = X; }

private:
  bool printInst(const MCInst *MI, raw_ostream &Ostream, StringRef Alias,
                 unsigned OpNo0, unsigned OpnNo1);

  int Format = BundlePerLine;
  bool HasPercentPrefix = false;
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_TPC_INSTPRINTER_TPCINSTPRINTER_H
