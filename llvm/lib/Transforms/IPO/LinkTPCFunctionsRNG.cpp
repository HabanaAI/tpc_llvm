#include "LinkTPCFunctionsRNG.h"

// In order to generate LLVM IR for tpc_gen_stage1_seed_v64f32 function the
// following code was compiled:

/*
#define SIGNIFICAND_MASK    0x007fffff

float64 reciprocal_cephes_fast_f32(float64 input)
{
  float64     result, temp0, temp1, temp2;
  const float a = 2.58586f;
  const float b = -5.81818f;
  const float c = 4.24242f;

  int64 significand = 0;
  significand       = v_i32_and_b(*((int64*)&input), SIGNIFICAND_MASK);
  significand       = v_i32_or_b(significand, 0x3f000000);
  result            = *((float64*)&significand);

  int64 exponent = 0;
  exponent       = v_i32_shr_b(*((int64*)&input), 23);
  exponent       = v_i32_and_b(exponent, 0x000000ff);
  exponent -= 0x7e;

  temp0 = v_f32_mac_b(result, a, b);
  temp1 = v_f32_mac_b(result, temp0, c);
  temp2 = v_f32_mac_b(-result, temp1, 2);
  temp2 *= temp1;
  temp0 = v_f32_mac_b(-result, temp2, 2);
  temp0 *= temp2;

  int64 exp = v_i32_shr_b(*((int64*)&temp0), 23);
  exp       = v_i32_and_b(exp, 0x000000ff);
  exp       = v_i32_add_b(exp, -exponent);
  exp       = v_i32_and_b(exp, 0xff);

  return v_f32_form_fp_num_ie_b((char256)exp, input, temp0, SW_EXP_IS_NUM);
}

void main(int seed, tensor out_tnsr) {
  int l_seed = seed;
  if (l_seed == 0)
    l_seed = 1;

  unsigned xor_h_val_u32 = (((unsigned int)(l_seed & 0x3f)) * 4531);
  float seed_f = (float)l_seed;
  seed_f += (float)xor_h_val_u32;
  seed_f *= 0x7853;

  float64 v_tmp1_f32 = seed_f;
  // in_seed.f_val = 1.0f /in_seed.f_val;
  float64 v_tmp2_f32 = reciprocal_cephes_fast_f32(v_tmp1_f32);
  // in_seed.ui32_val = in_seed.ui32_val | 0xfe000000;
  float64 vecSeed_f32 = (float64)((uint64)v_tmp2_f32 | 0xfe000000);

  uint128 av_tmp;
  // lane_id + 419
  av_tmp.v1 = read_lane_id_4b_b() + 419;
  // 1277 * (lane_id + 419)
  av_tmp     = v_u32_mul_b(av_tmp.v1, 1277);
  v_tmp1_f32 = v_convert_i32_to_f32_b((int64)av_tmp.v1, SW_RHNE);
  // calc v_tmp2_f32 = reciprocal: 1 / (1277 * (lane_id + 419))
  v_tmp2_f32 = reciprocal_cephes_fast_f32(v_tmp1_f32);

  v_tmp1_f32 = (float64)(((uint64)v_tmp2_f32) & ((uint64)vecSeed_f32));

  // v_tmp2_f32 = v_tmp1_f32 * 1.712f;
  v_tmp2_f32 = v_tmp1_f32 * 1.7512f;

  // differentiate the exponent area
  // gen val- 2^(lane_id+1)
  // 23 - locate the lane_id val  at the exponent area
  av_tmp.v1 = v_u32_shl_b(read_lane_id_4b_b(), 23);
  av_tmp.v2 = av_tmp.v1 + (1 << 30);
  vecSeed_f32 = ((float64)av_tmp.v2) * v_tmp2_f32;

  // TO BE REMOVED IN IR
  int5 ix = {0, 0, 0, 0, 0};
  v_f32_st_tnsr(ix, out_tnsr, vecSeed_f32);
}
 */
//
// Generation commands:
//
// bin/tpc-clang -march=doron1 -std=rc99 -O2 -S -emit-llvm genstage1vector.c -o genstage1vector_doron1.ll
// bin/tpc-clang -march=gaudi2 -std=rc99 -O2 -S -emit-llvm genstage1vector.c -o genstage1vector_gaudi2.ll
// bin/tpc-clang -march=greco  -std=rc99 -O2 -S -emit-llvm genstage1vector.c -o genstage1vector_greco.ll
// bin/tpc-clang -march=gaudib -std=rc99 -O2 -S -emit-llvm genstage1vector.c -o genstage1vector_gaudib.ll
// bin/tpc-clang -march=gaudi  -std=rc99 -O2 -S -emit-llvm genstage1vector.c -o genstage1vector_gaudi.ll
//
// Generated ll code must be converted next from "void @main" to
// "<64 x float> @tpc_gen_stage1_seed_v64f32". Do not forget to:
//  * remove the last tensor store instruction.
//  * add alwaysinline attribute

using namespace llvm;

#ifdef WIN32

const StringRef GenStage1V64F32Gaudi = "";
const StringRef GenStage1V64F32GaudiB = "";
const StringRef GenStage1V64F32Greco = "";
const StringRef GenStage1V64F32Gaudi2 = "";
const StringRef GenStage1V64F32Doron1 = "";

#else

const StringRef GenStage1V64F32Gaudi = R"(
; Function Attrs: alwaysinline nounwind writeonly
define dso_local <64 x float> @tpc_gen_stage1_seed_v64f32(i32 %seed) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i32 %seed, 0
  %spec.store.select = select i1 %cmp, i32 1, i32 %seed
  %and = and i32 %spec.store.select, 63
  %mul = mul nuw nsw i32 %and, 4531
  %conv = sitofp i32 %spec.store.select to float
  %conv1 = uitofp i32 %mul to float
  %add = fadd float %conv, %conv1
  %mul2 = fmul float %add, 3.080300e+04
  %splat.splatinsert = insertelement <64 x float> poison, float %mul2, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> poison, <64 x i32> zeroinitializer
  %0 = bitcast <64 x float> %splat.splat to <64 x i32>
  %1 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %0, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %2 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %1, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %3 = bitcast <64 x i32> %2 to <64 x float>
  %4 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %0, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %5 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %4, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %6 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %7 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> %6, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i = fneg <64 x float> %3
  %8 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %7, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i = fmul <64 x float> %7, %8
  %9 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %mul.i, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i = fmul <64 x float> %9, %mul.i
  %10 = bitcast <64 x float> %mul2.i to <64 x i32>
  %11 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %10, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %12 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %11, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %5
  %13 = add <64 x i32> %sub3.i, %12
  %14 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %13, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %15 = bitcast <64 x i32> %14 to <256 x i8>
  %16 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %15, <64 x float> %splat.splat, <64 x float> %mul2.i, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %17 = bitcast <64 x float> %16 to <64 x i32>
  %or = or <64 x i32> %17, <i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432>
  %18 = tail call <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32> undef, i1 true, i1 false)
  %add3 = add <64 x i32> %18, <i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419>
  %19 = tail call <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32> %add3, <64 x i32> <i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277>, i8 3, i32 0, <128 x i32> undef, i1 true, i1 false)
  %20 = shufflevector <128 x i32> %19, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %21 = tail call <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32> %20, i8 2, i32 0, <64 x float> undef, i1 true, i1 false)
  %22 = bitcast <64 x float> %21 to <64 x i32>
  %23 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %22, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %24 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %23, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %25 = bitcast <64 x i32> %24 to <64 x float>
  %26 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %22, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %27 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %26, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %28 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %29 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> %28, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i34 = fneg <64 x float> %25
  %30 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %29, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i35 = fmul <64 x float> %29, %30
  %31 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %mul.i35, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i36 = fmul <64 x float> %31, %mul.i35
  %32 = bitcast <64 x float> %mul2.i36 to <64 x i32>
  %33 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %32, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %34 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %33, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i37 = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %27
  %35 = add <64 x i32> %sub3.i37, %34
  %36 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %35, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %37 = bitcast <64 x i32> %36 to <256 x i8>
  %38 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %37, <64 x float> %21, <64 x float> %mul2.i36, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %39 = bitcast <64 x float> %38 to <64 x i32>
  %and7 = and <64 x i32> %or, %39
  %40 = bitcast <64 x i32> %and7 to <64 x float>
  %mul8 = fmul <64 x float> %40, <float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000>
  %41 = tail call <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32> %18, i32 23, i8 3, i32 0, <64 x i32> undef, i1 true, i1 false)
  %add11 = add <64 x i32> %41, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %42 = bitcast <64 x i32> %add11 to <64 x float>
  %mul13 = fmul <64 x float> %mul8, %42
  ret <64 x float> %mul13
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32>, <64 x i32>, i8, i32, <128 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

attributes #0 = { nounwind alwaysinline writeonly "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gaudi" "target-features"="+gaudi" "tpc-kernel"="true" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind }
)";

const StringRef GenStage1V64F32GaudiB = R"(
; Function Attrs: alwaysinline nounwind writeonly
define dso_local <64 x float> @tpc_gen_stage1_seed_v64f32(i32 %seed) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i32 %seed, 0
  %spec.store.select = select i1 %cmp, i32 1, i32 %seed
  %and = and i32 %spec.store.select, 63
  %mul = mul nuw nsw i32 %and, 4531
  %conv = sitofp i32 %spec.store.select to float
  %conv1 = uitofp i32 %mul to float
  %add = fadd float %conv, %conv1
  %mul2 = fmul float %add, 3.080300e+04
  %splat.splatinsert = insertelement <64 x float> poison, float %mul2, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> poison, <64 x i32> zeroinitializer
  %0 = bitcast <64 x float> %splat.splat to <64 x i32>
  %1 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %0, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %2 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %1, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %3 = bitcast <64 x i32> %2 to <64 x float>
  %4 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %0, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %5 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %4, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %6 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %7 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> %6, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i = fneg <64 x float> %3
  %8 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %7, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i = fmul <64 x float> %7, %8
  %9 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %mul.i, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i = fmul <64 x float> %9, %mul.i
  %10 = bitcast <64 x float> %mul2.i to <64 x i32>
  %11 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %10, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %12 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %11, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %5
  %13 = add <64 x i32> %sub3.i, %12
  %14 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %13, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %15 = bitcast <64 x i32> %14 to <256 x i8>
  %16 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %15, <64 x float> %splat.splat, <64 x float> %mul2.i, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %17 = bitcast <64 x float> %16 to <64 x i32>
  %or = or <64 x i32> %17, <i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432>
  %18 = tail call <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32> undef, i1 true, i1 false)
  %add3 = add <64 x i32> %18, <i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419>
  %19 = tail call <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32> %add3, <64 x i32> <i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277>, i8 3, i32 0, <128 x i32> undef, i1 true, i1 false)
  %20 = shufflevector <128 x i32> %19, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %21 = tail call <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32> %20, i8 2, i32 0, <64 x float> undef, i1 true, i1 false)
  %22 = bitcast <64 x float> %21 to <64 x i32>
  %23 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %22, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %24 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %23, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %25 = bitcast <64 x i32> %24 to <64 x float>
  %26 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %22, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %27 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %26, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %28 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %29 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> %28, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i34 = fneg <64 x float> %25
  %30 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %29, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i35 = fmul <64 x float> %29, %30
  %31 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %mul.i35, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i36 = fmul <64 x float> %31, %mul.i35
  %32 = bitcast <64 x float> %mul2.i36 to <64 x i32>
  %33 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %32, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %34 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %33, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i37 = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %27
  %35 = add <64 x i32> %sub3.i37, %34
  %36 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %35, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %37 = bitcast <64 x i32> %36 to <256 x i8>
  %38 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %37, <64 x float> %21, <64 x float> %mul2.i36, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %39 = bitcast <64 x float> %38 to <64 x i32>
  %and7 = and <64 x i32> %or, %39
  %40 = bitcast <64 x i32> %and7 to <64 x float>
  %mul8 = fmul <64 x float> %40, <float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000>
  %41 = tail call <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32> %18, i32 23, i8 3, i32 0, <64 x i32> undef, i1 true, i1 false)
  %add11 = add <64 x i32> %41, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %42 = bitcast <64 x i32> %add11 to <64 x float>
  %mul13 = fmul <64 x float> %mul8, %42
  ret <64 x float> %mul13
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32>, <64 x i32>, i8, i32, <128 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

attributes #0 = { nounwind alwaysinline writeonly "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gaudib" "target-features"="+gaudib" "tpc-kernel"="true" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind }
)" ;

const StringRef GenStage1V64F32Greco = R"(
; Function Attrs: alwaysinline nounwind writeonly
define dso_local <64 x float> @tpc_gen_stage1_seed_v64f32(i32 %seed) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i32 %seed, 0
  %spec.store.select = select i1 %cmp, i32 1, i32 %seed
  %and = and i32 %spec.store.select, 63
  %mul = mul nuw nsw i32 %and, 4531
  %conv = sitofp i32 %spec.store.select to float
  %conv1 = uitofp i32 %mul to float
  %add = fadd float %conv, %conv1
  %mul2 = fmul float %add, 3.080300e+04
  %splat.splatinsert = insertelement <64 x float> poison, float %mul2, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> poison, <64 x i32> zeroinitializer
  %0 = bitcast <64 x float> %splat.splat to <64 x i32>
  %1 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %0, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %2 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %1, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %3 = bitcast <64 x i32> %2 to <64 x float>
  %4 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %0, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %5 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %4, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %6 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %7 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> %6, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i = fneg <64 x float> %3
  %8 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %7, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i = fmul <64 x float> %7, %8
  %9 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %mul.i, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i = fmul <64 x float> %9, %mul.i
  %10 = bitcast <64 x float> %mul2.i to <64 x i32>
  %11 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %10, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %12 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %11, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %5
  %13 = add <64 x i32> %sub3.i, %12
  %14 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %13, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %15 = bitcast <64 x i32> %14 to <256 x i8>
  %16 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %15, <64 x float> %splat.splat, <64 x float> %mul2.i, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %17 = bitcast <64 x float> %16 to <64 x i32>
  %or = or <64 x i32> %17, <i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432>
  %18 = tail call <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32> undef, i1 true, i1 false)
  %add3 = add <64 x i32> %18, <i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419>
  %19 = tail call <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32> %add3, <64 x i32> <i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277>, i8 3, i32 0, <128 x i32> undef, i1 true, i1 false)
  %20 = shufflevector <128 x i32> %19, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %21 = tail call <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32> %20, i8 2, i32 64, <64 x float> undef, i1 true, i1 false)
  %22 = bitcast <64 x float> %21 to <64 x i32>
  %23 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %22, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %24 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %23, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %25 = bitcast <64 x i32> %24 to <64 x float>
  %26 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %22, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %27 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %26, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %28 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %29 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> %28, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i34 = fneg <64 x float> %25
  %30 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %29, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i35 = fmul <64 x float> %29, %30
  %31 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %mul.i35, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i36 = fmul <64 x float> %31, %mul.i35
  %32 = bitcast <64 x float> %mul2.i36 to <64 x i32>
  %33 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %32, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %34 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %33, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i37 = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %27
  %35 = add <64 x i32> %sub3.i37, %34
  %36 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %35, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %37 = bitcast <64 x i32> %36 to <256 x i8>
  %38 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %37, <64 x float> %21, <64 x float> %mul2.i36, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %39 = bitcast <64 x float> %38 to <64 x i32>
  %and7 = and <64 x i32> %or, %39
  %40 = bitcast <64 x i32> %and7 to <64 x float>
  %mul8 = fmul <64 x float> %40, <float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000>
  %41 = tail call <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32> %18, i32 23, i8 3, i32 0, <64 x i32> undef, i1 true, i1 false)
  %add11 = add <64 x i32> %41, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %42 = bitcast <64 x i32> %add11 to <64 x float>
  %mul13 = fmul <64 x float> %mul8, %42
  ret <64 x float> %mul13
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32>, <64 x i32>, i8, i32, <128 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

attributes #0 = { nounwind alwaysinline writeonly "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="greco" "target-features"="+greco" "tpc-kernel"="true" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind }
)";

const StringRef GenStage1V64F32Gaudi2 = R"(
; Function Attrs: alwaysinline nounwind writeonly
define dso_local <64 x float> @tpc_gen_stage1_seed_v64f32(i32 %seed) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i32 %seed, 0
  %spec.store.select = select i1 %cmp, i32 1, i32 %seed
  %and = and i32 %spec.store.select, 63
  %mul = mul nuw nsw i32 %and, 4531
  %conv = sitofp i32 %spec.store.select to float
  %conv1 = uitofp i32 %mul to float
  %add = fadd float %conv, %conv1
  %mul2 = fmul float %add, 3.080300e+04
  %splat.splatinsert = insertelement <64 x float> poison, float %mul2, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> poison, <64 x i32> zeroinitializer
  %0 = bitcast <64 x float> %splat.splat to <64 x i32>
  %1 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %0, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %2 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %1, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %3 = bitcast <64 x i32> %2 to <64 x float>
  %4 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %0, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %5 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %4, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %6 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %7 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> %6, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i = fneg <64 x float> %3
  %8 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %7, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i = fmul <64 x float> %7, %8
  %9 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %mul.i, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i = fmul <64 x float> %9, %mul.i
  %10 = bitcast <64 x float> %mul2.i to <64 x i32>
  %11 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %10, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %12 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %11, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %5
  %13 = add <64 x i32> %sub3.i, %12
  %14 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %13, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %15 = bitcast <64 x i32> %14 to <256 x i8>
  %16 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %15, <64 x float> %splat.splat, <64 x float> %mul2.i, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %17 = bitcast <64 x float> %16 to <64 x i32>
  %or = or <64 x i32> %17, <i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432>
  %18 = tail call <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32> undef, i1 true, i1 false)
  %add3 = add <64 x i32> %18, <i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419>
  %19 = tail call <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32> %add3, <64 x i32> <i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277>, i8 3, i32 0, <128 x i32> undef, i1 true, i1 false)
  %20 = shufflevector <128 x i32> %19, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %21 = tail call <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32> %20, i8 2, i32 64, <64 x float> undef, i1 true, i1 false)
  %22 = bitcast <64 x float> %21 to <64 x i32>
  %23 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %22, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %24 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %23, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %25 = bitcast <64 x i32> %24 to <64 x float>
  %26 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %22, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %27 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %26, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %28 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %29 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> %28, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i34 = fneg <64 x float> %25
  %30 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %29, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i35 = fmul <64 x float> %29, %30
  %31 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %mul.i35, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i36 = fmul <64 x float> %31, %mul.i35
  %32 = bitcast <64 x float> %mul2.i36 to <64 x i32>
  %33 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %32, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %34 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %33, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i37 = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %27
  %35 = add <64 x i32> %sub3.i37, %34
  %36 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %35, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %37 = bitcast <64 x i32> %36 to <256 x i8>
  %38 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %37, <64 x float> %21, <64 x float> %mul2.i36, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %39 = bitcast <64 x float> %38 to <64 x i32>
  %and7 = and <64 x i32> %or, %39
  %40 = bitcast <64 x i32> %and7 to <64 x float>
  %mul8 = fmul <64 x float> %40, <float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000>
  %41 = tail call <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32> %18, i32 23, i8 3, i32 0, <64 x i32> undef, i1 true, i1 false)
  %add11 = add <64 x i32> %41, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %42 = bitcast <64 x i32> %add11 to <64 x float>
  %mul13 = fmul <64 x float> %mul8, %42
  ret <64 x float> %mul13
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32>, <64 x i32>, i8, i32, <128 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

attributes #0 = { nounwind alwaysinline writeonly "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gaudi2" "target-features"="+gaudi2" "tpc-kernel"="true" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind }
)";

const StringRef GenStage1V64F32Doron1 = R"(
; Function Attrs: alwaysinline nounwind writeonly
define dso_local <64 x float> @tpc_gen_stage1_seed_v64f32(i32 %seed) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i32 %seed, 0
  %spec.store.select = select i1 %cmp, i32 1, i32 %seed
  %and = and i32 %spec.store.select, 63
  %mul = mul nuw nsw i32 %and, 4531
  %conv = sitofp i32 %spec.store.select to float
  %conv1 = uitofp i32 %mul to float
  %add = fadd float %conv, %conv1
  %mul2 = fmul float %add, 3.080300e+04
  %splat.splatinsert = insertelement <64 x float> poison, float %mul2, i32 0
  %splat.splat = shufflevector <64 x float> %splat.splatinsert, <64 x float> poison, <64 x i32> zeroinitializer
  %0 = bitcast <64 x float> %splat.splat to <64 x i32>
  %1 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %0, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %2 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %1, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %3 = bitcast <64 x i32> %2 to <64 x float>
  %4 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %0, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %5 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %4, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %6 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %7 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %3, <64 x float> %6, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i = fneg <64 x float> %3
  %8 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %7, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i = fmul <64 x float> %7, %8
  %9 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i, <64 x float> %mul.i, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i = fmul <64 x float> %9, %mul.i
  %10 = bitcast <64 x float> %mul2.i to <64 x i32>
  %11 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %10, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %12 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %11, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %5
  %13 = add <64 x i32> %sub3.i, %12
  %14 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %13, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %15 = bitcast <64 x i32> %14 to <256 x i8>
  %16 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %15, <64 x float> %splat.splat, <64 x float> %mul2.i, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %17 = bitcast <64 x float> %16 to <64 x i32>
  %or = or <64 x i32> %17, <i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432, i32 -33554432>
  %18 = tail call <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32> undef, i1 true, i1 false)
  %add3 = add <64 x i32> %18, <i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419, i32 419>
  %19 = tail call <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32> %add3, <64 x i32> <i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277, i32 1277>, i8 3, i32 0, <128 x i32> undef, i1 true, i1 false)
  %20 = shufflevector <128 x i32> %19, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %21 = tail call <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32> %20, i8 2, i32 64, <64 x float> undef, i1 true, i1 false)
  %22 = bitcast <64 x float> %21 to <64 x i32>
  %23 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %22, i32 8388607, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %24 = tail call <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32> %23, i32 1056964608, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %25 = bitcast <64 x i32> %24 to <64 x float>
  %26 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %22, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %27 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %26, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %28 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> <float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000, float 0x4004AFD760000000>, i8 0, i32 0, <64 x float> <float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000, float 0xC01745D100000000>, i1 true, i1 false) #3
  %29 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %25, <64 x float> %28, i8 0, i32 0, <64 x float> <float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000, float 0x4010F83D00000000>, i1 true, i1 false) #3
  %fneg.i34 = fneg <64 x float> %25
  %30 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %29, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul.i35 = fmul <64 x float> %29, %30
  %31 = tail call <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float> %fneg.i34, <64 x float> %mul.i35, i8 0, i32 0, <64 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, i1 true, i1 false) #3
  %mul2.i36 = fmul <64 x float> %31, %mul.i35
  %32 = bitcast <64 x float> %mul2.i36 to <64 x i32>
  %33 = tail call <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32> %32, i32 23, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %34 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %33, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %sub3.i37 = sub <64 x i32> <i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126, i32 126>, %27
  %35 = add <64 x i32> %sub3.i37, %34
  %36 = tail call <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32> %35, i32 255, i8 2, i32 0, <64 x i32> undef, i1 true, i1 false) #3
  %37 = bitcast <64 x i32> %36 to <256 x i8>
  %38 = tail call <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8> %37, <64 x float> %21, <64 x float> %mul2.i36, i8 0, i32 2048, <64 x float> undef, i1 true, i1 false) #3
  %39 = bitcast <64 x float> %38 to <64 x i32>
  %and7 = and <64 x i32> %or, %39
  %40 = bitcast <64 x i32> %and7 to <64 x float>
  %mul8 = fmul <64 x float> %40, <float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000, float 0x3FFC04EA40000000>
  %41 = tail call <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32> %18, i32 23, i8 3, i32 0, <64 x i32> undef, i1 true, i1 false)
  %add11 = add <64 x i32> %41, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %42 = bitcast <64 x i32> %add11 to <64 x float>
  %mul13 = fmul <64 x float> %mul8, %42
  ret <64 x float> %mul13
}

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.read.lane.id.v64i32.i1(<64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <128 x i32> @llvm.tpc.mul.v128i32.v64i32.v64i32.i1(<64 x i32>, <64 x i32>, i8, i32, <128 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.convert.v64f32.v64i32.i1(<64 x i32>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shl.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.and.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.or.v64i32.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.tpc.shr.v64i32.i32.i1(<64 x i32>, i32, i8, i32, <64 x i32>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.mac.v64f32.v64f32.i1(<64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

; Function Attrs: nounwind readnone
declare <64 x float> @llvm.tpc.form.fp.num.v64f32.v256i8.i1(<256 x i8>, <64 x float>, <64 x float>, i8, i32, <64 x float>, i1, i1) #1

attributes #0 = { nounwind alwaysinline writeonly "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="doron1" "target-features"="+doron1" "tpc-kernel"="true" "uniform-work-group-size"="true" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind writeonly }
attributes #3 = { nounwind }
)";

#endif
