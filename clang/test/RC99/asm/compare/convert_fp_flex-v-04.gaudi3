// RUN: %clang -cc1as -triple tpc-none-none -target-cpu gaudi3 -filetype obj %s -o %t.o
// RUN: %disasm -mcpu gaudi3 %t.o | FileCheck %s

nop;	nop;	convert_fp_flex.f16 V1, V2, V3;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f16 lane_sel=0 default V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, V3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32 V1, V2, V3, !SP1;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, VP1;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, !VP1;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, V3, !SP1; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, V3, VP1; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, V3, !VP1; 	nop

nop;	nop;	convert_fp_flex.f32 V1, V2, V3, rhne;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, rne;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, rz;	nop
nop;	nop;	convert_fp_flex.f32 ru V1, V2, V3;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, rd;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, sr;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, default;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, rhaz;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, sr_rne;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rhne V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rhne V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rz V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 ru V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rd V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 sr V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rhaz V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 sr_rne V1, V2, V3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32.clip_fp V1, V2, V3;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default clip_fp V1, V2, V3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32 V1, V2, V3, lane_sel=0;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, V3, lane_sel=1;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, V3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=1 default V1, V2, V3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32.clip_fp V1, V2, V3, lane_sel=1, rhne;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=1 rhne clip_fp V1, V2, V3, SP0; 	nop


nop;	nop;	convert_fp_flex.f16 V1, V2, S3;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f16 lane_sel=0 default V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, S3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32 V1, V2, S3, !SP1;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, VP1;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, !VP1;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, S3, !SP1; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, S3, VP1; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, S3, !VP1; 	nop

nop;	nop;	convert_fp_flex.f32 V1, V2, S3, rhne;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, rne;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, rz;	nop
nop;	nop;	convert_fp_flex.f32 ru V1, V2, S3;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, rd;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, sr;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, default;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, rhaz;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, sr_rne;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rhne V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rhne V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rz V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 ru V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rd V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 sr V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 rhaz V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 sr_rne V1, V2, S3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32.clip_fp V1, V2, S3;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default clip_fp V1, V2, S3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32 V1, V2, S3, lane_sel=0;	nop
nop;	nop;	convert_fp_flex.f32 V1, V2, S3, lane_sel=1;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, S3, SP0; 	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=1 default V1, V2, S3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32.clip_fp V1, V2, S3, lane_sel=1, rhne;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=1 rhne clip_fp V1, V2, S3, SP0; 	nop

nop;	nop;	convert_fp_flex.f32 V1, V2, 0x07be;	nop
// CHECK: nop; 	nop; 	convert_fp_flex.f32 lane_sel=0 default V1, V2, 0x7be, SP0; 	nop
